/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云IP高防相关接口
 * 京东云IP高防相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Ipanti.Apis;
using JDCloudSDK.Ipanti.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Ipanti.Client
{
    /// <summary>
    /// 京东云IP高防相关接口
    /// 京东云IP高防相关接口
    /// Ipanti Api 客户端
    ///</summary>
    public class IpantiClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private IpantiClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public IpantiClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public IpantiClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public IpantiClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "ipanti.jdcloud-api.com";
        private const string serviceName = "ipanti";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 关闭实例CC防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableInstanceCCResponse DisableInstanceCC(DisableInstanceCCRequest request) {
            return  new DisableInstanceCCExecutor().Client(this).Execute<DisableInstanceCCResponse, DisableInstanceCCResult, DisableInstanceCCRequest>(request);
        }
#else
        /// <summary>
        /// 关闭实例CC防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableInstanceCCResponse> DisableInstanceCC(DisableInstanceCCRequest request) {
            return await new DisableInstanceCCExecutor().Client(this).Execute<DisableInstanceCCResponse, DisableInstanceCCResult, DisableInstanceCCRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询某条网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeWebRuleResponse DescribeWebRule(DescribeWebRuleRequest request) {
            return  new DescribeWebRuleExecutor().Client(this).Execute<DescribeWebRuleResponse, DescribeWebRuleResult, DescribeWebRuleRequest>(request);
        }
#else
        /// <summary>
        /// 查询某条网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeWebRuleResponse> DescribeWebRule(DescribeWebRuleRequest request) {
            return await new DescribeWebRuleExecutor().Client(this).Execute<DescribeWebRuleResponse, DescribeWebRuleResult, DescribeWebRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 非网站类规则切换成防御状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SwitchForwardRuleProtectResponse SwitchForwardRuleProtect(SwitchForwardRuleProtectRequest request) {
            return  new SwitchForwardRuleProtectExecutor().Client(this).Execute<SwitchForwardRuleProtectResponse, SwitchForwardRuleProtectResult, SwitchForwardRuleProtectRequest>(request);
        }
#else
        /// <summary>
        /// 非网站类规则切换成防御状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SwitchForwardRuleProtectResponse> SwitchForwardRuleProtect(SwitchForwardRuleProtectRequest request) {
            return await new SwitchForwardRuleProtectExecutor().Client(this).Execute<SwitchForwardRuleProtectResponse, SwitchForwardRuleProtectResult, SwitchForwardRuleProtectRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 非网站类规则切换成回源状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SwitchForwardRuleOriginResponse SwitchForwardRuleOrigin(SwitchForwardRuleOriginRequest request) {
            return  new SwitchForwardRuleOriginExecutor().Client(this).Execute<SwitchForwardRuleOriginResponse, SwitchForwardRuleOriginResult, SwitchForwardRuleOriginRequest>(request);
        }
#else
        /// <summary>
        /// 非网站类规则切换成回源状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SwitchForwardRuleOriginResponse> SwitchForwardRuleOrigin(SwitchForwardRuleOriginRequest request) {
            return await new SwitchForwardRuleOriginExecutor().Client(this).Execute<SwitchForwardRuleOriginResponse, SwitchForwardRuleOriginResult, SwitchForwardRuleOriginRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateForwardRuleResponse CreateForwardRule(CreateForwardRuleRequest request) {
            return  new CreateForwardRuleExecutor().Client(this).Execute<CreateForwardRuleResponse, CreateForwardRuleResult, CreateForwardRuleRequest>(request);
        }
#else
        /// <summary>
        /// 添加非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateForwardRuleResponse> CreateForwardRule(CreateForwardRuleRequest request) {
            return await new CreateForwardRuleExecutor().Client(this).Execute<CreateForwardRuleResponse, CreateForwardRuleResult, CreateForwardRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改实例名称
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyInstanceNameResponse ModifyInstanceName(ModifyInstanceNameRequest request) {
            return  new ModifyInstanceNameExecutor().Client(this).Execute<ModifyInstanceNameResponse, ModifyInstanceNameResult, ModifyInstanceNameRequest>(request);
        }
#else
        /// <summary>
        /// 修改实例名称
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyInstanceNameResponse> ModifyInstanceName(ModifyInstanceNameRequest request) {
            return await new ModifyInstanceNameExecutor().Client(this).Execute<ModifyInstanceNameResponse, ModifyInstanceNameResult, ModifyInstanceNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 启用实例url白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableInstanceUrlWhiteListResponse EnableInstanceUrlWhiteList(EnableInstanceUrlWhiteListRequest request) {
            return  new EnableInstanceUrlWhiteListExecutor().Client(this).Execute<EnableInstanceUrlWhiteListResponse, EnableInstanceUrlWhiteListResult, EnableInstanceUrlWhiteListRequest>(request);
        }
#else
        /// <summary>
        /// 启用实例url白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableInstanceUrlWhiteListResponse> EnableInstanceUrlWhiteList(EnableInstanceUrlWhiteListRequest request) {
            return await new EnableInstanceUrlWhiteListExecutor().Client(this).Execute<EnableInstanceUrlWhiteListResponse, EnableInstanceUrlWhiteListResult, EnableInstanceUrlWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 关闭CC防护每ip的限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableCcObserverModeResponse DisableCcObserverMode(DisableCcObserverModeRequest request) {
            return  new DisableCcObserverModeExecutor().Client(this).Execute<DisableCcObserverModeResponse, DisableCcObserverModeResult, DisableCcObserverModeRequest>(request);
        }
#else
        /// <summary>
        /// 关闭CC防护每ip的限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableCcObserverModeResponse> DisableCcObserverMode(DisableCcObserverModeRequest request) {
            return await new DisableCcObserverModeExecutor().Client(this).Execute<DisableCcObserverModeResponse, DisableCcObserverModeResult, DisableCcObserverModeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 开启CC防护每ip的限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableCcObserverModeResponse EnableCcObserverMode(EnableCcObserverModeRequest request) {
            return  new EnableCcObserverModeExecutor().Client(this).Execute<EnableCcObserverModeResponse, EnableCcObserverModeResult, EnableCcObserverModeRequest>(request);
        }
#else
        /// <summary>
        /// 开启CC防护每ip的限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableCcObserverModeResponse> EnableCcObserverMode(EnableCcObserverModeRequest request) {
            return await new EnableCcObserverModeExecutor().Client(this).Execute<EnableCcObserverModeResponse, EnableCcObserverModeResult, EnableCcObserverModeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 禁用实例ip白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableInstanceIpWhiteListResponse DisableInstanceIpWhiteList(DisableInstanceIpWhiteListRequest request) {
            return  new DisableInstanceIpWhiteListExecutor().Client(this).Execute<DisableInstanceIpWhiteListResponse, DisableInstanceIpWhiteListResult, DisableInstanceIpWhiteListRequest>(request);
        }
#else
        /// <summary>
        /// 禁用实例ip白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableInstanceIpWhiteListResponse> DisableInstanceIpWhiteList(DisableInstanceIpWhiteListRequest request) {
            return await new DisableInstanceIpWhiteListExecutor().Client(this).Execute<DisableInstanceIpWhiteListResponse, DisableInstanceIpWhiteListResult, DisableInstanceIpWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInstanceResponse DescribeInstance(DescribeInstanceRequest request) {
            return  new DescribeInstanceExecutor().Client(this).Execute<DescribeInstanceResponse, DescribeInstanceResult, DescribeInstanceRequest>(request);
        }
#else
        /// <summary>
        /// 查询实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInstanceResponse> DescribeInstance(DescribeInstanceRequest request) {
            return await new DescribeInstanceExecutor().Client(this).Execute<DescribeInstanceResponse, DescribeInstanceResult, DescribeInstanceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询某个实例下的非网站转发配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeForwardRulesResponse DescribeForwardRules(DescribeForwardRulesRequest request) {
            return  new DescribeForwardRulesExecutor().Client(this).Execute<DescribeForwardRulesResponse, DescribeForwardRulesResult, DescribeForwardRulesRequest>(request);
        }
#else
        /// <summary>
        /// 查询某个实例下的非网站转发配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeForwardRulesResponse> DescribeForwardRules(DescribeForwardRulesRequest request) {
            return await new DescribeForwardRulesExecutor().Client(this).Execute<DescribeForwardRulesResponse, DescribeForwardRulesResult, DescribeForwardRulesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// ddos防护报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DdosGraphResponse DdosGraph(DdosGraphRequest request) {
            return  new DdosGraphExecutor().Client(this).Execute<DdosGraphResponse, DdosGraphResult, DdosGraphRequest>(request);
        }
#else
        /// <summary>
        /// ddos防护报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DdosGraphResponse> DdosGraph(DdosGraphRequest request) {
            return await new DdosGraphExecutor().Client(this).Execute<DdosGraphResponse, DdosGraphResult, DdosGraphRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置实例CC防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyInstanceCCResponse ModifyInstanceCC(ModifyInstanceCCRequest request) {
            return  new ModifyInstanceCCExecutor().Client(this).Execute<ModifyInstanceCCResponse, ModifyInstanceCCResult, ModifyInstanceCCRequest>(request);
        }
#else
        /// <summary>
        /// 设置实例CC防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyInstanceCCResponse> ModifyInstanceCC(ModifyInstanceCCRequest request) {
            return await new ModifyInstanceCCExecutor().Client(this).Execute<ModifyInstanceCCResponse, ModifyInstanceCCResult, ModifyInstanceCCRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询某个实例下的网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeWebRulesResponse DescribeWebRules(DescribeWebRulesRequest request) {
            return  new DescribeWebRulesExecutor().Client(this).Execute<DescribeWebRulesResponse, DescribeWebRulesResult, DescribeWebRulesRequest>(request);
        }
#else
        /// <summary>
        /// 查询某个实例下的网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeWebRulesResponse> DescribeWebRules(DescribeWebRulesRequest request) {
            return await new DescribeWebRulesExecutor().Client(this).Execute<DescribeWebRulesResponse, DescribeWebRulesResult, DescribeWebRulesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 开启实例CC防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableInstanceCCResponse EnableInstanceCC(EnableInstanceCCRequest request) {
            return  new EnableInstanceCCExecutor().Client(this).Execute<EnableInstanceCCResponse, EnableInstanceCCResult, EnableInstanceCCRequest>(request);
        }
#else
        /// <summary>
        /// 开启实例CC防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableInstanceCCResponse> EnableInstanceCC(EnableInstanceCCRequest request) {
            return await new EnableInstanceCCExecutor().Client(this).Execute<EnableInstanceCCResponse, EnableInstanceCCResult, EnableInstanceCCRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 禁用实例ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableInstanceIpBlackListResponse DisableInstanceIpBlackList(DisableInstanceIpBlackListRequest request) {
            return  new DisableInstanceIpBlackListExecutor().Client(this).Execute<DisableInstanceIpBlackListResponse, DisableInstanceIpBlackListResult, DisableInstanceIpBlackListRequest>(request);
        }
#else
        /// <summary>
        /// 禁用实例ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableInstanceIpBlackListResponse> DisableInstanceIpBlackList(DisableInstanceIpBlackListRequest request) {
            return await new DisableInstanceIpBlackListExecutor().Client(this).Execute<DisableInstanceIpBlackListResponse, DisableInstanceIpBlackListResult, DisableInstanceIpBlackListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新某条非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyForwardRuleResponse ModifyForwardRule(ModifyForwardRuleRequest request) {
            return  new ModifyForwardRuleExecutor().Client(this).Execute<ModifyForwardRuleResponse, ModifyForwardRuleResult, ModifyForwardRuleRequest>(request);
        }
#else
        /// <summary>
        /// 更新某条非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyForwardRuleResponse> ModifyForwardRule(ModifyForwardRuleRequest request) {
            return await new ModifyForwardRuleExecutor().Client(this).Execute<ModifyForwardRuleResponse, ModifyForwardRuleResult, ModifyForwardRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 网站类规则开启CC
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableWebRuleCCResponse EnableWebRuleCC(EnableWebRuleCCRequest request) {
            return  new EnableWebRuleCCExecutor().Client(this).Execute<EnableWebRuleCCResponse, EnableWebRuleCCResult, EnableWebRuleCCRequest>(request);
        }
#else
        /// <summary>
        /// 网站类规则开启CC
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableWebRuleCCResponse> EnableWebRuleCC(EnableWebRuleCCRequest request) {
            return await new EnableWebRuleCCExecutor().Client(this).Execute<EnableWebRuleCCResponse, EnableWebRuleCCResult, EnableWebRuleCCRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除某条网站规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteWebRuleResponse DeleteWebRule(DeleteWebRuleRequest request) {
            return  new DeleteWebRuleExecutor().Client(this).Execute<DeleteWebRuleResponse, DeleteWebRuleResult, DeleteWebRuleRequest>(request);
        }
#else
        /// <summary>
        /// 删除某条网站规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteWebRuleResponse> DeleteWebRule(DeleteWebRuleRequest request) {
            return await new DeleteWebRuleExecutor().Client(this).Execute<DeleteWebRuleResponse, DeleteWebRuleResult, DeleteWebRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateInstanceResponse CreateInstance(CreateInstanceRequest request) {
            return  new CreateInstanceExecutor().Client(this).Execute<CreateInstanceResponse, CreateInstanceResult, CreateInstanceRequest>(request);
        }
#else
        /// <summary>
        /// 创建实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateInstanceResponse> CreateInstance(CreateInstanceRequest request) {
            return await new CreateInstanceExecutor().Client(this).Execute<CreateInstanceResponse, CreateInstanceResult, CreateInstanceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置实例url白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyInstanceUrlWhiteListResponse ModifyInstanceUrlWhiteList(ModifyInstanceUrlWhiteListRequest request) {
            return  new ModifyInstanceUrlWhiteListExecutor().Client(this).Execute<ModifyInstanceUrlWhiteListResponse, ModifyInstanceUrlWhiteListResult, ModifyInstanceUrlWhiteListRequest>(request);
        }
#else
        /// <summary>
        /// 设置实例url白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyInstanceUrlWhiteListResponse> ModifyInstanceUrlWhiteList(ModifyInstanceUrlWhiteListRequest request) {
            return await new ModifyInstanceUrlWhiteListExecutor().Client(this).Execute<ModifyInstanceUrlWhiteListResponse, ModifyInstanceUrlWhiteListResult, ModifyInstanceUrlWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateWebRuleResponse CreateWebRule(CreateWebRuleRequest request) {
            return  new CreateWebRuleExecutor().Client(this).Execute<CreateWebRuleResponse, CreateWebRuleResult, CreateWebRuleRequest>(request);
        }
#else
        /// <summary>
        /// 添加网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateWebRuleResponse> CreateWebRule(CreateWebRuleRequest request) {
            return await new CreateWebRuleExecutor().Client(this).Execute<CreateWebRuleResponse, CreateWebRuleResult, CreateWebRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 网站类规则切换成防御状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SwitchWebRuleProtectResponse SwitchWebRuleProtect(SwitchWebRuleProtectRequest request) {
            return  new SwitchWebRuleProtectExecutor().Client(this).Execute<SwitchWebRuleProtectResponse, SwitchWebRuleProtectResult, SwitchWebRuleProtectRequest>(request);
        }
#else
        /// <summary>
        /// 网站类规则切换成防御状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SwitchWebRuleProtectResponse> SwitchWebRuleProtect(SwitchWebRuleProtectRequest request) {
            return await new SwitchWebRuleProtectExecutor().Client(this).Execute<SwitchWebRuleProtectResponse, SwitchWebRuleProtectResult, SwitchWebRuleProtectRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询某条非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeForwardRuleResponse DescribeForwardRule(DescribeForwardRuleRequest request) {
            return  new DescribeForwardRuleExecutor().Client(this).Execute<DescribeForwardRuleResponse, DescribeForwardRuleResult, DescribeForwardRuleRequest>(request);
        }
#else
        /// <summary>
        /// 查询某条非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeForwardRuleResponse> DescribeForwardRule(DescribeForwardRuleRequest request) {
            return await new DescribeForwardRuleExecutor().Client(this).Execute<DescribeForwardRuleResponse, DescribeForwardRuleResult, DescribeForwardRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 网站类规则切换成回源状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SwitchWebRuleOriginResponse SwitchWebRuleOrigin(SwitchWebRuleOriginRequest request) {
            return  new SwitchWebRuleOriginExecutor().Client(this).Execute<SwitchWebRuleOriginResponse, SwitchWebRuleOriginResult, SwitchWebRuleOriginRequest>(request);
        }
#else
        /// <summary>
        /// 网站类规则切换成回源状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SwitchWebRuleOriginResponse> SwitchWebRuleOrigin(SwitchWebRuleOriginRequest request) {
            return await new SwitchWebRuleOriginExecutor().Client(this).Execute<SwitchWebRuleOriginResponse, SwitchWebRuleOriginResult, SwitchWebRuleOriginRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 转发流量报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public FwdGraphResponse FwdGraph(FwdGraphRequest request) {
            return  new FwdGraphExecutor().Client(this).Execute<FwdGraphResponse, FwdGraphResult, FwdGraphRequest>(request);
        }
#else
        /// <summary>
        /// 转发流量报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<FwdGraphResponse> FwdGraph(FwdGraphRequest request) {
            return await new FwdGraphExecutor().Client(this).Execute<FwdGraphResponse, FwdGraphResult, FwdGraphRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置实例ip白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyInstanceIpWhiteListResponse ModifyInstanceIpWhiteList(ModifyInstanceIpWhiteListRequest request) {
            return  new ModifyInstanceIpWhiteListExecutor().Client(this).Execute<ModifyInstanceIpWhiteListResponse, ModifyInstanceIpWhiteListResult, ModifyInstanceIpWhiteListRequest>(request);
        }
#else
        /// <summary>
        /// 设置实例ip白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyInstanceIpWhiteListResponse> ModifyInstanceIpWhiteList(ModifyInstanceIpWhiteListRequest request) {
            return await new ModifyInstanceIpWhiteListExecutor().Client(this).Execute<ModifyInstanceIpWhiteListResponse, ModifyInstanceIpWhiteListResult, ModifyInstanceIpWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询DDos攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeDDosAttackLogsResponse DescribeDDosAttackLogs(DescribeDDosAttackLogsRequest request) {
            return  new DescribeDDosAttackLogsExecutor().Client(this).Execute<DescribeDDosAttackLogsResponse, DescribeDDosAttackLogsResult, DescribeDDosAttackLogsRequest>(request);
        }
#else
        /// <summary>
        /// 查询DDos攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeDDosAttackLogsResponse> DescribeDDosAttackLogs(DescribeDDosAttackLogsRequest request) {
            return await new DescribeDDosAttackLogsExecutor().Client(this).Execute<DescribeDDosAttackLogsResponse, DescribeDDosAttackLogsResult, DescribeDDosAttackLogsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置实例ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyInstanceIpBlackListResponse ModifyInstanceIpBlackList(ModifyInstanceIpBlackListRequest request) {
            return  new ModifyInstanceIpBlackListExecutor().Client(this).Execute<ModifyInstanceIpBlackListResponse, ModifyInstanceIpBlackListResult, ModifyInstanceIpBlackListRequest>(request);
        }
#else
        /// <summary>
        /// 设置实例ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyInstanceIpBlackListResponse> ModifyInstanceIpBlackList(ModifyInstanceIpBlackListRequest request) {
            return await new ModifyInstanceIpBlackListExecutor().Client(this).Execute<ModifyInstanceIpBlackListResponse, ModifyInstanceIpBlackListResult, ModifyInstanceIpBlackListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 网站类规则禁用CC
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableWebRuleCCResponse DisableWebRuleCC(DisableWebRuleCCRequest request) {
            return  new DisableWebRuleCCExecutor().Client(this).Execute<DisableWebRuleCCResponse, DisableWebRuleCCResult, DisableWebRuleCCRequest>(request);
        }
#else
        /// <summary>
        /// 网站类规则禁用CC
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableWebRuleCCResponse> DisableWebRuleCC(DisableWebRuleCCRequest request) {
            return await new DisableWebRuleCCExecutor().Client(this).Execute<DisableWebRuleCCResponse, DisableWebRuleCCResult, DisableWebRuleCCRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 禁用实例url白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableInstanceUrlWhiteListResponse DisableInstanceUrlWhiteList(DisableInstanceUrlWhiteListRequest request) {
            return  new DisableInstanceUrlWhiteListExecutor().Client(this).Execute<DisableInstanceUrlWhiteListResponse, DisableInstanceUrlWhiteListResult, DisableInstanceUrlWhiteListRequest>(request);
        }
#else
        /// <summary>
        /// 禁用实例url白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableInstanceUrlWhiteListResponse> DisableInstanceUrlWhiteList(DisableInstanceUrlWhiteListRequest request) {
            return await new DisableInstanceUrlWhiteListExecutor().Client(this).Execute<DisableInstanceUrlWhiteListResponse, DisableInstanceUrlWhiteListResult, DisableInstanceUrlWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 启用实例ip白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableInstanceIpWhiteListResponse EnableInstanceIpWhiteList(EnableInstanceIpWhiteListRequest request) {
            return  new EnableInstanceIpWhiteListExecutor().Client(this).Execute<EnableInstanceIpWhiteListResponse, EnableInstanceIpWhiteListResult, EnableInstanceIpWhiteListRequest>(request);
        }
#else
        /// <summary>
        /// 启用实例ip白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableInstanceIpWhiteListResponse> EnableInstanceIpWhiteList(EnableInstanceIpWhiteListRequest request) {
            return await new EnableInstanceIpWhiteListExecutor().Client(this).Execute<EnableInstanceIpWhiteListResponse, EnableInstanceIpWhiteListResult, EnableInstanceIpWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 转发流量报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CcGraphResponse CcGraph(CcGraphRequest request) {
            return  new CcGraphExecutor().Client(this).Execute<CcGraphResponse, CcGraphResult, CcGraphRequest>(request);
        }
#else
        /// <summary>
        /// 转发流量报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CcGraphResponse> CcGraph(CcGraphRequest request) {
            return await new CcGraphExecutor().Client(this).Execute<CcGraphResponse, CcGraphResult, CcGraphRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除某条非网站规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteForwardRuleResponse DeleteForwardRule(DeleteForwardRuleRequest request) {
            return  new DeleteForwardRuleExecutor().Client(this).Execute<DeleteForwardRuleResponse, DeleteForwardRuleResult, DeleteForwardRuleRequest>(request);
        }
#else
        /// <summary>
        /// 删除某条非网站规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteForwardRuleResponse> DeleteForwardRule(DeleteForwardRuleRequest request) {
            return await new DeleteForwardRuleExecutor().Client(this).Execute<DeleteForwardRuleResponse, DeleteForwardRuleResult, DeleteForwardRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新某条网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyWebRuleResponse ModifyWebRule(ModifyWebRuleRequest request) {
            return  new ModifyWebRuleExecutor().Client(this).Execute<ModifyWebRuleResponse, ModifyWebRuleResult, ModifyWebRuleRequest>(request);
        }
#else
        /// <summary>
        /// 更新某条网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyWebRuleResponse> ModifyWebRule(ModifyWebRuleRequest request) {
            return await new ModifyWebRuleExecutor().Client(this).Execute<ModifyWebRuleResponse, ModifyWebRuleResult, ModifyWebRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置实例CC防护每ip限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetCcIpLimitResponse SetCcIpLimit(SetCcIpLimitRequest request) {
            return  new SetCcIpLimitExecutor().Client(this).Execute<SetCcIpLimitResponse, SetCcIpLimitResult, SetCcIpLimitRequest>(request);
        }
#else
        /// <summary>
        /// 设置实例CC防护每ip限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetCcIpLimitResponse> SetCcIpLimit(SetCcIpLimitRequest request) {
            return await new SetCcIpLimitExecutor().Client(this).Execute<SetCcIpLimitResponse, SetCcIpLimitResult, SetCcIpLimitRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询cc攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCcAttackLogsResponse DescribeCcAttackLogs(DescribeCcAttackLogsRequest request) {
            return  new DescribeCcAttackLogsExecutor().Client(this).Execute<DescribeCcAttackLogsResponse, DescribeCcAttackLogsResult, DescribeCcAttackLogsRequest>(request);
        }
#else
        /// <summary>
        /// 查询cc攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCcAttackLogsResponse> DescribeCcAttackLogs(DescribeCcAttackLogsRequest request) {
            return await new DescribeCcAttackLogsExecutor().Client(this).Execute<DescribeCcAttackLogsResponse, DescribeCcAttackLogsResult, DescribeCcAttackLogsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 启用实例ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableInstanceIpBlackListResponse EnableInstanceIpBlackList(EnableInstanceIpBlackListRequest request) {
            return  new EnableInstanceIpBlackListExecutor().Client(this).Execute<EnableInstanceIpBlackListResponse, EnableInstanceIpBlackListResult, EnableInstanceIpBlackListRequest>(request);
        }
#else
        /// <summary>
        /// 启用实例ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableInstanceIpBlackListResponse> EnableInstanceIpBlackList(EnableInstanceIpBlackListRequest request) {
            return await new EnableInstanceIpBlackListExecutor().Client(this).Execute<EnableInstanceIpBlackListResponse, EnableInstanceIpBlackListResult, EnableInstanceIpBlackListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询实例列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInstancesResponse DescribeInstances(DescribeInstancesRequest request) {
            return  new DescribeInstancesExecutor().Client(this).Execute<DescribeInstancesResponse, DescribeInstancesResult, DescribeInstancesRequest>(request);
        }
#else
        /// <summary>
        /// 查询实例列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInstancesResponse> DescribeInstances(DescribeInstancesRequest request) {
            return await new DescribeInstancesExecutor().Client(this).Execute<DescribeInstancesResponse, DescribeInstancesResult, DescribeInstancesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询cc攻击日志详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCcAttackLogDetailsResponse DescribeCcAttackLogDetails(DescribeCcAttackLogDetailsRequest request) {
            return  new DescribeCcAttackLogDetailsExecutor().Client(this).Execute<DescribeCcAttackLogDetailsResponse, DescribeCcAttackLogDetailsResult, DescribeCcAttackLogDetailsRequest>(request);
        }
#else
        /// <summary>
        /// 查询cc攻击日志详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCcAttackLogDetailsResponse> DescribeCcAttackLogDetails(DescribeCcAttackLogDetailsRequest request) {
            return await new DescribeCcAttackLogDetailsExecutor().Client(this).Execute<DescribeCcAttackLogDetailsResponse, DescribeCcAttackLogDetailsResult, DescribeCcAttackLogDetailsRequest>(request);
        }
#endif

            /// <summary>
            ///  默认IpantiClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>ipantiClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>ipantiClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>ipantiClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造IpantiClient 对象
                ///</summary>
                IpantiClient Build();
            }

            /// <summary>
            ///  默认IpantiClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// IpantiClient service client
                /// </summary>
                private  IpantiClient ipantiClient;

                /// <summary>
                ///  默认IpantiClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    ipantiClient = new IpantiClient();
                }

                /// <summary>
                ///  构造IpantiClient 对象
                ///</summary>
                public IpantiClient Build()
                {
                    if (ipantiClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        ipantiClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (ipantiClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("IpantiClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (ipantiClient.HttpRequestConfig == null)
                    {
                        ipantiClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (ipantiClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("IpantiClient build error: http request config not set");
                        }
                    }
                    return ipantiClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>ipantiClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    ipantiClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>ipantiClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    ipantiClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>ipantiClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    ipantiClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
