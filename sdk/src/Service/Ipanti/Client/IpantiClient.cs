/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云IP高防相关接口
 * 京东云IP高防相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Ipanti.Apis;
using JDCloudSDK.Ipanti.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Ipanti.Client
{
    /// <summary>
    ///  京东云IP高防相关接口
    ///  京东云IP高防相关接口
    ///  Ipanti Api 客户端
    ///</summary>
    public class IpantiClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private IpantiClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public IpantiClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public IpantiClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public IpantiClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.9
        ///</summary>
        public const string ClientVersion = "1.0.9";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "ipanti.jdcloud-api.com";
        private const string serviceName = "ipanti";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        ///  查询告警配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAlarmConfigResponse DescribeAlarmConfig(DescribeAlarmConfigRequest request) {
            return  new DescribeAlarmConfigExecutor().Client(this).Execute<DescribeAlarmConfigResponse, DescribeAlarmConfigResult, DescribeAlarmConfigRequest>(request);
        }
#else
        /// <summary>
        ///  查询告警配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAlarmConfigResponse> DescribeAlarmConfig(DescribeAlarmConfigRequest request) {
            return await new DescribeAlarmConfigExecutor().Client(this).Execute<DescribeAlarmConfigResponse, DescribeAlarmConfigResult, DescribeAlarmConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询非网站类转发规则的防护规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeProtectionRuleOfForwardRuleResponse DescribeProtectionRuleOfForwardRule(DescribeProtectionRuleOfForwardRuleRequest request) {
            return  new DescribeProtectionRuleOfForwardRuleExecutor().Client(this).Execute<DescribeProtectionRuleOfForwardRuleResponse, DescribeProtectionRuleOfForwardRuleResult, DescribeProtectionRuleOfForwardRuleRequest>(request);
        }
#else
        /// <summary>
        ///  查询非网站类转发规则的防护规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeProtectionRuleOfForwardRuleResponse> DescribeProtectionRuleOfForwardRule(DescribeProtectionRuleOfForwardRuleRequest request) {
            return await new DescribeProtectionRuleOfForwardRuleExecutor().Client(this).Execute<DescribeProtectionRuleOfForwardRuleResponse, DescribeProtectionRuleOfForwardRuleResult, DescribeProtectionRuleOfForwardRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  更新实例弹性防护带宽
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyEPBResponse ModifyEPB(ModifyEPBRequest request) {
            return  new ModifyEPBExecutor().Client(this).Execute<ModifyEPBResponse, ModifyEPBResult, ModifyEPBRequest>(request);
        }
#else
        /// <summary>
        ///  更新实例弹性防护带宽
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyEPBResponse> ModifyEPB(ModifyEPBRequest request) {
            return await new ModifyEPBExecutor().Client(this).Execute<ModifyEPBResponse, ModifyEPBResult, ModifyEPBRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  开启实例 IP 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableInstanceIpWhiteListResponse EnableInstanceIpWhiteList(EnableInstanceIpWhiteListRequest request) {
            return  new EnableInstanceIpWhiteListExecutor().Client(this).Execute<EnableInstanceIpWhiteListResponse, EnableInstanceIpWhiteListResult, EnableInstanceIpWhiteListRequest>(request);
        }
#else
        /// <summary>
        ///  开启实例 IP 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableInstanceIpWhiteListResponse> EnableInstanceIpWhiteList(EnableInstanceIpWhiteListRequest request) {
            return await new EnableInstanceIpWhiteListExecutor().Client(this).Execute<EnableInstanceIpWhiteListResponse, EnableInstanceIpWhiteListResult, EnableInstanceIpWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  关闭实例 CC 防护的观察者模式
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableCCObserverModeResponse DisableCCObserverMode(DisableCCObserverModeRequest request) {
            return  new DisableCCObserverModeExecutor().Client(this).Execute<DisableCCObserverModeResponse, DisableCCObserverModeResult, DisableCCObserverModeRequest>(request);
        }
#else
        /// <summary>
        ///  关闭实例 CC 防护的观察者模式
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableCCObserverModeResponse> DisableCCObserverMode(DisableCCObserverModeRequest request) {
            return await new DisableCCObserverModeExecutor().Client(this).Execute<DisableCCObserverModeResponse, DisableCCObserverModeResult, DisableCCObserverModeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  开启 CC 防护每 IP 的限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableCCIpLimitResponse EnableCCIpLimit(EnableCCIpLimitRequest request) {
            return  new EnableCCIpLimitExecutor().Client(this).Execute<EnableCCIpLimitResponse, EnableCCIpLimitResult, EnableCCIpLimitRequest>(request);
        }
#else
        /// <summary>
        ///  开启 CC 防护每 IP 的限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableCCIpLimitResponse> EnableCCIpLimit(EnableCCIpLimitRequest request) {
            return await new EnableCCIpLimitExecutor().Client(this).Execute<EnableCCIpLimitResponse, EnableCCIpLimitResult, EnableCCIpLimitRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置实例 CC 防护每 IP 限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetCCIpLimitResponse SetCCIpLimit(SetCCIpLimitRequest request) {
            return  new SetCCIpLimitExecutor().Client(this).Execute<SetCCIpLimitResponse, SetCCIpLimitResult, SetCCIpLimitRequest>(request);
        }
#else
        /// <summary>
        ///  设置实例 CC 防护每 IP 限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetCCIpLimitResponse> SetCCIpLimit(SetCCIpLimitRequest request) {
            return await new SetCCIpLimitExecutor().Client(this).Execute<SetCCIpLimitResponse, SetCCIpLimitResult, SetCCIpLimitRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  修改网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyWebRuleResponse ModifyWebRule(ModifyWebRuleRequest request) {
            return  new ModifyWebRuleExecutor().Client(this).Execute<ModifyWebRuleResponse, ModifyWebRuleResult, ModifyWebRuleRequest>(request);
        }
#else
        /// <summary>
        ///  修改网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyWebRuleResponse> ModifyWebRule(ModifyWebRuleRequest request) {
            return await new ModifyWebRuleExecutor().Client(this).Execute<ModifyWebRuleResponse, ModifyWebRuleResult, ModifyWebRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除非网站规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteForwardRuleResponse DeleteForwardRule(DeleteForwardRuleRequest request) {
            return  new DeleteForwardRuleExecutor().Client(this).Execute<DeleteForwardRuleResponse, DeleteForwardRuleResult, DeleteForwardRuleRequest>(request);
        }
#else
        /// <summary>
        ///  删除非网站规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteForwardRuleResponse> DeleteForwardRule(DeleteForwardRuleRequest request) {
            return await new DeleteForwardRuleExecutor().Client(this).Execute<DeleteForwardRuleResponse, DeleteForwardRuleResult, DeleteForwardRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  网站类规则切换成防御状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SwitchWebRuleProtectResponse SwitchWebRuleProtect(SwitchWebRuleProtectRequest request) {
            return  new SwitchWebRuleProtectExecutor().Client(this).Execute<SwitchWebRuleProtectResponse, SwitchWebRuleProtectResult, SwitchWebRuleProtectRequest>(request);
        }
#else
        /// <summary>
        ///  网站类规则切换成防御状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SwitchWebRuleProtectResponse> SwitchWebRuleProtect(SwitchWebRuleProtectRequest request) {
            return await new SwitchWebRuleProtectExecutor().Client(this).Execute<SwitchWebRuleProtectResponse, SwitchWebRuleProtectResult, SwitchWebRuleProtectRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询实例列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInstancesResponse DescribeInstances(DescribeInstancesRequest request) {
            return  new DescribeInstancesExecutor().Client(this).Execute<DescribeInstancesResponse, DescribeInstancesResult, DescribeInstancesRequest>(request);
        }
#else
        /// <summary>
        ///  查询实例列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInstancesResponse> DescribeInstances(DescribeInstancesRequest request) {
            return await new DescribeInstancesExecutor().Client(this).Execute<DescribeInstancesResponse, DescribeInstancesResult, DescribeInstancesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置实例 IP 黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyInstanceIpBlackListResponse ModifyInstanceIpBlackList(ModifyInstanceIpBlackListRequest request) {
            return  new ModifyInstanceIpBlackListExecutor().Client(this).Execute<ModifyInstanceIpBlackListResponse, ModifyInstanceIpBlackListResult, ModifyInstanceIpBlackListRequest>(request);
        }
#else
        /// <summary>
        ///  设置实例 IP 黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyInstanceIpBlackListResponse> ModifyInstanceIpBlackList(ModifyInstanceIpBlackListRequest request) {
            return await new ModifyInstanceIpBlackListExecutor().Client(this).Execute<ModifyInstanceIpBlackListResponse, ModifyInstanceIpBlackListResult, ModifyInstanceIpBlackListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  新购或升级高防实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateInstanceResponse CreateInstance(CreateInstanceRequest request) {
            return  new CreateInstanceExecutor().Client(this).Execute<CreateInstanceResponse, CreateInstanceResult, CreateInstanceRequest>(request);
        }
#else
        /// <summary>
        ///  新购或升级高防实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateInstanceResponse> CreateInstance(CreateInstanceRequest request) {
            return await new CreateInstanceExecutor().Client(this).Execute<CreateInstanceResponse, CreateInstanceResult, CreateInstanceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询 CC 攻击日志详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCCAttackLogDetailsResponse DescribeCCAttackLogDetails(DescribeCCAttackLogDetailsRequest request) {
            return  new DescribeCCAttackLogDetailsExecutor().Client(this).Execute<DescribeCCAttackLogDetailsResponse, DescribeCCAttackLogDetailsResult, DescribeCCAttackLogDetailsRequest>(request);
        }
#else
        /// <summary>
        ///  查询 CC 攻击日志详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCCAttackLogDetailsResponse> DescribeCCAttackLogDetails(DescribeCCAttackLogDetailsRequest request) {
            return await new DescribeCCAttackLogDetailsExecutor().Client(this).Execute<DescribeCCAttackLogDetailsResponse, DescribeCCAttackLogDetailsResult, DescribeCCAttackLogDetailsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询各类型攻击次数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAttackTypeCountResponse DescribeAttackTypeCount(DescribeAttackTypeCountRequest request) {
            return  new DescribeAttackTypeCountExecutor().Client(this).Execute<DescribeAttackTypeCountResponse, DescribeAttackTypeCountResult, DescribeAttackTypeCountRequest>(request);
        }
#else
        /// <summary>
        ///  查询各类型攻击次数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAttackTypeCountResponse> DescribeAttackTypeCount(DescribeAttackTypeCountRequest request) {
            return await new DescribeAttackTypeCountExecutor().Client(this).Execute<DescribeAttackTypeCountResponse, DescribeAttackTypeCountResult, DescribeAttackTypeCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  非网站类规则切换成回源状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SwitchForwardRuleOriginResponse SwitchForwardRuleOrigin(SwitchForwardRuleOriginRequest request) {
            return  new SwitchForwardRuleOriginExecutor().Client(this).Execute<SwitchForwardRuleOriginResponse, SwitchForwardRuleOriginResult, SwitchForwardRuleOriginRequest>(request);
        }
#else
        /// <summary>
        ///  非网站类规则切换成回源状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SwitchForwardRuleOriginResponse> SwitchForwardRuleOrigin(SwitchForwardRuleOriginRequest request) {
            return await new SwitchForwardRuleOriginExecutor().Client(this).Execute<SwitchForwardRuleOriginResponse, SwitchForwardRuleOriginResult, SwitchForwardRuleOriginRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询非网站类转发规则的防护规则 Geo 拦截可设置区域编码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeGeoAreasResponse DescribeGeoAreas(DescribeGeoAreasRequest request) {
            return  new DescribeGeoAreasExecutor().Client(this).Execute<DescribeGeoAreasResponse, DescribeGeoAreasResult, DescribeGeoAreasRequest>(request);
        }
#else
        /// <summary>
        ///  查询非网站类转发规则的防护规则 Geo 拦截可设置区域编码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeGeoAreasResponse> DescribeGeoAreas(DescribeGeoAreasRequest request) {
            return await new DescribeGeoAreasExecutor().Client(this).Execute<DescribeGeoAreasResponse, DescribeGeoAreasResult, DescribeGeoAreasRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  网站类规则开启 CC
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableWebRuleCCResponse EnableWebRuleCC(EnableWebRuleCCRequest request) {
            return  new EnableWebRuleCCExecutor().Client(this).Execute<EnableWebRuleCCResponse, EnableWebRuleCCResult, EnableWebRuleCCRequest>(request);
        }
#else
        /// <summary>
        ///  网站类规则开启 CC
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableWebRuleCCResponse> EnableWebRuleCC(EnableWebRuleCCRequest request) {
            return await new EnableWebRuleCCExecutor().Client(this).Execute<EnableWebRuleCCResponse, EnableWebRuleCCResult, EnableWebRuleCCRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询 CC 自定义默认阈值
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCCDefaultThresholdsResponse DescribeCCDefaultThresholds(DescribeCCDefaultThresholdsRequest request) {
            return  new DescribeCCDefaultThresholdsExecutor().Client(this).Execute<DescribeCCDefaultThresholdsResponse, DescribeCCDefaultThresholdsResult, DescribeCCDefaultThresholdsRequest>(request);
        }
#else
        /// <summary>
        ///  查询 CC 自定义默认阈值
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCCDefaultThresholdsResponse> DescribeCCDefaultThresholds(DescribeCCDefaultThresholdsRequest request) {
            return await new DescribeCCDefaultThresholdsExecutor().Client(this).Execute<DescribeCCDefaultThresholdsResponse, DescribeCCDefaultThresholdsResult, DescribeCCDefaultThresholdsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询 CC 攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCCAttackLogsResponse DescribeCCAttackLogs(DescribeCCAttackLogsRequest request) {
            return  new DescribeCCAttackLogsExecutor().Client(this).Execute<DescribeCCAttackLogsResponse, DescribeCCAttackLogsResult, DescribeCCAttackLogsRequest>(request);
        }
#else
        /// <summary>
        ///  查询 CC 攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCCAttackLogsResponse> DescribeCCAttackLogs(DescribeCCAttackLogsRequest request) {
            return await new DescribeCCAttackLogsExecutor().Client(this).Execute<DescribeCCAttackLogsResponse, DescribeCCAttackLogsResult, DescribeCCAttackLogsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置实例 CC 防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyInstanceCCResponse ModifyInstanceCC(ModifyInstanceCCRequest request) {
            return  new ModifyInstanceCCExecutor().Client(this).Execute<ModifyInstanceCCResponse, ModifyInstanceCCResult, ModifyInstanceCCRequest>(request);
        }
#else
        /// <summary>
        ///  设置实例 CC 防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyInstanceCCResponse> ModifyInstanceCC(ModifyInstanceCCRequest request) {
            return await new ModifyInstanceCCExecutor().Client(this).Execute<ModifyInstanceCCResponse, ModifyInstanceCCResult, ModifyInstanceCCRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  转发流量报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeFwdGraphResponse DescribeFwdGraph(DescribeFwdGraphRequest request) {
            return  new DescribeFwdGraphExecutor().Client(this).Execute<DescribeFwdGraphResponse, DescribeFwdGraphResult, DescribeFwdGraphRequest>(request);
        }
#else
        /// <summary>
        ///  转发流量报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeFwdGraphResponse> DescribeFwdGraph(DescribeFwdGraphRequest request) {
            return await new DescribeFwdGraphExecutor().Client(this).Execute<DescribeFwdGraphResponse, DescribeFwdGraphResult, DescribeFwdGraphRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  更新非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyForwardRuleResponse ModifyForwardRule(ModifyForwardRuleRequest request) {
            return  new ModifyForwardRuleExecutor().Client(this).Execute<ModifyForwardRuleResponse, ModifyForwardRuleResult, ModifyForwardRuleRequest>(request);
        }
#else
        /// <summary>
        ///  更新非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyForwardRuleResponse> ModifyForwardRule(ModifyForwardRuleRequest request) {
            return await new ModifyForwardRuleExecutor().Client(this).Execute<ModifyForwardRuleResponse, ModifyForwardRuleResult, ModifyForwardRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询高防实例名称列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeNameListResponse DescribeNameList(DescribeNameListRequest request) {
            return  new DescribeNameListExecutor().Client(this).Execute<DescribeNameListResponse, DescribeNameListResult, DescribeNameListRequest>(request);
        }
#else
        /// <summary>
        ///  查询高防实例名称列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeNameListResponse> DescribeNameList(DescribeNameListRequest request) {
            return await new DescribeNameListExecutor().Client(this).Execute<DescribeNameListResponse, DescribeNameListResult, DescribeNameListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询某个实例下的非网站转发配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeForwardRulesResponse DescribeForwardRules(DescribeForwardRulesRequest request) {
            return  new DescribeForwardRulesExecutor().Client(this).Execute<DescribeForwardRulesResponse, DescribeForwardRulesResult, DescribeForwardRulesRequest>(request);
        }
#else
        /// <summary>
        ///  查询某个实例下的非网站转发配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeForwardRulesResponse> DescribeForwardRules(DescribeForwardRulesRequest request) {
            return await new DescribeForwardRulesExecutor().Client(this).Execute<DescribeForwardRulesResponse, DescribeForwardRulesResult, DescribeForwardRulesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询某个实例下的网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeWebRulesResponse DescribeWebRules(DescribeWebRulesRequest request) {
            return  new DescribeWebRulesExecutor().Client(this).Execute<DescribeWebRulesResponse, DescribeWebRulesResult, DescribeWebRulesRequest>(request);
        }
#else
        /// <summary>
        ///  查询某个实例下的网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeWebRulesResponse> DescribeWebRules(DescribeWebRulesRequest request) {
            return await new DescribeWebRulesExecutor().Client(this).Execute<DescribeWebRulesResponse, DescribeWebRulesResult, DescribeWebRulesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  关闭 CC 防护每 IP 的限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableCCIpLimitResponse DisableCCIpLimit(DisableCCIpLimitRequest request) {
            return  new DisableCCIpLimitExecutor().Client(this).Execute<DisableCCIpLimitResponse, DisableCCIpLimitResult, DisableCCIpLimitRequest>(request);
        }
#else
        /// <summary>
        ///  关闭 CC 防护每 IP 的限速
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableCCIpLimitResponse> DisableCCIpLimit(DisableCCIpLimitRequest request) {
            return await new DisableCCIpLimitExecutor().Client(this).Execute<DisableCCIpLimitResponse, DisableCCIpLimitResult, DisableCCIpLimitRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  关闭实例 IP 黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableInstanceIpBlackListResponse DisableInstanceIpBlackList(DisableInstanceIpBlackListRequest request) {
            return  new DisableInstanceIpBlackListExecutor().Client(this).Execute<DisableInstanceIpBlackListResponse, DisableInstanceIpBlackListResult, DisableInstanceIpBlackListRequest>(request);
        }
#else
        /// <summary>
        ///  关闭实例 IP 黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableInstanceIpBlackListResponse> DisableInstanceIpBlackList(DisableInstanceIpBlackListRequest request) {
            return await new DisableInstanceIpBlackListExecutor().Client(this).Execute<DisableInstanceIpBlackListResponse, DisableInstanceIpBlackListResult, DisableInstanceIpBlackListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询高防实例防护统计信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeProtectionStatisticsResponse DescribeProtectionStatistics(DescribeProtectionStatisticsRequest request) {
            return  new DescribeProtectionStatisticsExecutor().Client(this).Execute<DescribeProtectionStatisticsResponse, DescribeProtectionStatisticsResult, DescribeProtectionStatisticsRequest>(request);
        }
#else
        /// <summary>
        ///  查询高防实例防护统计信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeProtectionStatisticsResponse> DescribeProtectionStatistics(DescribeProtectionStatisticsRequest request) {
            return await new DescribeProtectionStatisticsExecutor().Client(this).Execute<DescribeProtectionStatisticsResponse, DescribeProtectionStatisticsResult, DescribeProtectionStatisticsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  关闭实例 Url 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableInstanceUrlWhiteListResponse DisableInstanceUrlWhiteList(DisableInstanceUrlWhiteListRequest request) {
            return  new DisableInstanceUrlWhiteListExecutor().Client(this).Execute<DisableInstanceUrlWhiteListResponse, DisableInstanceUrlWhiteListResult, DisableInstanceUrlWhiteListRequest>(request);
        }
#else
        /// <summary>
        ///  关闭实例 Url 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableInstanceUrlWhiteListResponse> DisableInstanceUrlWhiteList(DisableInstanceUrlWhiteListRequest request) {
            return await new DisableInstanceUrlWhiteListExecutor().Client(this).Execute<DisableInstanceUrlWhiteListResponse, DisableInstanceUrlWhiteListResult, DisableInstanceUrlWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  编辑网站规则证书信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyCertInfoResponse ModifyCertInfo(ModifyCertInfoRequest request) {
            return  new ModifyCertInfoExecutor().Client(this).Execute<ModifyCertInfoResponse, ModifyCertInfoResult, ModifyCertInfoRequest>(request);
        }
#else
        /// <summary>
        ///  编辑网站规则证书信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyCertInfoResponse> ModifyCertInfo(ModifyCertInfoRequest request) {
            return await new ModifyCertInfoExecutor().Client(this).Execute<ModifyCertInfoResponse, ModifyCertInfoResult, ModifyCertInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置实例 Url 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyInstanceUrlWhiteListResponse ModifyInstanceUrlWhiteList(ModifyInstanceUrlWhiteListRequest request) {
            return  new ModifyInstanceUrlWhiteListExecutor().Client(this).Execute<ModifyInstanceUrlWhiteListResponse, ModifyInstanceUrlWhiteListResult, ModifyInstanceUrlWhiteListRequest>(request);
        }
#else
        /// <summary>
        ///  设置实例 Url 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyInstanceUrlWhiteListResponse> ModifyInstanceUrlWhiteList(ModifyInstanceUrlWhiteListRequest request) {
            return await new ModifyInstanceUrlWhiteListExecutor().Client(this).Execute<ModifyInstanceUrlWhiteListResponse, ModifyInstanceUrlWhiteListResult, ModifyInstanceUrlWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  更新告警配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyAlarmConfigResponse ModifyAlarmConfig(ModifyAlarmConfigRequest request) {
            return  new ModifyAlarmConfigExecutor().Client(this).Execute<ModifyAlarmConfigResponse, ModifyAlarmConfigResult, ModifyAlarmConfigRequest>(request);
        }
#else
        /// <summary>
        ///  更新告警配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyAlarmConfigResponse> ModifyAlarmConfig(ModifyAlarmConfigRequest request) {
            return await new ModifyAlarmConfigExecutor().Client(this).Execute<ModifyAlarmConfigResponse, ModifyAlarmConfigResult, ModifyAlarmConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置实例 IP 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyInstanceIpWhiteListResponse ModifyInstanceIpWhiteList(ModifyInstanceIpWhiteListRequest request) {
            return  new ModifyInstanceIpWhiteListExecutor().Client(this).Execute<ModifyInstanceIpWhiteListResponse, ModifyInstanceIpWhiteListResult, ModifyInstanceIpWhiteListRequest>(request);
        }
#else
        /// <summary>
        ///  设置实例 IP 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyInstanceIpWhiteListResponse> ModifyInstanceIpWhiteList(ModifyInstanceIpWhiteListRequest request) {
            return await new ModifyInstanceIpWhiteListExecutor().Client(this).Execute<ModifyInstanceIpWhiteListResponse, ModifyInstanceIpWhiteListResult, ModifyInstanceIpWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询证书预览信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCertInfoResponse DescribeCertInfo(DescribeCertInfoRequest request) {
            return  new DescribeCertInfoExecutor().Client(this).Execute<DescribeCertInfoResponse, DescribeCertInfoResult, DescribeCertInfoRequest>(request);
        }
#else
        /// <summary>
        ///  查询证书预览信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCertInfoResponse> DescribeCertInfo(DescribeCertInfoRequest request) {
            return await new DescribeCertInfoExecutor().Client(this).Execute<DescribeCertInfoResponse, DescribeCertInfoResult, DescribeCertInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  非网站类规则切换成防御状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SwitchForwardRuleProtectResponse SwitchForwardRuleProtect(SwitchForwardRuleProtectRequest request) {
            return  new SwitchForwardRuleProtectExecutor().Client(this).Execute<SwitchForwardRuleProtectResponse, SwitchForwardRuleProtectResult, SwitchForwardRuleProtectRequest>(request);
        }
#else
        /// <summary>
        ///  非网站类规则切换成防御状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SwitchForwardRuleProtectResponse> SwitchForwardRuleProtect(SwitchForwardRuleProtectRequest request) {
            return await new SwitchForwardRuleProtectExecutor().Client(this).Execute<SwitchForwardRuleProtectResponse, SwitchForwardRuleProtectResult, SwitchForwardRuleProtectRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  下载 DDos 攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DownloadDDoSAttackLogsResponse DownloadDDoSAttackLogs(DownloadDDoSAttackLogsRequest request) {
            return  new DownloadDDoSAttackLogsExecutor().Client(this).Execute<DownloadDDoSAttackLogsResponse, DownloadDDoSAttackLogsResult, DownloadDDoSAttackLogsRequest>(request);
        }
#else
        /// <summary>
        ///  下载 DDos 攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DownloadDDoSAttackLogsResponse> DownloadDDoSAttackLogs(DownloadDDoSAttackLogsRequest request) {
            return await new DownloadDDoSAttackLogsExecutor().Client(this).Execute<DownloadDDoSAttackLogsResponse, DownloadDDoSAttackLogsResult, DownloadDDoSAttackLogsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  开启实例 Url 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableInstanceUrlWhiteListResponse EnableInstanceUrlWhiteList(EnableInstanceUrlWhiteListRequest request) {
            return  new EnableInstanceUrlWhiteListExecutor().Client(this).Execute<EnableInstanceUrlWhiteListResponse, EnableInstanceUrlWhiteListResult, EnableInstanceUrlWhiteListRequest>(request);
        }
#else
        /// <summary>
        ///  开启实例 Url 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableInstanceUrlWhiteListResponse> EnableInstanceUrlWhiteList(EnableInstanceUrlWhiteListRequest request) {
            return await new EnableInstanceUrlWhiteListExecutor().Client(this).Execute<EnableInstanceUrlWhiteListResponse, EnableInstanceUrlWhiteListResult, EnableInstanceUrlWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  关闭实例 CC 防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableInstanceCCResponse DisableInstanceCC(DisableInstanceCCRequest request) {
            return  new DisableInstanceCCExecutor().Client(this).Execute<DisableInstanceCCResponse, DisableInstanceCCResult, DisableInstanceCCRequest>(request);
        }
#else
        /// <summary>
        ///  关闭实例 CC 防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableInstanceCCResponse> DisableInstanceCC(DisableInstanceCCRequest request) {
            return await new DisableInstanceCCExecutor().Client(this).Execute<DisableInstanceCCResponse, DisableInstanceCCResult, DisableInstanceCCRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  网站类规则切换成回源状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SwitchWebRuleOriginResponse SwitchWebRuleOrigin(SwitchWebRuleOriginRequest request) {
            return  new SwitchWebRuleOriginExecutor().Client(this).Execute<SwitchWebRuleOriginResponse, SwitchWebRuleOriginResult, SwitchWebRuleOriginRequest>(request);
        }
#else
        /// <summary>
        ///  网站类规则切换成回源状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SwitchWebRuleOriginResponse> SwitchWebRuleOrigin(SwitchWebRuleOriginRequest request) {
            return await new SwitchWebRuleOriginExecutor().Client(this).Execute<SwitchWebRuleOriginResponse, SwitchWebRuleOriginResult, SwitchWebRuleOriginRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  下载 CC 攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DownloadCCAttackLogsResponse DownloadCCAttackLogs(DownloadCCAttackLogsRequest request) {
            return  new DownloadCCAttackLogsExecutor().Client(this).Execute<DownloadCCAttackLogsResponse, DownloadCCAttackLogsResult, DownloadCCAttackLogsRequest>(request);
        }
#else
        /// <summary>
        ///  下载 CC 攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DownloadCCAttackLogsResponse> DownloadCCAttackLogs(DownloadCCAttackLogsRequest request) {
            return await new DownloadCCAttackLogsExecutor().Client(this).Execute<DownloadCCAttackLogsResponse, DownloadCCAttackLogsResult, DownloadCCAttackLogsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询攻击次数及流量峰值
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAttackStatisticsResponse DescribeAttackStatistics(DescribeAttackStatisticsRequest request) {
            return  new DescribeAttackStatisticsExecutor().Client(this).Execute<DescribeAttackStatisticsResponse, DescribeAttackStatisticsResult, DescribeAttackStatisticsRequest>(request);
        }
#else
        /// <summary>
        ///  查询攻击次数及流量峰值
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAttackStatisticsResponse> DescribeAttackStatistics(DescribeAttackStatisticsRequest request) {
            return await new DescribeAttackStatisticsExecutor().Client(this).Execute<DescribeAttackStatisticsResponse, DescribeAttackStatisticsResult, DescribeAttackStatisticsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询 DDos 攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeDDoSAttackLogsResponse DescribeDDoSAttackLogs(DescribeDDoSAttackLogsRequest request) {
            return  new DescribeDDoSAttackLogsExecutor().Client(this).Execute<DescribeDDoSAttackLogsResponse, DescribeDDoSAttackLogsResult, DescribeDDoSAttackLogsRequest>(request);
        }
#else
        /// <summary>
        ///  查询 DDos 攻击日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeDDoSAttackLogsResponse> DescribeDDoSAttackLogs(DescribeDDoSAttackLogsRequest request) {
            return await new DescribeDDoSAttackLogsExecutor().Client(this).Execute<DescribeDDoSAttackLogsResponse, DescribeDDoSAttackLogsResult, DescribeDDoSAttackLogsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  开启实例 CC 防护的观察者模式
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableCCObserverModeResponse EnableCCObserverMode(EnableCCObserverModeRequest request) {
            return  new EnableCCObserverModeExecutor().Client(this).Execute<EnableCCObserverModeResponse, EnableCCObserverModeResult, EnableCCObserverModeRequest>(request);
        }
#else
        /// <summary>
        ///  开启实例 CC 防护的观察者模式
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableCCObserverModeResponse> EnableCCObserverMode(EnableCCObserverModeRequest request) {
            return await new EnableCCObserverModeExecutor().Client(this).Execute<EnableCCObserverModeResponse, EnableCCObserverModeResult, EnableCCObserverModeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  开启实例 IP 黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableInstanceIpBlackListResponse EnableInstanceIpBlackList(EnableInstanceIpBlackListRequest request) {
            return  new EnableInstanceIpBlackListExecutor().Client(this).Execute<EnableInstanceIpBlackListResponse, EnableInstanceIpBlackListResult, EnableInstanceIpBlackListRequest>(request);
        }
#else
        /// <summary>
        ///  开启实例 IP 黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableInstanceIpBlackListResponse> EnableInstanceIpBlackList(EnableInstanceIpBlackListRequest request) {
            return await new EnableInstanceIpBlackListExecutor().Client(this).Execute<EnableInstanceIpBlackListResponse, EnableInstanceIpBlackListResult, EnableInstanceIpBlackListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateWebRuleResponse CreateWebRule(CreateWebRuleRequest request) {
            return  new CreateWebRuleExecutor().Client(this).Execute<CreateWebRuleResponse, CreateWebRuleResult, CreateWebRuleRequest>(request);
        }
#else
        /// <summary>
        ///  添加网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateWebRuleResponse> CreateWebRule(CreateWebRuleRequest request) {
            return await new CreateWebRuleExecutor().Client(this).Execute<CreateWebRuleResponse, CreateWebRuleResult, CreateWebRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  关闭实例 IP 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableInstanceIpWhiteListResponse DisableInstanceIpWhiteList(DisableInstanceIpWhiteListRequest request) {
            return  new DisableInstanceIpWhiteListExecutor().Client(this).Execute<DisableInstanceIpWhiteListResponse, DisableInstanceIpWhiteListResult, DisableInstanceIpWhiteListRequest>(request);
        }
#else
        /// <summary>
        ///  关闭实例 IP 白名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableInstanceIpWhiteListResponse> DisableInstanceIpWhiteList(DisableInstanceIpWhiteListRequest request) {
            return await new DisableInstanceIpWhiteListExecutor().Client(this).Execute<DisableInstanceIpWhiteListResponse, DisableInstanceIpWhiteListResult, DisableInstanceIpWhiteListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  网站类规则禁用 CC
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableWebRuleCCResponse DisableWebRuleCC(DisableWebRuleCCRequest request) {
            return  new DisableWebRuleCCExecutor().Client(this).Execute<DisableWebRuleCCResponse, DisableWebRuleCCResult, DisableWebRuleCCRequest>(request);
        }
#else
        /// <summary>
        ///  网站类规则禁用 CC
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableWebRuleCCResponse> DisableWebRuleCC(DisableWebRuleCCRequest request) {
            return await new DisableWebRuleCCExecutor().Client(this).Execute<DisableWebRuleCCResponse, DisableWebRuleCCResult, DisableWebRuleCCRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  检测实例名称是否合法
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CheckNameResponse CheckName(CheckNameRequest request) {
            return  new CheckNameExecutor().Client(this).Execute<CheckNameResponse, CheckNameResult, CheckNameRequest>(request);
        }
#else
        /// <summary>
        ///  检测实例名称是否合法
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CheckNameResponse> CheckName(CheckNameRequest request) {
            return await new CheckNameExecutor().Client(this).Execute<CheckNameResponse, CheckNameResult, CheckNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  DDos 防护流量报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeDDoSGraphResponse DescribeDDoSGraph(DescribeDDoSGraphRequest request) {
            return  new DescribeDDoSGraphExecutor().Client(this).Execute<DescribeDDoSGraphResponse, DescribeDDoSGraphResult, DescribeDDoSGraphRequest>(request);
        }
#else
        /// <summary>
        ///  DDos 防护流量报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeDDoSGraphResponse> DescribeDDoSGraph(DescribeDDoSGraphRequest request) {
            return await new DescribeDDoSGraphExecutor().Client(this).Execute<DescribeDDoSGraphResponse, DescribeDDoSGraphResult, DescribeDDoSGraphRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  开启实例 CC 防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableInstanceCCResponse EnableInstanceCC(EnableInstanceCCRequest request) {
            return  new EnableInstanceCCExecutor().Client(this).Execute<EnableInstanceCCResponse, EnableInstanceCCResult, EnableInstanceCCRequest>(request);
        }
#else
        /// <summary>
        ///  开启实例 CC 防护
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableInstanceCCResponse> EnableInstanceCC(EnableInstanceCCRequest request) {
            return await new EnableInstanceCCExecutor().Client(this).Execute<EnableInstanceCCResponse, EnableInstanceCCResult, EnableInstanceCCRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateForwardRuleResponse CreateForwardRule(CreateForwardRuleRequest request) {
            return  new CreateForwardRuleExecutor().Client(this).Execute<CreateForwardRuleResponse, CreateForwardRuleResult, CreateForwardRuleRequest>(request);
        }
#else
        /// <summary>
        ///  添加非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateForwardRuleResponse> CreateForwardRule(CreateForwardRuleRequest request) {
            return await new CreateForwardRuleExecutor().Client(this).Execute<CreateForwardRuleResponse, CreateForwardRuleResult, CreateForwardRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询用户的京东云 IP 资源
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeVpcIpListResponse DescribeVpcIpList(DescribeVpcIpListRequest request) {
            return  new DescribeVpcIpListExecutor().Client(this).Execute<DescribeVpcIpListResponse, DescribeVpcIpListResult, DescribeVpcIpListRequest>(request);
        }
#else
        /// <summary>
        ///  查询用户的京东云 IP 资源
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeVpcIpListResponse> DescribeVpcIpList(DescribeVpcIpListRequest request) {
            return await new DescribeVpcIpListExecutor().Client(this).Execute<DescribeVpcIpListResponse, DescribeVpcIpListResult, DescribeVpcIpListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeWebRuleResponse DescribeWebRule(DescribeWebRuleRequest request) {
            return  new DescribeWebRuleExecutor().Client(this).Execute<DescribeWebRuleResponse, DescribeWebRuleResult, DescribeWebRuleRequest>(request);
        }
#else
        /// <summary>
        ///  查询网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeWebRuleResponse> DescribeWebRule(DescribeWebRuleRequest request) {
            return await new DescribeWebRuleExecutor().Client(this).Execute<DescribeWebRuleResponse, DescribeWebRuleResult, DescribeWebRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  修改非网站类转发规则的防护规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyProtectionRuleOfForwardRuleResponse ModifyProtectionRuleOfForwardRule(ModifyProtectionRuleOfForwardRuleRequest request) {
            return  new ModifyProtectionRuleOfForwardRuleExecutor().Client(this).Execute<ModifyProtectionRuleOfForwardRuleResponse, ModifyProtectionRuleOfForwardRuleResult, ModifyProtectionRuleOfForwardRuleRequest>(request);
        }
#else
        /// <summary>
        ///  修改非网站类转发规则的防护规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyProtectionRuleOfForwardRuleResponse> ModifyProtectionRuleOfForwardRule(ModifyProtectionRuleOfForwardRuleRequest request) {
            return await new ModifyProtectionRuleOfForwardRuleExecutor().Client(this).Execute<ModifyProtectionRuleOfForwardRuleResponse, ModifyProtectionRuleOfForwardRuleResult, ModifyProtectionRuleOfForwardRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  下载 CC 攻击日志详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DownloadCCAttackLogDetailsResponse DownloadCCAttackLogDetails(DownloadCCAttackLogDetailsRequest request) {
            return  new DownloadCCAttackLogDetailsExecutor().Client(this).Execute<DownloadCCAttackLogDetailsResponse, DownloadCCAttackLogDetailsResult, DownloadCCAttackLogDetailsRequest>(request);
        }
#else
        /// <summary>
        ///  下载 CC 攻击日志详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DownloadCCAttackLogDetailsResponse> DownloadCCAttackLogDetails(DownloadCCAttackLogDetailsRequest request) {
            return await new DownloadCCAttackLogDetailsExecutor().Client(this).Execute<DownloadCCAttackLogDetailsResponse, DownloadCCAttackLogDetailsResult, DownloadCCAttackLogDetailsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除网站规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteWebRuleResponse DeleteWebRule(DeleteWebRuleRequest request) {
            return  new DeleteWebRuleExecutor().Client(this).Execute<DeleteWebRuleResponse, DeleteWebRuleResult, DeleteWebRuleRequest>(request);
        }
#else
        /// <summary>
        ///  删除网站规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteWebRuleResponse> DeleteWebRule(DeleteWebRuleRequest request) {
            return await new DeleteWebRuleExecutor().Client(this).Execute<DeleteWebRuleResponse, DeleteWebRuleResult, DeleteWebRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  修改实例名称
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyInstanceNameResponse ModifyInstanceName(ModifyInstanceNameRequest request) {
            return  new ModifyInstanceNameExecutor().Client(this).Execute<ModifyInstanceNameResponse, ModifyInstanceNameResult, ModifyInstanceNameRequest>(request);
        }
#else
        /// <summary>
        ///  修改实例名称
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyInstanceNameResponse> ModifyInstanceName(ModifyInstanceNameRequest request) {
            return await new ModifyInstanceNameExecutor().Client(this).Execute<ModifyInstanceNameResponse, ModifyInstanceNameResult, ModifyInstanceNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeForwardRuleResponse DescribeForwardRule(DescribeForwardRuleRequest request) {
            return  new DescribeForwardRuleExecutor().Client(this).Execute<DescribeForwardRuleResponse, DescribeForwardRuleResult, DescribeForwardRuleRequest>(request);
        }
#else
        /// <summary>
        ///  查询非网站类规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeForwardRuleResponse> DescribeForwardRule(DescribeForwardRuleRequest request) {
            return await new DescribeForwardRuleExecutor().Client(this).Execute<DescribeForwardRuleResponse, DescribeForwardRuleResult, DescribeForwardRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  CC 防护流量报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCCGraphResponse DescribeCCGraph(DescribeCCGraphRequest request) {
            return  new DescribeCCGraphExecutor().Client(this).Execute<DescribeCCGraphResponse, DescribeCCGraphResult, DescribeCCGraphRequest>(request);
        }
#else
        /// <summary>
        ///  CC 防护流量报表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCCGraphResponse> DescribeCCGraph(DescribeCCGraphRequest request) {
            return await new DescribeCCGraphExecutor().Client(this).Execute<DescribeCCGraphResponse, DescribeCCGraphResult, DescribeCCGraphRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInstanceResponse DescribeInstance(DescribeInstanceRequest request) {
            return  new DescribeInstanceExecutor().Client(this).Execute<DescribeInstanceResponse, DescribeInstanceResult, DescribeInstanceRequest>(request);
        }
#else
        /// <summary>
        ///  查询实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInstanceResponse> DescribeInstance(DescribeInstanceRequest request) {
            return await new DescribeInstanceExecutor().Client(this).Execute<DescribeInstanceResponse, DescribeInstanceResult, DescribeInstanceRequest>(request);
        }
#endif

            /// <summary>
            ///  默认IpantiClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>ipantiClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>ipantiClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>ipantiClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造IpantiClient 对象
                ///</summary>
                IpantiClient Build();
            }

            /// <summary>
            ///  默认IpantiClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                ///  IpantiClient service client
                /// </summary>
                private  IpantiClient ipantiClient;

                /// <summary>
                ///  默认IpantiClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    ipantiClient = new IpantiClient();
                }

                /// <summary>
                ///  构造IpantiClient 对象
                ///</summary>
                public IpantiClient Build()
                {
                    if (ipantiClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        ipantiClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (ipantiClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("IpantiClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (ipantiClient.HttpRequestConfig == null)
                    {
                        ipantiClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (ipantiClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("IpantiClient build error: http request config not set");
                        }
                    }
                    return ipantiClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>ipantiClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    ipantiClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>ipantiClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    ipantiClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>ipantiClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    ipantiClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
