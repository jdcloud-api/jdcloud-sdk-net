/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 区块链数据服务BDS
 * 提供各种公链数据的分析服务。
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Bds.Apis;
using JDCloudSDK.Bds.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Bds.Client
{
    /// <summary>
    /// 区块链数据服务BDS
    /// 提供各种公链数据的分析服务。
    /// Bds Api 客户端
    ///</summary>
    public class BdsClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private BdsClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public BdsClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public BdsClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public BdsClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "bds.jdcloud-api.com";
        private const string serviceName = "bds";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 删除任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteTaskResponse DeleteTask(DeleteTaskRequest request) {
            return  new DeleteTaskExecutor().Client(this).Execute<DeleteTaskResponse, DeleteTaskResult, DeleteTaskRequest>(request);
        }
#else
        /// <summary>
        /// 删除任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteTaskResponse> DeleteTask(DeleteTaskRequest request) {
            return await new DeleteTaskExecutor().Client(this).Execute<DeleteTaskResponse, DeleteTaskResult, DeleteTaskRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查看配额列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeQuotasResponse DescribeQuotas(DescribeQuotasRequest request) {
            return  new DescribeQuotasExecutor().Client(this).Execute<DescribeQuotasResponse, DescribeQuotasResult, DescribeQuotasRequest>(request);
        }
#else
        /// <summary>
        /// 查看配额列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeQuotasResponse> DescribeQuotas(DescribeQuotasRequest request) {
            return await new DescribeQuotasExecutor().Client(this).Execute<DescribeQuotasResponse, DescribeQuotasResult, DescribeQuotasRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateInstanceResponse CreateInstance(CreateInstanceRequest request) {
            return  new CreateInstanceExecutor().Client(this).Execute<CreateInstanceResponse, CreateInstanceResult, CreateInstanceRequest>(request);
        }
#else
        /// <summary>
        /// 创建实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateInstanceResponse> CreateInstance(CreateInstanceRequest request) {
            return await new CreateInstanceExecutor().Client(this).Execute<CreateInstanceResponse, CreateInstanceResult, CreateInstanceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateTaskResponse CreateTask(CreateTaskRequest request) {
            return  new CreateTaskExecutor().Client(this).Execute<CreateTaskResponse, CreateTaskResult, CreateTaskRequest>(request);
        }
#else
        /// <summary>
        /// 创建任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateTaskResponse> CreateTask(CreateTaskRequest request) {
            return await new CreateTaskExecutor().Client(this).Execute<CreateTaskResponse, CreateTaskResult, CreateTaskRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteInstanceResponse DeleteInstance(DeleteInstanceRequest request) {
            return  new DeleteInstanceExecutor().Client(this).Execute<DeleteInstanceResponse, DeleteInstanceResult, DeleteInstanceRequest>(request);
        }
#else
        /// <summary>
        /// 删除实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteInstanceResponse> DeleteInstance(DeleteInstanceRequest request) {
            return await new DeleteInstanceExecutor().Client(this).Execute<DeleteInstanceResponse, DeleteInstanceResult, DeleteInstanceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查看用户列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeUsersResponse DescribeUsers(DescribeUsersRequest request) {
            return  new DescribeUsersExecutor().Client(this).Execute<DescribeUsersResponse, DescribeUsersResult, DescribeUsersRequest>(request);
        }
#else
        /// <summary>
        /// 查看用户列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeUsersResponse> DescribeUsers(DescribeUsersRequest request) {
            return await new DescribeUsersExecutor().Client(this).Execute<DescribeUsersResponse, DescribeUsersResult, DescribeUsersRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询实例列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInstancesResponse DescribeInstances(DescribeInstancesRequest request) {
            return  new DescribeInstancesExecutor().Client(this).Execute<DescribeInstancesResponse, DescribeInstancesResult, DescribeInstancesRequest>(request);
        }
#else
        /// <summary>
        /// 查询实例列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInstancesResponse> DescribeInstances(DescribeInstancesRequest request) {
            return await new DescribeInstancesExecutor().Client(this).Execute<DescribeInstancesResponse, DescribeInstancesResult, DescribeInstancesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询实例详细信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInstanceResponse DescribeInstance(DescribeInstanceRequest request) {
            return  new DescribeInstanceExecutor().Client(this).Execute<DescribeInstanceResponse, DescribeInstanceResult, DescribeInstanceRequest>(request);
        }
#else
        /// <summary>
        /// 查询实例详细信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInstanceResponse> DescribeInstance(DescribeInstanceRequest request) {
            return await new DescribeInstanceExecutor().Client(this).Execute<DescribeInstanceResponse, DescribeInstanceResult, DescribeInstanceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除数据库
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteDatabaseResponse DeleteDatabase(DeleteDatabaseRequest request) {
            return  new DeleteDatabaseExecutor().Client(this).Execute<DeleteDatabaseResponse, DeleteDatabaseResult, DeleteDatabaseRequest>(request);
        }
#else
        /// <summary>
        /// 删除数据库
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteDatabaseResponse> DeleteDatabase(DeleteDatabaseRequest request) {
            return await new DeleteDatabaseExecutor().Client(this).Execute<DeleteDatabaseResponse, DeleteDatabaseResult, DeleteDatabaseRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查看数据库列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeDatabasesResponse DescribeDatabases(DescribeDatabasesRequest request) {
            return  new DescribeDatabasesExecutor().Client(this).Execute<DescribeDatabasesResponse, DescribeDatabasesResult, DescribeDatabasesRequest>(request);
        }
#else
        /// <summary>
        /// 查看数据库列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeDatabasesResponse> DescribeDatabases(DescribeDatabasesRequest request) {
            return await new DescribeDatabasesExecutor().Client(this).Execute<DescribeDatabasesResponse, DescribeDatabasesResult, DescribeDatabasesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查看任务列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeTasksResponse DescribeTasks(DescribeTasksRequest request) {
            return  new DescribeTasksExecutor().Client(this).Execute<DescribeTasksResponse, DescribeTasksResult, DescribeTasksRequest>(request);
        }
#else
        /// <summary>
        /// 查看任务列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeTasksResponse> DescribeTasks(DescribeTasksRequest request) {
            return await new DescribeTasksExecutor().Client(this).Execute<DescribeTasksResponse, DescribeTasksResult, DescribeTasksRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateInstanceResponse UpdateInstance(UpdateInstanceRequest request) {
            return  new UpdateInstanceExecutor().Client(this).Execute<UpdateInstanceResponse, UpdateInstanceResult, UpdateInstanceRequest>(request);
        }
#else
        /// <summary>
        /// 更新实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateInstanceResponse> UpdateInstance(UpdateInstanceRequest request) {
            return await new UpdateInstanceExecutor().Client(this).Execute<UpdateInstanceResponse, UpdateInstanceResult, UpdateInstanceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建数据库
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateDatabaseResponse CreateDatabase(CreateDatabaseRequest request) {
            return  new CreateDatabaseExecutor().Client(this).Execute<CreateDatabaseResponse, CreateDatabaseResult, CreateDatabaseRequest>(request);
        }
#else
        /// <summary>
        /// 创建数据库
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateDatabaseResponse> CreateDatabase(CreateDatabaseRequest request) {
            return await new CreateDatabaseExecutor().Client(this).Execute<CreateDatabaseResponse, CreateDatabaseResult, CreateDatabaseRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新用户
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateUserResponse UpdateUser(UpdateUserRequest request) {
            return  new UpdateUserExecutor().Client(this).Execute<UpdateUserResponse, UpdateUserResult, UpdateUserRequest>(request);
        }
#else
        /// <summary>
        /// 更新用户
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateUserResponse> UpdateUser(UpdateUserRequest request) {
            return await new UpdateUserExecutor().Client(this).Execute<UpdateUserResponse, UpdateUserResult, UpdateUserRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除用户
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteUserResponse DeleteUser(DeleteUserRequest request) {
            return  new DeleteUserExecutor().Client(this).Execute<DeleteUserResponse, DeleteUserResult, DeleteUserRequest>(request);
        }
#else
        /// <summary>
        /// 删除用户
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteUserResponse> DeleteUser(DeleteUserRequest request) {
            return await new DeleteUserExecutor().Client(this).Execute<DeleteUserResponse, DeleteUserResult, DeleteUserRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建用户
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateUserResponse CreateUser(CreateUserRequest request) {
            return  new CreateUserExecutor().Client(this).Execute<CreateUserResponse, CreateUserResult, CreateUserRequest>(request);
        }
#else
        /// <summary>
        /// 创建用户
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateUserResponse> CreateUser(CreateUserRequest request) {
            return await new CreateUserExecutor().Client(this).Execute<CreateUserResponse, CreateUserResult, CreateUserRequest>(request);
        }
#endif

            /// <summary>
            ///  默认BdsClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>bdsClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>bdsClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>bdsClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造BdsClient 对象
                ///</summary>
                BdsClient Build();
            }

            /// <summary>
            ///  默认BdsClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// BdsClient service client
                /// </summary>
                private  BdsClient bdsClient;

                /// <summary>
                ///  默认BdsClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    bdsClient = new BdsClient();
                }

                /// <summary>
                ///  构造BdsClient 对象
                ///</summary>
                public BdsClient Build()
                {
                    if (bdsClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        bdsClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (bdsClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("BdsClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (bdsClient.HttpRequestConfig == null)
                    {
                        bdsClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (bdsClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("BdsClient build error: http request config not set");
                        }
                    }
                    return bdsClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>bdsClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    bdsClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>bdsClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    bdsClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>bdsClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    bdsClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
