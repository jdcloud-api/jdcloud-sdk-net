/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD UCAPI instance API
 * API related to UCAPI instances
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Ucapi.Apis;
using JDCloudSDK.Ucapi.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Ucapi.Client
{
    /// <summary>
    /// JDCLOUD UCAPI instance API
    /// API related to UCAPI instances
    /// Ucapi Api 客户端
    ///</summary>
    public class UcapiClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private UcapiClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public UcapiClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public UcapiClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public UcapiClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "ucapi.jdcloud-api.com";
        private const string serviceName = "ucapi";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 用户是否已经通过手机校验
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public IsVerifiedSmsResponse IsVerifiedSms(IsVerifiedSmsRequest request) {
            return  new IsVerifiedSmsExecutor().Client(this).Execute<IsVerifiedSmsResponse, IsVerifiedSmsResult, IsVerifiedSmsRequest>(request);
        }
#else
        /// <summary>
        /// 用户是否已经通过手机校验
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<IsVerifiedSmsResponse> IsVerifiedSms(IsVerifiedSmsRequest request) {
            return await new IsVerifiedSmsExecutor().Client(this).Execute<IsVerifiedSmsResponse, IsVerifiedSmsResult, IsVerifiedSmsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 编辑联系组名称
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EditContactGroupResponse EditContactGroup(EditContactGroupRequest request) {
            return  new EditContactGroupExecutor().Client(this).Execute<EditContactGroupResponse, EditContactGroupResult, EditContactGroupRequest>(request);
        }
#else
        /// <summary>
        /// 编辑联系组名称
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EditContactGroupResponse> EditContactGroup(EditContactGroupRequest request) {
            return await new EditContactGroupExecutor().Client(this).Execute<EditContactGroupResponse, EditContactGroupResult, EditContactGroupRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 发送邮箱验证码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SendEmailCodeResponse SendEmailCode(SendEmailCodeRequest request) {
            return  new SendEmailCodeExecutor().Client(this).Execute<SendEmailCodeResponse, SendEmailCodeResult, SendEmailCodeRequest>(request);
        }
#else
        /// <summary>
        /// 发送邮箱验证码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SendEmailCodeResponse> SendEmailCode(SendEmailCodeRequest request) {
            return await new SendEmailCodeExecutor().Client(this).Execute<SendEmailCodeResponse, SendEmailCodeResult, SendEmailCodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 发送线下汇款识别码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SendRemittanceCodeResponse SendRemittanceCode(SendRemittanceCodeRequest request) {
            return  new SendRemittanceCodeExecutor().Client(this).Execute<SendRemittanceCodeResponse, SendRemittanceCodeResult, SendRemittanceCodeRequest>(request);
        }
#else
        /// <summary>
        /// 发送线下汇款识别码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SendRemittanceCodeResponse> SendRemittanceCode(SendRemittanceCodeRequest request) {
            return await new SendRemittanceCodeExecutor().Client(this).Execute<SendRemittanceCodeResponse, SendRemittanceCodeResult, SendRemittanceCodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 取消发票
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CancelInvoiceResponse CancelInvoice(CancelInvoiceRequest request) {
            return  new CancelInvoiceExecutor().Client(this).Execute<CancelInvoiceResponse, CancelInvoiceResult, CancelInvoiceRequest>(request);
        }
#else
        /// <summary>
        /// 取消发票
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CancelInvoiceResponse> CancelInvoice(CancelInvoiceRequest request) {
            return await new CancelInvoiceExecutor().Client(this).Execute<CancelInvoiceResponse, CancelInvoiceResult, CancelInvoiceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取充值相关信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeRechargeInfoResponse DescribeRechargeInfo(DescribeRechargeInfoRequest request) {
            return  new DescribeRechargeInfoExecutor().Client(this).Execute<DescribeRechargeInfoResponse, DescribeRechargeInfoResult, DescribeRechargeInfoRequest>(request);
        }
#else
        /// <summary>
        /// 获取充值相关信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeRechargeInfoResponse> DescribeRechargeInfo(DescribeRechargeInfoRequest request) {
            return await new DescribeRechargeInfoExecutor().Client(this).Execute<DescribeRechargeInfoResponse, DescribeRechargeInfoResult, DescribeRechargeInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据用户pin和地域获取用户可用区
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeActivityRegionAzResponse DescribeActivityRegionAz(DescribeActivityRegionAzRequest request) {
            return  new DescribeActivityRegionAzExecutor().Client(this).Execute<DescribeActivityRegionAzResponse, DescribeActivityRegionAzResult, DescribeActivityRegionAzRequest>(request);
        }
#else
        /// <summary>
        /// 根据用户pin和地域获取用户可用区
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeActivityRegionAzResponse> DescribeActivityRegionAz(DescribeActivityRegionAzRequest request) {
            return await new DescribeActivityRegionAzExecutor().Client(this).Execute<DescribeActivityRegionAzResponse, DescribeActivityRegionAzResult, DescribeActivityRegionAzRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除accessKey
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteUserAccessKeyResponse DeleteUserAccessKey(DeleteUserAccessKeyRequest request) {
            return  new DeleteUserAccessKeyExecutor().Client(this).Execute<DeleteUserAccessKeyResponse, DeleteUserAccessKeyResult, DeleteUserAccessKeyRequest>(request);
        }
#else
        /// <summary>
        /// 删除accessKey
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteUserAccessKeyResponse> DeleteUserAccessKey(DeleteUserAccessKeyRequest request) {
            return await new DeleteUserAccessKeyExecutor().Client(this).Execute<DeleteUserAccessKeyResponse, DeleteUserAccessKeyResult, DeleteUserAccessKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新余额提醒状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateUserRemindStatusResponse UpdateUserRemindStatus(UpdateUserRemindStatusRequest request) {
            return  new UpdateUserRemindStatusExecutor().Client(this).Execute<UpdateUserRemindStatusResponse, UpdateUserRemindStatusResult, UpdateUserRemindStatusRequest>(request);
        }
#else
        /// <summary>
        /// 更新余额提醒状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateUserRemindStatusResponse> UpdateUserRemindStatus(UpdateUserRemindStatusRequest request) {
            return await new UpdateUserRemindStatusExecutor().Client(this).Execute<UpdateUserRemindStatusResponse, UpdateUserRemindStatusResult, UpdateUserRemindStatusRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 充值检查实名认证
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RechargeAuthCheckResponse RechargeAuthCheck(RechargeAuthCheckRequest request) {
            return  new RechargeAuthCheckExecutor().Client(this).Execute<RechargeAuthCheckResponse, RechargeAuthCheckResult, RechargeAuthCheckRequest>(request);
        }
#else
        /// <summary>
        /// 充值检查实名认证
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RechargeAuthCheckResponse> RechargeAuthCheck(RechargeAuthCheckRequest request) {
            return await new RechargeAuthCheckExecutor().Client(this).Execute<RechargeAuthCheckResponse, RechargeAuthCheckResult, RechargeAuthCheckRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询vpc列表信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeActivityVpcsResponse DescribeActivityVpcs(DescribeActivityVpcsRequest request) {
            return  new DescribeActivityVpcsExecutor().Client(this).Execute<DescribeActivityVpcsResponse, DescribeActivityVpcsResult, DescribeActivityVpcsRequest>(request);
        }
#else
        /// <summary>
        /// 查询vpc列表信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeActivityVpcsResponse> DescribeActivityVpcs(DescribeActivityVpcsRequest request) {
            return await new DescribeActivityVpcsExecutor().Client(this).Execute<DescribeActivityVpcsResponse, DescribeActivityVpcsResult, DescribeActivityVpcsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 绑定手机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public BindPhoneResponse BindPhone(BindPhoneRequest request) {
            return  new BindPhoneExecutor().Client(this).Execute<BindPhoneResponse, BindPhoneResult, BindPhoneRequest>(request);
        }
#else
        /// <summary>
        /// 绑定手机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<BindPhoneResponse> BindPhone(BindPhoneRequest request) {
            return await new BindPhoneExecutor().Client(this).Execute<BindPhoneResponse, BindPhoneResult, BindPhoneRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据镜像类型获取版本
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeActivityAvailableImagesResponse DescribeActivityAvailableImages(DescribeActivityAvailableImagesRequest request) {
            return  new DescribeActivityAvailableImagesExecutor().Client(this).Execute<DescribeActivityAvailableImagesResponse, DescribeActivityAvailableImagesResult, DescribeActivityAvailableImagesRequest>(request);
        }
#else
        /// <summary>
        /// 根据镜像类型获取版本
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeActivityAvailableImagesResponse> DescribeActivityAvailableImages(DescribeActivityAvailableImagesRequest request) {
            return await new DescribeActivityAvailableImagesExecutor().Client(this).Execute<DescribeActivityAvailableImagesResponse, DescribeActivityAvailableImagesResult, DescribeActivityAvailableImagesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取联系人信息列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeContactPersonsResponse DescribeContactPersons(DescribeContactPersonsRequest request) {
            return  new DescribeContactPersonsExecutor().Client(this).Execute<DescribeContactPersonsResponse, DescribeContactPersonsResult, DescribeContactPersonsRequest>(request);
        }
#else
        /// <summary>
        /// 获取联系人信息列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeContactPersonsResponse> DescribeContactPersons(DescribeContactPersonsRequest request) {
            return await new DescribeContactPersonsExecutor().Client(this).Execute<DescribeContactPersonsResponse, DescribeContactPersonsResult, DescribeContactPersonsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询用户学生认证状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryUserCampusStatusResponse QueryUserCampusStatus(QueryUserCampusStatusRequest request) {
            return  new QueryUserCampusStatusExecutor().Client(this).Execute<QueryUserCampusStatusResponse, QueryUserCampusStatusResult, QueryUserCampusStatusRequest>(request);
        }
#else
        /// <summary>
        /// 查询用户学生认证状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryUserCampusStatusResponse> QueryUserCampusStatus(QueryUserCampusStatusRequest request) {
            return await new QueryUserCampusStatusExecutor().Client(this).Execute<QueryUserCampusStatusResponse, QueryUserCampusStatusResult, QueryUserCampusStatusRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改邮箱第一步，验证身份
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public VerifyForEditEmailResponse VerifyForEditEmail(VerifyForEditEmailRequest request) {
            return  new VerifyForEditEmailExecutor().Client(this).Execute<VerifyForEditEmailResponse, VerifyForEditEmailResult, VerifyForEditEmailRequest>(request);
        }
#else
        /// <summary>
        /// 修改邮箱第一步，验证身份
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<VerifyForEditEmailResponse> VerifyForEditEmail(VerifyForEditEmailRequest request) {
            return await new VerifyForEditEmailExecutor().Client(this).Execute<VerifyForEditEmailResponse, VerifyForEditEmailResult, VerifyForEditEmailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建accessKey
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateUserAccessKeyResponse CreateUserAccessKey(CreateUserAccessKeyRequest request) {
            return  new CreateUserAccessKeyExecutor().Client(this).Execute<CreateUserAccessKeyResponse, CreateUserAccessKeyResult, CreateUserAccessKeyRequest>(request);
        }
#else
        /// <summary>
        /// 创建accessKey
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateUserAccessKeyResponse> CreateUserAccessKey(CreateUserAccessKeyRequest request) {
            return await new CreateUserAccessKeyExecutor().Client(this).Execute<CreateUserAccessKeyResponse, CreateUserAccessKeyResult, CreateUserAccessKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置消息通知方式
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateMessageSettingResponse UpdateMessageSetting(UpdateMessageSettingRequest request) {
            return  new UpdateMessageSettingExecutor().Client(this).Execute<UpdateMessageSettingResponse, UpdateMessageSettingResult, UpdateMessageSettingRequest>(request);
        }
#else
        /// <summary>
        /// 设置消息通知方式
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateMessageSettingResponse> UpdateMessageSetting(UpdateMessageSettingRequest request) {
            return await new UpdateMessageSettingExecutor().Client(this).Execute<UpdateMessageSettingResponse, UpdateMessageSettingResult, UpdateMessageSettingRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 发送手机验证码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SendSmsCodeResponse SendSmsCode(SendSmsCodeRequest request) {
            return  new SendSmsCodeExecutor().Client(this).Execute<SendSmsCodeResponse, SendSmsCodeResult, SendSmsCodeRequest>(request);
        }
#else
        /// <summary>
        /// 发送手机验证码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SendSmsCodeResponse> SendSmsCode(SendSmsCodeRequest request) {
            return await new SendSmsCodeExecutor().Client(this).Execute<SendSmsCodeResponse, SendSmsCodeResult, SendSmsCodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询商城用户的手机号
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryUserPhoneResponse QueryUserPhone(QueryUserPhoneRequest request) {
            return  new QueryUserPhoneExecutor().Client(this).Execute<QueryUserPhoneResponse, QueryUserPhoneResult, QueryUserPhoneRequest>(request);
        }
#else
        /// <summary>
        /// 查询商城用户的手机号
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryUserPhoneResponse> QueryUserPhone(QueryUserPhoneRequest request) {
            return await new QueryUserPhoneExecutor().Client(this).Execute<QueryUserPhoneResponse, QueryUserPhoneResult, QueryUserPhoneRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取敏感设置信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeSensitiveOpSettingResponse DescribeSensitiveOpSetting(DescribeSensitiveOpSettingRequest request) {
            return  new DescribeSensitiveOpSettingExecutor().Client(this).Execute<DescribeSensitiveOpSettingResponse, DescribeSensitiveOpSettingResult, DescribeSensitiveOpSettingRequest>(request);
        }
#else
        /// <summary>
        /// 获取敏感设置信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeSensitiveOpSettingResponse> DescribeSensitiveOpSetting(DescribeSensitiveOpSettingRequest request) {
            return await new DescribeSensitiveOpSettingExecutor().Client(this).Execute<DescribeSensitiveOpSettingResponse, DescribeSensitiveOpSettingResult, DescribeSensitiveOpSettingRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 启用accessKey
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnabledUserAccessKeyResponse EnabledUserAccessKey(EnabledUserAccessKeyRequest request) {
            return  new EnabledUserAccessKeyExecutor().Client(this).Execute<EnabledUserAccessKeyResponse, EnabledUserAccessKeyResult, EnabledUserAccessKeyRequest>(request);
        }
#else
        /// <summary>
        /// 启用accessKey
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnabledUserAccessKeyResponse> EnabledUserAccessKey(EnabledUserAccessKeyRequest request) {
            return await new EnabledUserAccessKeyExecutor().Client(this).Execute<EnabledUserAccessKeyResponse, EnabledUserAccessKeyResult, EnabledUserAccessKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取详细发票邮寄地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInvoicePostAddressDetailResponse DescribeInvoicePostAddressDetail(DescribeInvoicePostAddressDetailRequest request) {
            return  new DescribeInvoicePostAddressDetailExecutor().Client(this).Execute<DescribeInvoicePostAddressDetailResponse, DescribeInvoicePostAddressDetailResult, DescribeInvoicePostAddressDetailRequest>(request);
        }
#else
        /// <summary>
        /// 获取详细发票邮寄地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInvoicePostAddressDetailResponse> DescribeInvoicePostAddressDetail(DescribeInvoicePostAddressDetailRequest request) {
            return await new DescribeInvoicePostAddressDetailExecutor().Client(this).Execute<DescribeInvoicePostAddressDetailResponse, DescribeInvoicePostAddressDetailResult, DescribeInvoicePostAddressDetailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新余额预警阈值
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateUserRemindThresholdResponse UpdateUserRemindThreshold(UpdateUserRemindThresholdRequest request) {
            return  new UpdateUserRemindThresholdExecutor().Client(this).Execute<UpdateUserRemindThresholdResponse, UpdateUserRemindThresholdResult, UpdateUserRemindThresholdRequest>(request);
        }
#else
        /// <summary>
        /// 更新余额预警阈值
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateUserRemindThresholdResponse> UpdateUserRemindThreshold(UpdateUserRemindThresholdRequest request) {
            return await new UpdateUserRemindThresholdExecutor().Client(this).Execute<UpdateUserRemindThresholdResponse, UpdateUserRemindThresholdResult, UpdateUserRemindThresholdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取国际手机号规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAreaCodesResponse DescribeAreaCodes(DescribeAreaCodesRequest request) {
            return  new DescribeAreaCodesExecutor().Client(this).Execute<DescribeAreaCodesResponse, DescribeAreaCodesResult, DescribeAreaCodesRequest>(request);
        }
#else
        /// <summary>
        /// 获取国际手机号规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAreaCodesResponse> DescribeAreaCodes(DescribeAreaCodesRequest request) {
            return await new DescribeAreaCodesExecutor().Client(this).Execute<DescribeAreaCodesResponse, DescribeAreaCodesResult, DescribeAreaCodesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加联系组检查
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddContactGroupCheckResponse AddContactGroupCheck(AddContactGroupCheckRequest request) {
            return  new AddContactGroupCheckExecutor().Client(this).Execute<AddContactGroupCheckResponse, AddContactGroupCheckResult, AddContactGroupCheckRequest>(request);
        }
#else
        /// <summary>
        /// 添加联系组检查
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddContactGroupCheckResponse> AddContactGroupCheck(AddContactGroupCheckRequest request) {
            return await new AddContactGroupCheckExecutor().Client(this).Execute<AddContactGroupCheckResponse, AddContactGroupCheckResult, AddContactGroupCheckRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置默认的发票邮寄地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetDefaultPostAddressResponse SetDefaultPostAddress(SetDefaultPostAddressRequest request) {
            return  new SetDefaultPostAddressExecutor().Client(this).Execute<SetDefaultPostAddressResponse, SetDefaultPostAddressResult, SetDefaultPostAddressRequest>(request);
        }
#else
        /// <summary>
        /// 设置默认的发票邮寄地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetDefaultPostAddressResponse> SetDefaultPostAddress(SetDefaultPostAddressRequest request) {
            return await new SetDefaultPostAddressExecutor().Client(this).Execute<SetDefaultPostAddressResponse, SetDefaultPostAddressResult, SetDefaultPostAddressRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询活动价格信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeActivityPriceInfoResponse DescribeActivityPriceInfo(DescribeActivityPriceInfoRequest request) {
            return  new DescribeActivityPriceInfoExecutor().Client(this).Execute<DescribeActivityPriceInfoResponse, DescribeActivityPriceInfoResult, DescribeActivityPriceInfoRequest>(request);
        }
#else
        /// <summary>
        /// 查询活动价格信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeActivityPriceInfoResponse> DescribeActivityPriceInfo(DescribeActivityPriceInfoRequest request) {
            return await new DescribeActivityPriceInfoExecutor().Client(this).Execute<DescribeActivityPriceInfoResponse, DescribeActivityPriceInfoResult, DescribeActivityPriceInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询代金券使用详细信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCouponResponse DescribeCoupon(DescribeCouponRequest request) {
            return  new DescribeCouponExecutor().Client(this).Execute<DescribeCouponResponse, DescribeCouponResult, DescribeCouponRequest>(request);
        }
#else
        /// <summary>
        /// 查询代金券使用详细信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCouponResponse> DescribeCoupon(DescribeCouponRequest request) {
            return await new DescribeCouponExecutor().Client(this).Execute<DescribeCouponResponse, DescribeCouponResult, DescribeCouponRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 检查是否包含敏感词
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CheckSensetiveWordForUserNameResponse CheckSensetiveWordForUserName(CheckSensetiveWordForUserNameRequest request) {
            return  new CheckSensetiveWordForUserNameExecutor().Client(this).Execute<CheckSensetiveWordForUserNameResponse, CheckSensetiveWordForUserNameResult, CheckSensetiveWordForUserNameRequest>(request);
        }
#else
        /// <summary>
        /// 检查是否包含敏感词
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CheckSensetiveWordForUserNameResponse> CheckSensetiveWordForUserName(CheckSensetiveWordForUserNameRequest request) {
            return await new CheckSensetiveWordForUserNameExecutor().Client(this).Execute<CheckSensetiveWordForUserNameResponse, CheckSensetiveWordForUserNameResult, CheckSensetiveWordForUserNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取发票资质模板信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInvoiceMsgTemplateResponse DescribeInvoiceMsgTemplate(DescribeInvoiceMsgTemplateRequest request) {
            return  new DescribeInvoiceMsgTemplateExecutor().Client(this).Execute<DescribeInvoiceMsgTemplateResponse, DescribeInvoiceMsgTemplateResult, DescribeInvoiceMsgTemplateRequest>(request);
        }
#else
        /// <summary>
        /// 获取发票资质模板信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInvoiceMsgTemplateResponse> DescribeInvoiceMsgTemplate(DescribeInvoiceMsgTemplateRequest request) {
            return await new DescribeInvoiceMsgTemplateExecutor().Client(this).Execute<DescribeInvoiceMsgTemplateResponse, DescribeInvoiceMsgTemplateResult, DescribeInvoiceMsgTemplateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加联系人
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddContactPersonResponse AddContactPerson(AddContactPersonRequest request) {
            return  new AddContactPersonExecutor().Client(this).Execute<AddContactPersonResponse, AddContactPersonResult, AddContactPersonRequest>(request);
        }
#else
        /// <summary>
        /// 添加联系人
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddContactPersonResponse> AddContactPerson(AddContactPersonRequest request) {
            return await new AddContactPersonExecutor().Client(this).Execute<AddContactPersonResponse, AddContactPersonResult, AddContactPersonRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 绑定邮箱
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public BindEmailResponse BindEmail(BindEmailRequest request) {
            return  new BindEmailExecutor().Client(this).Execute<BindEmailResponse, BindEmailResult, BindEmailRequest>(request);
        }
#else
        /// <summary>
        /// 绑定邮箱
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<BindEmailResponse> BindEmail(BindEmailRequest request) {
            return await new BindEmailExecutor().Client(this).Execute<BindEmailResponse, BindEmailResult, BindEmailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询活动具体配置信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeActivityConfigInfoResponse DescribeActivityConfigInfo(DescribeActivityConfigInfoRequest request) {
            return  new DescribeActivityConfigInfoExecutor().Client(this).Execute<DescribeActivityConfigInfoResponse, DescribeActivityConfigInfoResult, DescribeActivityConfigInfoRequest>(request);
        }
#else
        /// <summary>
        /// 查询活动具体配置信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeActivityConfigInfoResponse> DescribeActivityConfigInfo(DescribeActivityConfigInfoRequest request) {
            return await new DescribeActivityConfigInfoExecutor().Client(this).Execute<DescribeActivityConfigInfoResponse, DescribeActivityConfigInfoResult, DescribeActivityConfigInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询子网列表信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeActivityVpcSubnetsResponse DescribeActivityVpcSubnets(DescribeActivityVpcSubnetsRequest request) {
            return  new DescribeActivityVpcSubnetsExecutor().Client(this).Execute<DescribeActivityVpcSubnetsResponse, DescribeActivityVpcSubnetsResult, DescribeActivityVpcSubnetsRequest>(request);
        }
#else
        /// <summary>
        /// 查询子网列表信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeActivityVpcSubnetsResponse> DescribeActivityVpcSubnets(DescribeActivityVpcSubnetsRequest request) {
            return await new DescribeActivityVpcSubnetsExecutor().Client(this).Execute<DescribeActivityVpcSubnetsResponse, DescribeActivityVpcSubnetsResult, DescribeActivityVpcSubnetsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置敏感操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateSensitiveOpSettingResponse CreateSensitiveOpSetting(CreateSensitiveOpSettingRequest request) {
            return  new CreateSensitiveOpSettingExecutor().Client(this).Execute<CreateSensitiveOpSettingResponse, CreateSensitiveOpSettingResult, CreateSensitiveOpSettingRequest>(request);
        }
#else
        /// <summary>
        /// 设置敏感操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateSensitiveOpSettingResponse> CreateSensitiveOpSetting(CreateSensitiveOpSettingRequest request) {
            return await new CreateSensitiveOpSettingExecutor().Client(this).Execute<CreateSensitiveOpSettingResponse, CreateSensitiveOpSettingResult, CreateSensitiveOpSettingRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加联系人检查
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddContactPersonCheckResponse AddContactPersonCheck(AddContactPersonCheckRequest request) {
            return  new AddContactPersonCheckExecutor().Client(this).Execute<AddContactPersonCheckResponse, AddContactPersonCheckResult, AddContactPersonCheckRequest>(request);
        }
#else
        /// <summary>
        /// 添加联系人检查
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddContactPersonCheckResponse> AddContactPersonCheck(AddContactPersonCheckRequest request) {
            return await new AddContactPersonCheckExecutor().Client(this).Execute<AddContactPersonCheckResponse, AddContactPersonCheckResult, AddContactPersonCheckRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查看联系人所属联系组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribePersonGroupResponse DescribePersonGroup(DescribePersonGroupRequest request) {
            return  new DescribePersonGroupExecutor().Client(this).Execute<DescribePersonGroupResponse, DescribePersonGroupResult, DescribePersonGroupRequest>(request);
        }
#else
        /// <summary>
        /// 查看联系人所属联系组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribePersonGroupResponse> DescribePersonGroup(DescribePersonGroupRequest request) {
            return await new DescribePersonGroupExecutor().Client(this).Execute<DescribePersonGroupResponse, DescribePersonGroupResult, DescribePersonGroupRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询账户信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAccountInfoResponse DescribeAccountInfo(DescribeAccountInfoRequest request) {
            return  new DescribeAccountInfoExecutor().Client(this).Execute<DescribeAccountInfoResponse, DescribeAccountInfoResult, DescribeAccountInfoRequest>(request);
        }
#else
        /// <summary>
        /// 查询账户信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAccountInfoResponse> DescribeAccountInfo(DescribeAccountInfoRequest request) {
            return await new DescribeAccountInfoExecutor().Client(this).Execute<DescribeAccountInfoResponse, DescribeAccountInfoResult, DescribeAccountInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// getNgDomainMsg
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeNgDomainMsgResponse DescribeNgDomainMsg(DescribeNgDomainMsgRequest request) {
            return  new DescribeNgDomainMsgExecutor().Client(this).Execute<DescribeNgDomainMsgResponse, DescribeNgDomainMsgResult, DescribeNgDomainMsgRequest>(request);
        }
#else
        /// <summary>
        /// getNgDomainMsg
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeNgDomainMsgResponse> DescribeNgDomainMsg(DescribeNgDomainMsgRequest request) {
            return await new DescribeNgDomainMsgExecutor().Client(this).Execute<DescribeNgDomainMsgResponse, DescribeNgDomainMsgResult, DescribeNgDomainMsgRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加发票的邮寄地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddInvoicePostAddressResponse AddInvoicePostAddress(AddInvoicePostAddressRequest request) {
            return  new AddInvoicePostAddressExecutor().Client(this).Execute<AddInvoicePostAddressResponse, AddInvoicePostAddressResult, AddInvoicePostAddressRequest>(request);
        }
#else
        /// <summary>
        /// 添加发票的邮寄地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddInvoicePostAddressResponse> AddInvoicePostAddress(AddInvoicePostAddressRequest request) {
            return await new AddInvoicePostAddressExecutor().Client(this).Execute<AddInvoicePostAddressResponse, AddInvoicePostAddressResult, AddInvoicePostAddressRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 检查邮箱是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ValidateEmailExistResponse ValidateEmailExist(ValidateEmailExistRequest request) {
            return  new ValidateEmailExistExecutor().Client(this).Execute<ValidateEmailExistResponse, ValidateEmailExistResult, ValidateEmailExistRequest>(request);
        }
#else
        /// <summary>
        /// 检查邮箱是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ValidateEmailExistResponse> ValidateEmailExist(ValidateEmailExistRequest request) {
            return await new ValidateEmailExistExecutor().Client(this).Execute<ValidateEmailExistResponse, ValidateEmailExistResult, ValidateEmailExistRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量删除消息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteMessageInBatchResponse DeleteMessageInBatch(DeleteMessageInBatchRequest request) {
            return  new DeleteMessageInBatchExecutor().Client(this).Execute<DeleteMessageInBatchResponse, DeleteMessageInBatchResult, DeleteMessageInBatchRequest>(request);
        }
#else
        /// <summary>
        /// 批量删除消息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteMessageInBatchResponse> DeleteMessageInBatch(DeleteMessageInBatchRequest request) {
            return await new DeleteMessageInBatchExecutor().Client(this).Execute<DeleteMessageInBatchResponse, DeleteMessageInBatchResult, DeleteMessageInBatchRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 编辑联系人信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateContactPersonResponse UpdateContactPerson(UpdateContactPersonRequest request) {
            return  new UpdateContactPersonExecutor().Client(this).Execute<UpdateContactPersonResponse, UpdateContactPersonResult, UpdateContactPersonRequest>(request);
        }
#else
        /// <summary>
        /// 编辑联系人信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateContactPersonResponse> UpdateContactPerson(UpdateContactPersonRequest request) {
            return await new UpdateContactPersonExecutor().Client(this).Execute<UpdateContactPersonResponse, UpdateContactPersonResult, UpdateContactPersonRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改邮箱第二步，更新邮箱信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EditMobileStep1Response EditMobileStep1(EditMobileStep1Request request) {
            return  new EditMobileStep1Executor().Client(this).Execute<EditMobileStep1Response, EditMobileStep1Result, EditMobileStep1Request>(request);
        }
#else
        /// <summary>
        /// 修改邮箱第二步，更新邮箱信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EditMobileStep1Response> EditMobileStep1(EditMobileStep1Request request) {
            return await new EditMobileStep1Executor().Client(this).Execute<EditMobileStep1Response, EditMobileStep1Result, EditMobileStep1Request>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询第三方镜像信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeActivityThirdPartMirrorsResponse DescribeActivityThirdPartMirrors(DescribeActivityThirdPartMirrorsRequest request) {
            return  new DescribeActivityThirdPartMirrorsExecutor().Client(this).Execute<DescribeActivityThirdPartMirrorsResponse, DescribeActivityThirdPartMirrorsResult, DescribeActivityThirdPartMirrorsRequest>(request);
        }
#else
        /// <summary>
        /// 查询第三方镜像信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeActivityThirdPartMirrorsResponse> DescribeActivityThirdPartMirrors(DescribeActivityThirdPartMirrorsRequest request) {
            return await new DescribeActivityThirdPartMirrorsExecutor().Client(this).Execute<DescribeActivityThirdPartMirrorsResponse, DescribeActivityThirdPartMirrorsResult, DescribeActivityThirdPartMirrorsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除发票资质模板信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteInvoiceMsgTemplateResponse DeleteInvoiceMsgTemplate(DeleteInvoiceMsgTemplateRequest request) {
            return  new DeleteInvoiceMsgTemplateExecutor().Client(this).Execute<DeleteInvoiceMsgTemplateResponse, DeleteInvoiceMsgTemplateResult, DeleteInvoiceMsgTemplateRequest>(request);
        }
#else
        /// <summary>
        /// 删除发票资质模板信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteInvoiceMsgTemplateResponse> DeleteInvoiceMsgTemplate(DeleteInvoiceMsgTemplateRequest request) {
            return await new DeleteInvoiceMsgTemplateExecutor().Client(this).Execute<DeleteInvoiceMsgTemplateResponse, DeleteInvoiceMsgTemplateResult, DeleteInvoiceMsgTemplateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取组内联系人信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeContactPersonInGroupResponse DescribeContactPersonInGroup(DescribeContactPersonInGroupRequest request) {
            return  new DescribeContactPersonInGroupExecutor().Client(this).Execute<DescribeContactPersonInGroupResponse, DescribeContactPersonInGroupResult, DescribeContactPersonInGroupRequest>(request);
        }
#else
        /// <summary>
        /// 获取组内联系人信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeContactPersonInGroupResponse> DescribeContactPersonInGroup(DescribeContactPersonInGroupRequest request) {
            return await new DescribeContactPersonInGroupExecutor().Client(this).Execute<DescribeContactPersonInGroupResponse, DescribeContactPersonInGroupResult, DescribeContactPersonInGroupRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 给邮箱发送验证邮件
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SendContactPersonValidateEmailResponse SendContactPersonValidateEmail(SendContactPersonValidateEmailRequest request) {
            return  new SendContactPersonValidateEmailExecutor().Client(this).Execute<SendContactPersonValidateEmailResponse, SendContactPersonValidateEmailResult, SendContactPersonValidateEmailRequest>(request);
        }
#else
        /// <summary>
        /// 给邮箱发送验证邮件
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SendContactPersonValidateEmailResponse> SendContactPersonValidateEmail(SendContactPersonValidateEmailRequest request) {
            return await new SendContactPersonValidateEmailExecutor().Client(this).Execute<SendContactPersonValidateEmailResponse, SendContactPersonValidateEmailResult, SendContactPersonValidateEmailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取余额预警相关信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeUserRemindResponse DescribeUserRemind(DescribeUserRemindRequest request) {
            return  new DescribeUserRemindExecutor().Client(this).Execute<DescribeUserRemindResponse, DescribeUserRemindResult, DescribeUserRemindRequest>(request);
        }
#else
        /// <summary>
        /// 获取余额预警相关信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeUserRemindResponse> DescribeUserRemind(DescribeUserRemindRequest request) {
            return await new DescribeUserRemindExecutor().Client(this).Execute<DescribeUserRemindResponse, DescribeUserRemindResult, DescribeUserRemindRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新账户附属信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateAccountAttachmentResponse UpdateAccountAttachment(UpdateAccountAttachmentRequest request) {
            return  new UpdateAccountAttachmentExecutor().Client(this).Execute<UpdateAccountAttachmentResponse, UpdateAccountAttachmentResult, UpdateAccountAttachmentRequest>(request);
        }
#else
        /// <summary>
        /// 更新账户附属信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateAccountAttachmentResponse> UpdateAccountAttachment(UpdateAccountAttachmentRequest request) {
            return await new UpdateAccountAttachmentExecutor().Client(this).Execute<UpdateAccountAttachmentResponse, UpdateAccountAttachmentResult, UpdateAccountAttachmentRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改手机第一步,验证身份
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public VerifyForEditPhoneResponse VerifyForEditPhone(VerifyForEditPhoneRequest request) {
            return  new VerifyForEditPhoneExecutor().Client(this).Execute<VerifyForEditPhoneResponse, VerifyForEditPhoneResult, VerifyForEditPhoneRequest>(request);
        }
#else
        /// <summary>
        /// 修改手机第一步,验证身份
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<VerifyForEditPhoneResponse> VerifyForEditPhone(VerifyForEditPhoneRequest request) {
            return await new VerifyForEditPhoneExecutor().Client(this).Execute<VerifyForEditPhoneResponse, VerifyForEditPhoneResult, VerifyForEditPhoneRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 通过链接领取代金券
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateCouponByLinkResponse CreateCouponByLink(CreateCouponByLinkRequest request) {
            return  new CreateCouponByLinkExecutor().Client(this).Execute<CreateCouponByLinkResponse, CreateCouponByLinkResult, CreateCouponByLinkRequest>(request);
        }
#else
        /// <summary>
        /// 通过链接领取代金券
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateCouponByLinkResponse> CreateCouponByLink(CreateCouponByLinkRequest request) {
            return await new CreateCouponByLinkExecutor().Client(this).Execute<CreateCouponByLinkResponse, CreateCouponByLinkResult, CreateCouponByLinkRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除联系组检查
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteContactGroupCheckResponse DeleteContactGroupCheck(DeleteContactGroupCheckRequest request) {
            return  new DeleteContactGroupCheckExecutor().Client(this).Execute<DeleteContactGroupCheckResponse, DeleteContactGroupCheckResult, DeleteContactGroupCheckRequest>(request);
        }
#else
        /// <summary>
        /// 删除联系组检查
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteContactGroupCheckResponse> DeleteContactGroupCheck(DeleteContactGroupCheckRequest request) {
            return await new DeleteContactGroupCheckExecutor().Client(this).Execute<DeleteContactGroupCheckResponse, DeleteContactGroupCheckResult, DeleteContactGroupCheckRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取某个分类下的消息列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeMessagesInCategoryResponse DescribeMessagesInCategory(DescribeMessagesInCategoryRequest request) {
            return  new DescribeMessagesInCategoryExecutor().Client(this).Execute<DescribeMessagesInCategoryResponse, DescribeMessagesInCategoryResult, DescribeMessagesInCategoryRequest>(request);
        }
#else
        /// <summary>
        /// 获取某个分类下的消息列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeMessagesInCategoryResponse> DescribeMessagesInCategory(DescribeMessagesInCategoryRequest request) {
            return await new DescribeMessagesInCategoryExecutor().Client(this).Execute<DescribeMessagesInCategoryResponse, DescribeMessagesInCategoryResult, DescribeMessagesInCategoryRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 激活用户
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ActiveUserResponse ActiveUser(ActiveUserRequest request) {
            return  new ActiveUserExecutor().Client(this).Execute<ActiveUserResponse, ActiveUserResult, ActiveUserRequest>(request);
        }
#else
        /// <summary>
        /// 激活用户
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ActiveUserResponse> ActiveUser(ActiveUserRequest request) {
            return await new ActiveUserExecutor().Client(this).Execute<ActiveUserResponse, ActiveUserResult, ActiveUserRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询充值单是否充值成功
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CheckRechargeResponse CheckRecharge(CheckRechargeRequest request) {
            return  new CheckRechargeExecutor().Client(this).Execute<CheckRechargeResponse, CheckRechargeResult, CheckRechargeRequest>(request);
        }
#else
        /// <summary>
        /// 查询充值单是否充值成功
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CheckRechargeResponse> CheckRecharge(CheckRechargeRequest request) {
            return await new CheckRechargeExecutor().Client(this).Execute<CheckRechargeResponse, CheckRechargeResult, CheckRechargeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询发票列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInvoicesResponse DescribeInvoices(DescribeInvoicesRequest request) {
            return  new DescribeInvoicesExecutor().Client(this).Execute<DescribeInvoicesResponse, DescribeInvoicesResult, DescribeInvoicesRequest>(request);
        }
#else
        /// <summary>
        /// 查询发票列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInvoicesResponse> DescribeInvoices(DescribeInvoicesRequest request) {
            return await new DescribeInvoicesExecutor().Client(this).Execute<DescribeInvoicesResponse, DescribeInvoicesResult, DescribeInvoicesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 验证手机发送验证码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public VerifyUserPhoneResponse VerifyUserPhone(VerifyUserPhoneRequest request) {
            return  new VerifyUserPhoneExecutor().Client(this).Execute<VerifyUserPhoneResponse, VerifyUserPhoneResult, VerifyUserPhoneRequest>(request);
        }
#else
        /// <summary>
        /// 验证手机发送验证码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<VerifyUserPhoneResponse> VerifyUserPhone(VerifyUserPhoneRequest request) {
            return await new VerifyUserPhoneExecutor().Client(this).Execute<VerifyUserPhoneResponse, VerifyUserPhoneResult, VerifyUserPhoneRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新敏感操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateSensitiveOpSettingResponse UpdateSensitiveOpSetting(UpdateSensitiveOpSettingRequest request) {
            return  new UpdateSensitiveOpSettingExecutor().Client(this).Execute<UpdateSensitiveOpSettingResponse, UpdateSensitiveOpSettingResult, UpdateSensitiveOpSettingRequest>(request);
        }
#else
        /// <summary>
        /// 更新敏感操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateSensitiveOpSettingResponse> UpdateSensitiveOpSetting(UpdateSensitiveOpSettingRequest request) {
            return await new UpdateSensitiveOpSettingExecutor().Client(this).Execute<UpdateSensitiveOpSettingResponse, UpdateSensitiveOpSettingResult, UpdateSensitiveOpSettingRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询用户账户信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeUserAccountFeeInfoResponse DescribeUserAccountFeeInfo(DescribeUserAccountFeeInfoRequest request) {
            return  new DescribeUserAccountFeeInfoExecutor().Client(this).Execute<DescribeUserAccountFeeInfoResponse, DescribeUserAccountFeeInfoResult, DescribeUserAccountFeeInfoRequest>(request);
        }
#else
        /// <summary>
        /// 查询用户账户信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeUserAccountFeeInfoResponse> DescribeUserAccountFeeInfo(DescribeUserAccountFeeInfoRequest request) {
            return await new DescribeUserAccountFeeInfoExecutor().Client(this).Execute<DescribeUserAccountFeeInfoResponse, DescribeUserAccountFeeInfoResult, DescribeUserAccountFeeInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取激活信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public PrepareForActiveResponse PrepareForActive(PrepareForActiveRequest request) {
            return  new PrepareForActiveExecutor().Client(this).Execute<PrepareForActiveResponse, PrepareForActiveResult, PrepareForActiveRequest>(request);
        }
#else
        /// <summary>
        /// 获取激活信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<PrepareForActiveResponse> PrepareForActive(PrepareForActiveRequest request) {
            return await new PrepareForActiveExecutor().Client(this).Execute<PrepareForActiveResponse, PrepareForActiveResult, PrepareForActiveRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取联系人信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeContactPersonResponse DescribeContactPerson(DescribeContactPersonRequest request) {
            return  new DescribeContactPersonExecutor().Client(this).Execute<DescribeContactPersonResponse, DescribeContactPersonResult, DescribeContactPersonRequest>(request);
        }
#else
        /// <summary>
        /// 获取联系人信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeContactPersonResponse> DescribeContactPerson(DescribeContactPersonRequest request) {
            return await new DescribeContactPersonExecutor().Client(this).Execute<DescribeContactPersonResponse, DescribeContactPersonResult, DescribeContactPersonRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新发票的邮寄地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateInvoicePostAddressResponse UpdateInvoicePostAddress(UpdateInvoicePostAddressRequest request) {
            return  new UpdateInvoicePostAddressExecutor().Client(this).Execute<UpdateInvoicePostAddressResponse, UpdateInvoicePostAddressResult, UpdateInvoicePostAddressRequest>(request);
        }
#else
        /// <summary>
        /// 更新发票的邮寄地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateInvoicePostAddressResponse> UpdateInvoicePostAddress(UpdateInvoicePostAddressRequest request) {
            return await new UpdateInvoicePostAddressExecutor().Client(this).Execute<UpdateInvoicePostAddressResponse, UpdateInvoicePostAddressResult, UpdateInvoicePostAddressRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 联系人显示列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeContactPersonsInfoResponse DescribeContactPersonsInfo(DescribeContactPersonsInfoRequest request) {
            return  new DescribeContactPersonsInfoExecutor().Client(this).Execute<DescribeContactPersonsInfoResponse, DescribeContactPersonsInfoResult, DescribeContactPersonsInfoRequest>(request);
        }
#else
        /// <summary>
        /// 联系人显示列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeContactPersonsInfoResponse> DescribeContactPersonsInfo(DescribeContactPersonsInfoRequest request) {
            return await new DescribeContactPersonsInfoExecutor().Client(this).Execute<DescribeContactPersonsInfoResponse, DescribeContactPersonsInfoResult, DescribeContactPersonsInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建充值单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateRechargeResponse CreateRecharge(CreateRechargeRequest request) {
            return  new CreateRechargeExecutor().Client(this).Execute<CreateRechargeResponse, CreateRechargeResult, CreateRechargeRequest>(request);
        }
#else
        /// <summary>
        /// 创建充值单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateRechargeResponse> CreateRecharge(CreateRechargeRequest request) {
            return await new CreateRechargeExecutor().Client(this).Execute<CreateRechargeResponse, CreateRechargeResult, CreateRechargeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新发票资质模板信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateInvoiceMsgTemplateResponse UpdateInvoiceMsgTemplate(UpdateInvoiceMsgTemplateRequest request) {
            return  new UpdateInvoiceMsgTemplateExecutor().Client(this).Execute<UpdateInvoiceMsgTemplateResponse, UpdateInvoiceMsgTemplateResult, UpdateInvoiceMsgTemplateRequest>(request);
        }
#else
        /// <summary>
        /// 更新发票资质模板信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateInvoiceMsgTemplateResponse> UpdateInvoiceMsgTemplate(UpdateInvoiceMsgTemplateRequest request) {
            return await new UpdateInvoiceMsgTemplateExecutor().Client(this).Execute<UpdateInvoiceMsgTemplateResponse, UpdateInvoiceMsgTemplateResult, UpdateInvoiceMsgTemplateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询活动信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeActivityInfoResponse DescribeActivityInfo(DescribeActivityInfoRequest request) {
            return  new DescribeActivityInfoExecutor().Client(this).Execute<DescribeActivityInfoResponse, DescribeActivityInfoResult, DescribeActivityInfoRequest>(request);
        }
#else
        /// <summary>
        /// 查询活动信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeActivityInfoResponse> DescribeActivityInfo(DescribeActivityInfoRequest request) {
            return await new DescribeActivityInfoExecutor().Client(this).Execute<DescribeActivityInfoResponse, DescribeActivityInfoResult, DescribeActivityInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置主联系人
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetMainContactPersonResponse SetMainContactPerson(SetMainContactPersonRequest request) {
            return  new SetMainContactPersonExecutor().Client(this).Execute<SetMainContactPersonResponse, SetMainContactPersonResult, SetMainContactPersonRequest>(request);
        }
#else
        /// <summary>
        /// 设置主联系人
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetMainContactPersonResponse> SetMainContactPerson(SetMainContactPersonRequest request) {
            return await new SetMainContactPersonExecutor().Client(this).Execute<SetMainContactPersonResponse, SetMainContactPersonResult, SetMainContactPersonRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 按类别获取消息总数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeMessagesCountResponse DescribeMessagesCount(DescribeMessagesCountRequest request) {
            return  new DescribeMessagesCountExecutor().Client(this).Execute<DescribeMessagesCountResponse, DescribeMessagesCountResult, DescribeMessagesCountRequest>(request);
        }
#else
        /// <summary>
        /// 按类别获取消息总数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeMessagesCountResponse> DescribeMessagesCount(DescribeMessagesCountRequest request) {
            return await new DescribeMessagesCountExecutor().Client(this).Execute<DescribeMessagesCountResponse, DescribeMessagesCountResult, DescribeMessagesCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 检查手机号码是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ValidatePhoneExistResponse ValidatePhoneExist(ValidatePhoneExistRequest request) {
            return  new ValidatePhoneExistExecutor().Client(this).Execute<ValidatePhoneExistResponse, ValidatePhoneExistResult, ValidatePhoneExistRequest>(request);
        }
#else
        /// <summary>
        /// 检查手机号码是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ValidatePhoneExistResponse> ValidatePhoneExist(ValidatePhoneExistRequest request) {
            return await new ValidatePhoneExistExecutor().Client(this).Execute<ValidatePhoneExistResponse, ValidatePhoneExistResult, ValidatePhoneExistRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 校验手机验证码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ValidateSmsCodeResponse ValidateSmsCode(ValidateSmsCodeRequest request) {
            return  new ValidateSmsCodeExecutor().Client(this).Execute<ValidateSmsCodeResponse, ValidateSmsCodeResult, ValidateSmsCodeRequest>(request);
        }
#else
        /// <summary>
        /// 校验手机验证码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ValidateSmsCodeResponse> ValidateSmsCode(ValidateSmsCodeRequest request) {
            return await new ValidateSmsCodeExecutor().Client(this).Execute<ValidateSmsCodeResponse, ValidateSmsCodeResult, ValidateSmsCodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 联系组显示列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeContactGroupsResponse DescribeContactGroups(DescribeContactGroupsRequest request) {
            return  new DescribeContactGroupsExecutor().Client(this).Execute<DescribeContactGroupsResponse, DescribeContactGroupsResult, DescribeContactGroupsRequest>(request);
        }
#else
        /// <summary>
        /// 联系组显示列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeContactGroupsResponse> DescribeContactGroups(DescribeContactGroupsRequest request) {
            return await new DescribeContactGroupsExecutor().Client(this).Execute<DescribeContactGroupsResponse, DescribeContactGroupsResult, DescribeContactGroupsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 从京东校园授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AuthorizationResponse Authorization(AuthorizationRequest request) {
            return  new AuthorizationExecutor().Client(this).Execute<AuthorizationResponse, AuthorizationResult, AuthorizationRequest>(request);
        }
#else
        /// <summary>
        /// 从京东校园授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AuthorizationResponse> Authorization(AuthorizationRequest request) {
            return await new AuthorizationExecutor().Client(this).Execute<AuthorizationResponse, AuthorizationResult, AuthorizationRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取发票的邮寄地址列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInvoicePostAddressResponse DescribeInvoicePostAddress(DescribeInvoicePostAddressRequest request) {
            return  new DescribeInvoicePostAddressExecutor().Client(this).Execute<DescribeInvoicePostAddressResponse, DescribeInvoicePostAddressResult, DescribeInvoicePostAddressRequest>(request);
        }
#else
        /// <summary>
        /// 获取发票的邮寄地址列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInvoicePostAddressResponse> DescribeInvoicePostAddress(DescribeInvoicePostAddressRequest request) {
            return await new DescribeInvoicePostAddressExecutor().Client(this).Execute<DescribeInvoicePostAddressResponse, DescribeInvoicePostAddressResult, DescribeInvoicePostAddressRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除联系人检查
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteContactPersonCheckResponse DeleteContactPersonCheck(DeleteContactPersonCheckRequest request) {
            return  new DeleteContactPersonCheckExecutor().Client(this).Execute<DeleteContactPersonCheckResponse, DeleteContactPersonCheckResult, DeleteContactPersonCheckRequest>(request);
        }
#else
        /// <summary>
        /// 删除联系人检查
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteContactPersonCheckResponse> DeleteContactPersonCheck(DeleteContactPersonCheckRequest request) {
            return await new DeleteContactPersonCheckExecutor().Client(this).Execute<DeleteContactPersonCheckResponse, DeleteContactPersonCheckResult, DeleteContactPersonCheckRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改手机第二步，更新手机号码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EditPhoneResponse EditPhone(EditPhoneRequest request) {
            return  new EditPhoneExecutor().Client(this).Execute<EditPhoneResponse, EditPhoneResult, EditPhoneRequest>(request);
        }
#else
        /// <summary>
        /// 修改手机第二步，更新手机号码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EditPhoneResponse> EditPhone(EditPhoneRequest request) {
            return await new EditPhoneExecutor().Client(this).Execute<EditPhoneResponse, EditPhoneResult, EditPhoneRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加汇款认领单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateRemittanceClaimResponse CreateRemittanceClaim(CreateRemittanceClaimRequest request) {
            return  new CreateRemittanceClaimExecutor().Client(this).Execute<CreateRemittanceClaimResponse, CreateRemittanceClaimResult, CreateRemittanceClaimRequest>(request);
        }
#else
        /// <summary>
        /// 添加汇款认领单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateRemittanceClaimResponse> CreateRemittanceClaim(CreateRemittanceClaimRequest request) {
            return await new CreateRemittanceClaimExecutor().Client(this).Execute<CreateRemittanceClaimResponse, CreateRemittanceClaimResult, CreateRemittanceClaimRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查看消息详情，并设置为已读
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeMessageDetailResponse DescribeMessageDetail(DescribeMessageDetailRequest request) {
            return  new DescribeMessageDetailExecutor().Client(this).Execute<DescribeMessageDetailResponse, DescribeMessageDetailResult, DescribeMessageDetailRequest>(request);
        }
#else
        /// <summary>
        /// 查看消息详情，并设置为已读
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeMessageDetailResponse> DescribeMessageDetail(DescribeMessageDetailRequest request) {
            return await new DescribeMessageDetailExecutor().Client(this).Execute<DescribeMessageDetailResponse, DescribeMessageDetailResult, DescribeMessageDetailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 子账号登录验证
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SubAccountLoginResponse SubAccountLogin(SubAccountLoginRequest request) {
            return  new SubAccountLoginExecutor().Client(this).Execute<SubAccountLoginResponse, SubAccountLoginResult, SubAccountLoginRequest>(request);
        }
#else
        /// <summary>
        /// 子账号登录验证
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SubAccountLoginResponse> SubAccountLogin(SubAccountLoginRequest request) {
            return await new SubAccountLoginExecutor().Client(this).Execute<SubAccountLoginResponse, SubAccountLoginResult, SubAccountLoginRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 禁用accessKey
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisabledUserAccessKeyResponse DisabledUserAccessKey(DisabledUserAccessKeyRequest request) {
            return  new DisabledUserAccessKeyExecutor().Client(this).Execute<DisabledUserAccessKeyResponse, DisabledUserAccessKeyResult, DisabledUserAccessKeyRequest>(request);
        }
#else
        /// <summary>
        /// 禁用accessKey
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisabledUserAccessKeyResponse> DisabledUserAccessKey(DisabledUserAccessKeyRequest request) {
            return await new DisabledUserAccessKeyExecutor().Client(this).Execute<DisabledUserAccessKeyResponse, DisabledUserAccessKeyResult, DisabledUserAccessKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询accessKey列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeUserAccessKeysResponse DescribeUserAccessKeys(DescribeUserAccessKeysRequest request) {
            return  new DescribeUserAccessKeysExecutor().Client(this).Execute<DescribeUserAccessKeysResponse, DescribeUserAccessKeysResult, DescribeUserAccessKeysRequest>(request);
        }
#else
        /// <summary>
        /// 查询accessKey列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeUserAccessKeysResponse> DescribeUserAccessKeys(DescribeUserAccessKeysRequest request) {
            return await new DescribeUserAccessKeysExecutor().Client(this).Execute<DescribeUserAccessKeysResponse, DescribeUserAccessKeysResult, DescribeUserAccessKeysRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 邮箱验证验证,验证成功跳转到成功页面,失败则到联系人管理页面
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SendContactValidateEmailResponse SendContactValidateEmail(SendContactValidateEmailRequest request) {
            return  new SendContactValidateEmailExecutor().Client(this).Execute<SendContactValidateEmailResponse, SendContactValidateEmailResult, SendContactValidateEmailRequest>(request);
        }
#else
        /// <summary>
        /// 邮箱验证验证,验证成功跳转到成功页面,失败则到联系人管理页面
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SendContactValidateEmailResponse> SendContactValidateEmail(SendContactValidateEmailRequest request) {
            return await new SendContactValidateEmailExecutor().Client(this).Execute<SendContactValidateEmailResponse, SendContactValidateEmailResult, SendContactValidateEmailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加联系组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddContactGroupResponse AddContactGroup(AddContactGroupRequest request) {
            return  new AddContactGroupExecutor().Client(this).Execute<AddContactGroupResponse, AddContactGroupResult, AddContactGroupRequest>(request);
        }
#else
        /// <summary>
        /// 添加联系组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddContactGroupResponse> AddContactGroup(AddContactGroupRequest request) {
            return await new AddContactGroupExecutor().Client(this).Execute<AddContactGroupResponse, AddContactGroupResult, AddContactGroupRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// deleteNgDomainMsg
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteNgDomainMsgResponse DeleteNgDomainMsg(DeleteNgDomainMsgRequest request) {
            return  new DeleteNgDomainMsgExecutor().Client(this).Execute<DeleteNgDomainMsgResponse, DeleteNgDomainMsgResult, DeleteNgDomainMsgRequest>(request);
        }
#else
        /// <summary>
        /// deleteNgDomainMsg
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteNgDomainMsgResponse> DeleteNgDomainMsg(DeleteNgDomainMsgRequest request) {
            return await new DeleteNgDomainMsgExecutor().Client(this).Execute<DeleteNgDomainMsgResponse, DeleteNgDomainMsgResult, DeleteNgDomainMsgRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除发票的邮寄地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteInvoicePostAddressResponse DeleteInvoicePostAddress(DeleteInvoicePostAddressRequest request) {
            return  new DeleteInvoicePostAddressExecutor().Client(this).Execute<DeleteInvoicePostAddressResponse, DeleteInvoicePostAddressResult, DeleteInvoicePostAddressRequest>(request);
        }
#else
        /// <summary>
        /// 删除发票的邮寄地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteInvoicePostAddressResponse> DeleteInvoicePostAddress(DeleteInvoicePostAddressRequest request) {
            return await new DeleteInvoicePostAddressExecutor().Client(this).Execute<DeleteInvoicePostAddressResponse, DeleteInvoicePostAddressResult, DeleteInvoicePostAddressRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加发票资质模板信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddInvoiceMsgTemplateResponse AddInvoiceMsgTemplate(AddInvoiceMsgTemplateRequest request) {
            return  new AddInvoiceMsgTemplateExecutor().Client(this).Execute<AddInvoiceMsgTemplateResponse, AddInvoiceMsgTemplateResult, AddInvoiceMsgTemplateRequest>(request);
        }
#else
        /// <summary>
        /// 添加发票资质模板信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddInvoiceMsgTemplateResponse> AddInvoiceMsgTemplate(AddInvoiceMsgTemplateRequest request) {
            return await new AddInvoiceMsgTemplateExecutor().Client(this).Execute<AddInvoiceMsgTemplateResponse, AddInvoiceMsgTemplateResult, AddInvoiceMsgTemplateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取所有消息类别名称及对应消息数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeMessageCategoryCountInfoResponse DescribeMessageCategoryCountInfo(DescribeMessageCategoryCountInfoRequest request) {
            return  new DescribeMessageCategoryCountInfoExecutor().Client(this).Execute<DescribeMessageCategoryCountInfoResponse, DescribeMessageCategoryCountInfoResult, DescribeMessageCategoryCountInfoRequest>(request);
        }
#else
        /// <summary>
        /// 获取所有消息类别名称及对应消息数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeMessageCategoryCountInfoResponse> DescribeMessageCategoryCountInfo(DescribeMessageCategoryCountInfoRequest request) {
            return await new DescribeMessageCategoryCountInfoExecutor().Client(this).Execute<DescribeMessageCategoryCountInfoResponse, DescribeMessageCategoryCountInfoResult, DescribeMessageCategoryCountInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建云硬盘
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateActivityVolumeResponse CreateActivityVolume(CreateActivityVolumeRequest request) {
            return  new CreateActivityVolumeExecutor().Client(this).Execute<CreateActivityVolumeResponse, CreateActivityVolumeResult, CreateActivityVolumeRequest>(request);
        }
#else
        /// <summary>
        /// 创建云硬盘
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateActivityVolumeResponse> CreateActivityVolume(CreateActivityVolumeRequest request) {
            return await new CreateActivityVolumeExecutor().Client(this).Execute<CreateActivityVolumeResponse, CreateActivityVolumeResult, CreateActivityVolumeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取线下汇款记录列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeRemittanceClaimsResponse DescribeRemittanceClaims(DescribeRemittanceClaimsRequest request) {
            return  new DescribeRemittanceClaimsExecutor().Client(this).Execute<DescribeRemittanceClaimsResponse, DescribeRemittanceClaimsResult, DescribeRemittanceClaimsRequest>(request);
        }
#else
        /// <summary>
        /// 获取线下汇款记录列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeRemittanceClaimsResponse> DescribeRemittanceClaims(DescribeRemittanceClaimsRequest request) {
            return await new DescribeRemittanceClaimsExecutor().Client(this).Execute<DescribeRemittanceClaimsResponse, DescribeRemittanceClaimsResult, DescribeRemittanceClaimsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 个人认证通过回调接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public PersonSuccessResponse PersonSuccess(PersonSuccessRequest request) {
            return  new PersonSuccessExecutor().Client(this).Execute<PersonSuccessResponse, PersonSuccessResult, PersonSuccessRequest>(request);
        }
#else
        /// <summary>
        /// 个人认证通过回调接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<PersonSuccessResponse> PersonSuccess(PersonSuccessRequest request) {
            return await new PersonSuccessExecutor().Client(this).Execute<PersonSuccessResponse, PersonSuccessResult, PersonSuccessRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改密码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SubAccountModifyPasswordResponse SubAccountModifyPassword(SubAccountModifyPasswordRequest request) {
            return  new SubAccountModifyPasswordExecutor().Client(this).Execute<SubAccountModifyPasswordResponse, SubAccountModifyPasswordResult, SubAccountModifyPasswordRequest>(request);
        }
#else
        /// <summary>
        /// 修改密码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SubAccountModifyPasswordResponse> SubAccountModifyPassword(SubAccountModifyPasswordRequest request) {
            return await new SubAccountModifyPasswordExecutor().Client(this).Execute<SubAccountModifyPasswordResponse, SubAccountModifyPasswordResult, SubAccountModifyPasswordRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建发票
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateInvoiceResponse CreateInvoice(CreateInvoiceRequest request) {
            return  new CreateInvoiceExecutor().Client(this).Execute<CreateInvoiceResponse, CreateInvoiceResult, CreateInvoiceRequest>(request);
        }
#else
        /// <summary>
        /// 创建发票
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateInvoiceResponse> CreateInvoice(CreateInvoiceRequest request) {
            return await new CreateInvoiceExecutor().Client(this).Execute<CreateInvoiceResponse, CreateInvoiceResult, CreateInvoiceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量标记已读
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateMessageReadStateInBatchResponse UpdateMessageReadStateInBatch(UpdateMessageReadStateInBatchRequest request) {
            return  new UpdateMessageReadStateInBatchExecutor().Client(this).Execute<UpdateMessageReadStateInBatchResponse, UpdateMessageReadStateInBatchResult, UpdateMessageReadStateInBatchRequest>(request);
        }
#else
        /// <summary>
        /// 批量标记已读
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateMessageReadStateInBatchResponse> UpdateMessageReadStateInBatch(UpdateMessageReadStateInBatchRequest request) {
            return await new UpdateMessageReadStateInBatchExecutor().Client(this).Execute<UpdateMessageReadStateInBatchResponse, UpdateMessageReadStateInBatchResult, UpdateMessageReadStateInBatchRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除联系人
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteContactPersonResponse DeleteContactPerson(DeleteContactPersonRequest request) {
            return  new DeleteContactPersonExecutor().Client(this).Execute<DeleteContactPersonResponse, DeleteContactPersonResult, DeleteContactPersonRequest>(request);
        }
#else
        /// <summary>
        /// 删除联系人
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteContactPersonResponse> DeleteContactPerson(DeleteContactPersonRequest request) {
            return await new DeleteContactPersonExecutor().Client(this).Execute<DeleteContactPersonResponse, DeleteContactPersonResult, DeleteContactPersonRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询用户是否实名认证
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeUserAuthSateResponse DescribeUserAuthSate(DescribeUserAuthSateRequest request) {
            return  new DescribeUserAuthSateExecutor().Client(this).Execute<DescribeUserAuthSateResponse, DescribeUserAuthSateResult, DescribeUserAuthSateRequest>(request);
        }
#else
        /// <summary>
        /// 查询用户是否实名认证
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeUserAuthSateResponse> DescribeUserAuthSate(DescribeUserAuthSateRequest request) {
            return await new DescribeUserAuthSateExecutor().Client(this).Execute<DescribeUserAuthSateResponse, DescribeUserAuthSateResult, DescribeUserAuthSateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建公网ip
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateActivityFloatingIPResponse CreateActivityFloatingIP(CreateActivityFloatingIPRequest request) {
            return  new CreateActivityFloatingIPExecutor().Client(this).Execute<CreateActivityFloatingIPResponse, CreateActivityFloatingIPResult, CreateActivityFloatingIPRequest>(request);
        }
#else
        /// <summary>
        /// 创建公网ip
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateActivityFloatingIPResponse> CreateActivityFloatingIP(CreateActivityFloatingIPRequest request) {
            return await new CreateActivityFloatingIPExecutor().Client(this).Execute<CreateActivityFloatingIPResponse, CreateActivityFloatingIPResult, CreateActivityFloatingIPRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 绑定认证
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public BindAuthResponse BindAuth(BindAuthRequest request) {
            return  new BindAuthExecutor().Client(this).Execute<BindAuthResponse, BindAuthResult, BindAuthRequest>(request);
        }
#else
        /// <summary>
        /// 绑定认证
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<BindAuthResponse> BindAuth(BindAuthRequest request) {
            return await new BindAuthExecutor().Client(this).Execute<BindAuthResponse, BindAuthResult, BindAuthRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 打包创建
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateActivityPackageResourceResponse CreateActivityPackageResource(CreateActivityPackageResourceRequest request) {
            return  new CreateActivityPackageResourceExecutor().Client(this).Execute<CreateActivityPackageResourceResponse, CreateActivityPackageResourceResult, CreateActivityPackageResourceRequest>(request);
        }
#else
        /// <summary>
        /// 打包创建
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateActivityPackageResourceResponse> CreateActivityPackageResource(CreateActivityPackageResourceRequest request) {
            return await new CreateActivityPackageResourceExecutor().Client(this).Execute<CreateActivityPackageResourceResponse, CreateActivityPackageResourceResult, CreateActivityPackageResourceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 检查用户是否激活
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CheckActiveResponse CheckActive(CheckActiveRequest request) {
            return  new CheckActiveExecutor().Client(this).Execute<CheckActiveResponse, CheckActiveResult, CheckActiveRequest>(request);
        }
#else
        /// <summary>
        /// 检查用户是否激活
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CheckActiveResponse> CheckActive(CheckActiveRequest request) {
            return await new CheckActiveExecutor().Client(this).Execute<CheckActiveResponse, CheckActiveResult, CheckActiveRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除联系组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteContactGroupResponse DeleteContactGroup(DeleteContactGroupRequest request) {
            return  new DeleteContactGroupExecutor().Client(this).Execute<DeleteContactGroupResponse, DeleteContactGroupResult, DeleteContactGroupRequest>(request);
        }
#else
        /// <summary>
        /// 删除联系组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteContactGroupResponse> DeleteContactGroup(DeleteContactGroupRequest request) {
            return await new DeleteContactGroupExecutor().Client(this).Execute<DeleteContactGroupResponse, DeleteContactGroupResult, DeleteContactGroupRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置消息订阅者
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateMessageSettingSubscriptionResponse UpdateMessageSettingSubscription(UpdateMessageSettingSubscriptionRequest request) {
            return  new UpdateMessageSettingSubscriptionExecutor().Client(this).Execute<UpdateMessageSettingSubscriptionResponse, UpdateMessageSettingSubscriptionResult, UpdateMessageSettingSubscriptionRequest>(request);
        }
#else
        /// <summary>
        /// 设置消息订阅者
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateMessageSettingSubscriptionResponse> UpdateMessageSettingSubscription(UpdateMessageSettingSubscriptionRequest request) {
            return await new UpdateMessageSettingSubscriptionExecutor().Client(this).Execute<UpdateMessageSettingSubscriptionResponse, UpdateMessageSettingSubscriptionResult, UpdateMessageSettingSubscriptionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 编辑联系组成员
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateGroupPersonResponse UpdateGroupPerson(UpdateGroupPersonRequest request) {
            return  new UpdateGroupPersonExecutor().Client(this).Execute<UpdateGroupPersonResponse, UpdateGroupPersonResult, UpdateGroupPersonRequest>(request);
        }
#else
        /// <summary>
        /// 编辑联系组成员
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateGroupPersonResponse> UpdateGroupPerson(UpdateGroupPersonRequest request) {
            return await new UpdateGroupPersonExecutor().Client(this).Execute<UpdateGroupPersonResponse, UpdateGroupPersonResult, UpdateGroupPersonRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询金券使用列表接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCouponsResponse DescribeCoupons(DescribeCouponsRequest request) {
            return  new DescribeCouponsExecutor().Client(this).Execute<DescribeCouponsResponse, DescribeCouponsResult, DescribeCouponsRequest>(request);
        }
#else
        /// <summary>
        /// 查询金券使用列表接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCouponsResponse> DescribeCoupons(DescribeCouponsRequest request) {
            return await new DescribeCouponsExecutor().Client(this).Execute<DescribeCouponsResponse, DescribeCouponsResult, DescribeCouponsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取开票相关信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetInvoiceInfoResponse GetInvoiceInfo(GetInvoiceInfoRequest request) {
            return  new GetInvoiceInfoExecutor().Client(this).Execute<GetInvoiceInfoResponse, GetInvoiceInfoResult, GetInvoiceInfoRequest>(request);
        }
#else
        /// <summary>
        /// 获取开票相关信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetInvoiceInfoResponse> GetInvoiceInfo(GetInvoiceInfoRequest request) {
            return await new GetInvoiceInfoExecutor().Client(this).Execute<GetInvoiceInfoResponse, GetInvoiceInfoResult, GetInvoiceInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取线下汇款识别码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateRemittanceResponse CreateRemittance(CreateRemittanceRequest request) {
            return  new CreateRemittanceExecutor().Client(this).Execute<CreateRemittanceResponse, CreateRemittanceResult, CreateRemittanceRequest>(request);
        }
#else
        /// <summary>
        /// 获取线下汇款识别码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateRemittanceResponse> CreateRemittance(CreateRemittanceRequest request) {
            return await new CreateRemittanceExecutor().Client(this).Execute<CreateRemittanceResponse, CreateRemittanceResult, CreateRemittanceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询账户附属信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAccountAttachmentResponse DescribeAccountAttachment(DescribeAccountAttachmentRequest request) {
            return  new DescribeAccountAttachmentExecutor().Client(this).Execute<DescribeAccountAttachmentResponse, DescribeAccountAttachmentResult, DescribeAccountAttachmentRequest>(request);
        }
#else
        /// <summary>
        /// 查询账户附属信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAccountAttachmentResponse> DescribeAccountAttachment(DescribeAccountAttachmentRequest request) {
            return await new DescribeAccountAttachmentExecutor().Client(this).Execute<DescribeAccountAttachmentResponse, DescribeAccountAttachmentResult, DescribeAccountAttachmentRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询资源价格
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeResourceAmountResponse DescribeResourceAmount(DescribeResourceAmountRequest request) {
            return  new DescribeResourceAmountExecutor().Client(this).Execute<DescribeResourceAmountResponse, DescribeResourceAmountResult, DescribeResourceAmountRequest>(request);
        }
#else
        /// <summary>
        /// 查询资源价格
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeResourceAmountResponse> DescribeResourceAmount(DescribeResourceAmountRequest request) {
            return await new DescribeResourceAmountExecutor().Client(this).Execute<DescribeResourceAmountResponse, DescribeResourceAmountResult, DescribeResourceAmountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取消息设置信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeMessageSettingsResponse DescribeMessageSettings(DescribeMessageSettingsRequest request) {
            return  new DescribeMessageSettingsExecutor().Client(this).Execute<DescribeMessageSettingsResponse, DescribeMessageSettingsResult, DescribeMessageSettingsRequest>(request);
        }
#else
        /// <summary>
        /// 获取消息设置信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeMessageSettingsResponse> DescribeMessageSettings(DescribeMessageSettingsRequest request) {
            return await new DescribeMessageSettingsExecutor().Client(this).Execute<DescribeMessageSettingsResponse, DescribeMessageSettingsResult, DescribeMessageSettingsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查看联系组成员
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeGroupPersonResponse DescribeGroupPerson(DescribeGroupPersonRequest request) {
            return  new DescribeGroupPersonExecutor().Client(this).Execute<DescribeGroupPersonResponse, DescribeGroupPersonResult, DescribeGroupPersonRequest>(request);
        }
#else
        /// <summary>
        /// 查看联系组成员
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeGroupPersonResponse> DescribeGroupPerson(DescribeGroupPersonRequest request) {
            return await new DescribeGroupPersonExecutor().Client(this).Execute<DescribeGroupPersonResponse, DescribeGroupPersonResult, DescribeGroupPersonRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 京东云授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AccreditResponse Accredit(AccreditRequest request) {
            return  new AccreditExecutor().Client(this).Execute<AccreditResponse, AccreditResult, AccreditRequest>(request);
        }
#else
        /// <summary>
        /// 京东云授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AccreditResponse> Accredit(AccreditRequest request) {
            return await new AccreditExecutor().Client(this).Execute<AccreditResponse, AccreditResult, AccreditRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取线下汇款记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeRemittanceClaimResponse DescribeRemittanceClaim(DescribeRemittanceClaimRequest request) {
            return  new DescribeRemittanceClaimExecutor().Client(this).Execute<DescribeRemittanceClaimResponse, DescribeRemittanceClaimResult, DescribeRemittanceClaimRequest>(request);
        }
#else
        /// <summary>
        /// 获取线下汇款记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeRemittanceClaimResponse> DescribeRemittanceClaim(DescribeRemittanceClaimRequest request) {
            return await new DescribeRemittanceClaimExecutor().Client(this).Execute<DescribeRemittanceClaimResponse, DescribeRemittanceClaimResult, DescribeRemittanceClaimRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取发票详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeInvoiceResponse DescribeInvoice(DescribeInvoiceRequest request) {
            return  new DescribeInvoiceExecutor().Client(this).Execute<DescribeInvoiceResponse, DescribeInvoiceResult, DescribeInvoiceRequest>(request);
        }
#else
        /// <summary>
        /// 获取发票详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeInvoiceResponse> DescribeInvoice(DescribeInvoiceRequest request) {
            return await new DescribeInvoiceExecutor().Client(this).Execute<DescribeInvoiceResponse, DescribeInvoiceResult, DescribeInvoiceRequest>(request);
        }
#endif

            /// <summary>
            ///  默认UcapiClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>ucapiClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>ucapiClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>ucapiClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造UcapiClient 对象
                ///</summary>
                UcapiClient Build();
            }

            /// <summary>
            ///  默认UcapiClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// UcapiClient service client
                /// </summary>
                private  UcapiClient ucapiClient;

                /// <summary>
                ///  默认UcapiClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    ucapiClient = new UcapiClient();
                }

                /// <summary>
                ///  构造UcapiClient 对象
                ///</summary>
                public UcapiClient Build()
                {
                    if (ucapiClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        ucapiClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (ucapiClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("UcapiClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (ucapiClient.HttpRequestConfig == null)
                    {
                        ucapiClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (ucapiClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("UcapiClient build error: http request config not set");
                        }
                    }
                    return ucapiClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>ucapiClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    ucapiClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>ucapiClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    ucapiClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>ucapiClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    ucapiClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
