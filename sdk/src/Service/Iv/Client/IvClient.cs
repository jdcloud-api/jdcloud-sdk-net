/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Intelligent Video
 * 智能视频相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Iv.Apis;
using JDCloudSDK.Iv.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Iv.Client
{
    /// <summary>
    ///  Intelligent Video
    ///  智能视频相关接口
    ///  Iv Api 客户端
    ///</summary>
    public class IvClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private IvClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public IvClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public IvClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public IvClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.2.3
        ///</summary>
        public const string ClientVersion = "1.2.3";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "iv.jdcloud-api.com";
        private const string serviceName = "iv";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        ///  查询视频审查模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetViTemplateResponse GetViTemplate(GetViTemplateRequest request) {
            return  new GetViTemplateExecutor().Client(this).Execute<GetViTemplateResponse, GetViTemplateResult, GetViTemplateRequest>(request);
        }
#else
        /// <summary>
        ///  查询视频审查模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetViTemplateResponse> GetViTemplate(GetViTemplateRequest request) {
            return await new GetViTemplateExecutor().Client(this).Execute<GetViTemplateResponse, GetViTemplateResult, GetViTemplateRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询视频审查作业摘要
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetViJobSummaryResponse GetViJobSummary(GetViJobSummaryRequest request) {
            return  new GetViJobSummaryExecutor().Client(this).Execute<GetViJobSummaryResponse, GetViJobSummaryResult, GetViJobSummaryRequest>(request);
        }
#else
        /// <summary>
        ///  查询视频审查作业摘要
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetViJobSummaryResponse> GetViJobSummary(GetViJobSummaryRequest request) {
            return await new GetViJobSummaryExecutor().Client(this).Execute<GetViJobSummaryResponse, GetViJobSummaryResult, GetViJobSummaryRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  提交视频审查作业
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SubmitViJobResponse SubmitViJob(SubmitViJobRequest request) {
            return  new SubmitViJobExecutor().Client(this).Execute<SubmitViJobResponse, SubmitViJobResult, SubmitViJobRequest>(request);
        }
#else
        /// <summary>
        ///  提交视频审查作业
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SubmitViJobResponse> SubmitViJob(SubmitViJobRequest request) {
            return await new SubmitViJobExecutor().Client(this).Execute<SubmitViJobResponse, SubmitViJobResult, SubmitViJobRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  修改视频审查模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateViTemplateResponse UpdateViTemplate(UpdateViTemplateRequest request) {
            return  new UpdateViTemplateExecutor().Client(this).Execute<UpdateViTemplateResponse, UpdateViTemplateResult, UpdateViTemplateRequest>(request);
        }
#else
        /// <summary>
        ///  修改视频审查模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateViTemplateResponse> UpdateViTemplate(UpdateViTemplateRequest request) {
            return await new UpdateViTemplateExecutor().Client(this).Execute<UpdateViTemplateResponse, UpdateViTemplateResult, UpdateViTemplateRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询视频审查模板列表。
        /// 支持过滤查询：
        ///   - templateId,eq 精确匹配模板ID，非必选
        /// 
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ListViTemplatesResponse ListViTemplates(ListViTemplatesRequest request) {
            return  new ListViTemplatesExecutor().Client(this).Execute<ListViTemplatesResponse, ListViTemplatesResult, ListViTemplatesRequest>(request);
        }
#else
        /// <summary>
        ///  查询视频审查模板列表。
        /// 支持过滤查询：
        ///   - templateId,eq 精确匹配模板ID，非必选
        /// 
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ListViTemplatesResponse> ListViTemplates(ListViTemplatesRequest request) {
            return await new ListViTemplatesExecutor().Client(this).Execute<ListViTemplatesResponse, ListViTemplatesResult, ListViTemplatesRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除视频审查模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteViTemplateResponse DeleteViTemplate(DeleteViTemplateRequest request) {
            return  new DeleteViTemplateExecutor().Client(this).Execute<DeleteViTemplateResponse, DeleteViTemplateResult, DeleteViTemplateRequest>(request);
        }
#else
        /// <summary>
        ///  删除视频审查模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteViTemplateResponse> DeleteViTemplate(DeleteViTemplateRequest request) {
            return await new DeleteViTemplateExecutor().Client(this).Execute<DeleteViTemplateResponse, DeleteViTemplateResult, DeleteViTemplateRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建视频审查模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateViTemplateResponse CreateViTemplate(CreateViTemplateRequest request) {
            return  new CreateViTemplateExecutor().Client(this).Execute<CreateViTemplateResponse, CreateViTemplateResult, CreateViTemplateRequest>(request);
        }
#else
        /// <summary>
        ///  创建视频审查模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateViTemplateResponse> CreateViTemplate(CreateViTemplateRequest request) {
            return await new CreateViTemplateExecutor().Client(this).Execute<CreateViTemplateResponse, CreateViTemplateResult, CreateViTemplateRequest>(request).ConfigureAwait(false);
        }
#endif

            /// <summary>
            ///  默认IvClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>ivClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>ivClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>ivClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造IvClient 对象
                ///</summary>
                IvClient Build();
            }

            /// <summary>
            ///  默认IvClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                ///  IvClient service client
                /// </summary>
                private  IvClient ivClient;

                /// <summary>
                ///  默认IvClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    ivClient = new IvClient();
                }

                /// <summary>
                ///  构造IvClient 对象
                ///</summary>
                public IvClient Build()
                {
                    if (ivClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        ivClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (ivClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("IvClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (ivClient.HttpRequestConfig == null)
                    {
                        ivClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (ivClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("IvClient build error: http request config not set");
                        }
                    }
                    return ivClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>ivClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    ivClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>ivClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    ivClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>ivClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    ivClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
