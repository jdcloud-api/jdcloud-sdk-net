/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD 密钥管理服务(Key Management Service) API
 * 基于硬件保护密钥的安全数据托管服务
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Kms.Apis;
using JDCloudSDK.Kms.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Kms.Client
{
    /// <summary>
    /// JDCLOUD 密钥管理服务(Key Management Service) API
    /// 基于硬件保护密钥的安全数据托管服务
    /// Kms Api 客户端
    ///</summary>
    public class KmsClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private KmsClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public KmsClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public KmsClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public KmsClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "kms.jdcloud-api.com";
        private const string serviceName = "kms";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 修改密钥配置，包括key的名称、用途、是否自动轮换和轮换周期等
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateKeyResponse UpdateKey(UpdateKeyRequest request) {
            return  new UpdateKeyExecutor().Client(this).Execute<UpdateKeyResponse, UpdateKeyResult, UpdateKeyRequest>(request);
        }
#else
        /// <summary>
        /// 修改密钥配置，包括key的名称、用途、是否自动轮换和轮换周期等
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateKeyResponse> UpdateKey(UpdateKeyRequest request) {
            return await new UpdateKeyExecutor().Client(this).Execute<UpdateKeyResponse, UpdateKeyResult, UpdateKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateSecretResponse CreateSecret(CreateSecretRequest request) {
            return  new CreateSecretExecutor().Client(this).Execute<CreateSecretResponse, CreateSecretResult, CreateSecretRequest>(request);
        }
#else
        /// <summary>
        /// 创建机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateSecretResponse> CreateSecret(CreateSecretRequest request) {
            return await new CreateSecretExecutor().Client(this).Execute<CreateSecretResponse, CreateSecretResult, CreateSecretRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取指定机密版本的详细信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeSecretVersionInfoResponse DescribeSecretVersionInfo(DescribeSecretVersionInfoRequest request) {
            return  new DescribeSecretVersionInfoExecutor().Client(this).Execute<DescribeSecretVersionInfoResponse, DescribeSecretVersionInfoResult, DescribeSecretVersionInfoRequest>(request);
        }
#else
        /// <summary>
        /// 获取指定机密版本的详细信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeSecretVersionInfoResponse> DescribeSecretVersionInfo(DescribeSecretVersionInfoRequest request) {
            return await new DescribeSecretVersionInfoExecutor().Client(this).Execute<DescribeSecretVersionInfoResponse, DescribeSecretVersionInfoResult, DescribeSecretVersionInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 禁用机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableSecretResponse DisableSecret(DisableSecretRequest request) {
            return  new DisableSecretExecutor().Client(this).Execute<DisableSecretResponse, DisableSecretResult, DisableSecretRequest>(request);
        }
#else
        /// <summary>
        /// 禁用机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableSecretResponse> DisableSecret(DisableSecretRequest request) {
            return await new DisableSecretExecutor().Client(this).Execute<DisableSecretResponse, DisableSecretResult, DisableSecretRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 禁用指定版本机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableSecretVersionResponse DisableSecretVersion(DisableSecretVersionRequest request) {
            return  new DisableSecretVersionExecutor().Client(this).Execute<DisableSecretVersionResponse, DisableSecretVersionResult, DisableSecretVersionRequest>(request);
        }
#else
        /// <summary>
        /// 禁用指定版本机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableSecretVersionResponse> DisableSecretVersion(DisableSecretVersionRequest request) {
            return await new DisableSecretVersionExecutor().Client(this).Execute<DisableSecretVersionResponse, DisableSecretVersionResult, DisableSecretVersionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量启用密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableKeysResponse EnableKeys(EnableKeysRequest request) {
            return  new EnableKeysExecutor().Client(this).Execute<EnableKeysResponse, EnableKeysResult, EnableKeysRequest>(request);
        }
#else
        /// <summary>
        /// 批量启用密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableKeysResponse> EnableKeys(EnableKeysRequest request) {
            return await new EnableKeysExecutor().Client(this).Execute<EnableKeysResponse, EnableKeysResult, EnableKeysRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 立即轮换密钥，自动轮换周期顺延
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RotateKeyResponse RotateKey(RotateKeyRequest request) {
            return  new RotateKeyExecutor().Client(this).Execute<RotateKeyResponse, RotateKeyResult, RotateKeyRequest>(request);
        }
#else
        /// <summary>
        /// 立即轮换密钥，自动轮换周期顺延
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RotateKeyResponse> RotateKey(RotateKeyRequest request) {
            return await new RotateKeyExecutor().Client(this).Execute<RotateKeyResponse, RotateKeyResult, RotateKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取版本详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeKeyDetailResponse DescribeKeyDetail(DescribeKeyDetailRequest request) {
            return  new DescribeKeyDetailExecutor().Client(this).Execute<DescribeKeyDetailResponse, DescribeKeyDetailResult, DescribeKeyDetailRequest>(request);
        }
#else
        /// <summary>
        /// 获取版本详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeKeyDetailResponse> DescribeKeyDetail(DescribeKeyDetailRequest request) {
            return await new DescribeKeyDetailExecutor().Client(this).Execute<DescribeKeyDetailResponse, DescribeKeyDetailResult, DescribeKeyDetailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 从KMS中获取一对数据密钥的明文/密文
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDataKeyResponse GetDataKey(GetDataKeyRequest request) {
            return  new GetDataKeyExecutor().Client(this).Execute<GetDataKeyResponse, GetDataKeyResult, GetDataKeyRequest>(request);
        }
#else
        /// <summary>
        /// 从KMS中获取一对数据密钥的明文/密文
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDataKeyResponse> GetDataKey(GetDataKeyRequest request) {
            return await new GetDataKeyExecutor().Client(this).Execute<GetDataKeyResponse, GetDataKeyResult, GetDataKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 取消删除指定版本密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CancelDeleteKeyVersionResponse CancelDeleteKeyVersion(CancelDeleteKeyVersionRequest request) {
            return  new CancelDeleteKeyVersionExecutor().Client(this).Execute<CancelDeleteKeyVersionResponse, CancelDeleteKeyVersionResult, CancelDeleteKeyVersionRequest>(request);
        }
#else
        /// <summary>
        /// 取消删除指定版本密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CancelDeleteKeyVersionResponse> CancelDeleteKeyVersion(CancelDeleteKeyVersionRequest request) {
            return await new CancelDeleteKeyVersionExecutor().Client(this).Execute<CancelDeleteKeyVersionResponse, CancelDeleteKeyVersionResult, CancelDeleteKeyVersionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量禁用密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableKeysResponse DisableKeys(DisableKeysRequest request) {
            return  new DisableKeysExecutor().Client(this).Execute<DisableKeysResponse, DisableKeysResult, DisableKeysRequest>(request);
        }
#else
        /// <summary>
        /// 批量禁用密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableKeysResponse> DisableKeys(DisableKeysRequest request) {
            return await new DisableKeysExecutor().Client(this).Execute<DisableKeysResponse, DisableKeysResult, DisableKeysRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 计划在以后的是个时间点删除指定版本密钥，默认为7天
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteKeyVersionResponse DeleteKeyVersion(DeleteKeyVersionRequest request) {
            return  new DeleteKeyVersionExecutor().Client(this).Execute<DeleteKeyVersionResponse, DeleteKeyVersionResult, DeleteKeyVersionRequest>(request);
        }
#else
        /// <summary>
        /// 计划在以后的是个时间点删除指定版本密钥，默认为7天
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteKeyVersionResponse> DeleteKeyVersion(DeleteKeyVersionRequest request) {
            return await new DeleteKeyVersionExecutor().Client(this).Execute<DeleteKeyVersionResponse, DeleteKeyVersionResult, DeleteKeyVersionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建一个CMK（用户主密钥），默认为启用状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateKeyResponse CreateKey(CreateKeyRequest request) {
            return  new CreateKeyExecutor().Client(this).Execute<CreateKeyResponse, CreateKeyResult, CreateKeyRequest>(request);
        }
#else
        /// <summary>
        /// 创建一个CMK（用户主密钥），默认为启用状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateKeyResponse> CreateKey(CreateKeyRequest request) {
            return await new CreateKeyExecutor().Client(this).Execute<CreateKeyResponse, CreateKeyResult, CreateKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取报表信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryReportInfoResponse QueryReportInfo(QueryReportInfoRequest request) {
            return  new QueryReportInfoExecutor().Client(this).Execute<QueryReportInfoResponse, QueryReportInfoResult, QueryReportInfoRequest>(request);
        }
#else
        /// <summary>
        /// 获取报表信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryReportInfoResponse> QueryReportInfo(QueryReportInfoRequest request) {
            return await new QueryReportInfoExecutor().Client(this).Execute<QueryReportInfoResponse, QueryReportInfoResult, QueryReportInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 使用密钥对数据进行加密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EncryptResponse Encrypt(EncryptRequest request) {
            return  new EncryptExecutor().Client(this).Execute<EncryptResponse, EncryptResult, EncryptRequest>(request);
        }
#else
        /// <summary>
        /// 使用密钥对数据进行加密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EncryptResponse> Encrypt(EncryptRequest request) {
            return await new EncryptExecutor().Client(this).Execute<EncryptResponse, EncryptResult, EncryptRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改机密描述
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateSecretResponse UpdateSecret(UpdateSecretRequest request) {
            return  new UpdateSecretExecutor().Client(this).Execute<UpdateSecretResponse, UpdateSecretResult, UpdateSecretRequest>(request);
        }
#else
        /// <summary>
        /// 修改机密描述
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateSecretResponse> UpdateSecret(UpdateSecretRequest request) {
            return await new UpdateSecretExecutor().Client(this).Execute<UpdateSecretResponse, UpdateSecretResult, UpdateSecretRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 启用指定版本密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableKeyVersionResponse EnableKeyVersion(EnableKeyVersionRequest request) {
            return  new EnableKeyVersionExecutor().Client(this).Execute<EnableKeyVersionResponse, EnableKeyVersionResult, EnableKeyVersionRequest>(request);
        }
#else
        /// <summary>
        /// 启用指定版本密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableKeyVersionResponse> EnableKeyVersion(EnableKeyVersionRequest request) {
            return await new EnableKeyVersionExecutor().Client(this).Execute<EnableKeyVersionResponse, EnableKeyVersionResult, EnableKeyVersionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改机密指定版本配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateSecretVersionResponse UpdateSecretVersion(UpdateSecretVersionRequest request) {
            return  new UpdateSecretVersionExecutor().Client(this).Execute<UpdateSecretVersionResponse, UpdateSecretVersionResult, UpdateSecretVersionRequest>(request);
        }
#else
        /// <summary>
        /// 修改机密指定版本配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateSecretVersionResponse> UpdateSecretVersion(UpdateSecretVersionRequest request) {
            return await new UpdateSecretVersionExecutor().Client(this).Execute<UpdateSecretVersionResponse, UpdateSecretVersionResult, UpdateSecretVersionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量禁用机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableSecretsResponse DisableSecrets(DisableSecretsRequest request) {
            return  new DisableSecretsExecutor().Client(this).Execute<DisableSecretsResponse, DisableSecretsResult, DisableSecretsRequest>(request);
        }
#else
        /// <summary>
        /// 批量禁用机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableSecretsResponse> DisableSecrets(DisableSecretsRequest request) {
            return await new DisableSecretsExecutor().Client(this).Execute<DisableSecretsResponse, DisableSecretsResult, DisableSecretsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 计划在以后的是个时间点删除密钥，默认为7天
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteKeyResponse DeleteKey(DeleteKeyRequest request) {
            return  new DeleteKeyExecutor().Client(this).Execute<DeleteKeyResponse, DeleteKeyResult, DeleteKeyRequest>(request);
        }
#else
        /// <summary>
        /// 计划在以后的是个时间点删除密钥，默认为7天
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteKeyResponse> DeleteKey(DeleteKeyRequest request) {
            return await new DeleteKeyExecutor().Client(this).Execute<DeleteKeyResponse, DeleteKeyResult, DeleteKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询申请状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeApplyStatusResponse DescribeApplyStatus(DescribeApplyStatusRequest request) {
            return  new DescribeApplyStatusExecutor().Client(this).Execute<DescribeApplyStatusResponse, DescribeApplyStatusResult, DescribeApplyStatusRequest>(request);
        }
#else
        /// <summary>
        /// 查询申请状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeApplyStatusResponse> DescribeApplyStatus(DescribeApplyStatusRequest request) {
            return await new DescribeApplyStatusExecutor().Client(this).Execute<DescribeApplyStatusResponse, DescribeApplyStatusResult, DescribeApplyStatusRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 取消删除密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CancelDeleteKeyResponse CancelDeleteKey(CancelDeleteKeyRequest request) {
            return  new CancelDeleteKeyExecutor().Client(this).Execute<CancelDeleteKeyResponse, CancelDeleteKeyResult, CancelDeleteKeyRequest>(request);
        }
#else
        /// <summary>
        /// 取消删除密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CancelDeleteKeyResponse> CancelDeleteKey(CancelDeleteKeyRequest request) {
            return await new CancelDeleteKeyExecutor().Client(this).Execute<CancelDeleteKeyResponse, CancelDeleteKeyResult, CancelDeleteKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取机密详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeSecretVersionListResponse DescribeSecretVersionList(DescribeSecretVersionListRequest request) {
            return  new DescribeSecretVersionListExecutor().Client(this).Execute<DescribeSecretVersionListResponse, DescribeSecretVersionListResult, DescribeSecretVersionListRequest>(request);
        }
#else
        /// <summary>
        /// 获取机密详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeSecretVersionListResponse> DescribeSecretVersionList(DescribeSecretVersionListRequest request) {
            return await new DescribeSecretVersionListExecutor().Client(this).Execute<DescribeSecretVersionListResponse, DescribeSecretVersionListResult, DescribeSecretVersionListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 禁用当前状态为&#x60;已启用&#x60;的密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableKeyResponse DisableKey(DisableKeyRequest request) {
            return  new DisableKeyExecutor().Client(this).Execute<DisableKeyResponse, DisableKeyResult, DisableKeyRequest>(request);
        }
#else
        /// <summary>
        /// 禁用当前状态为&#x60;已启用&#x60;的密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableKeyResponse> DisableKey(DisableKeyRequest request) {
            return await new DisableKeyExecutor().Client(this).Execute<DisableKeyResponse, DisableKeyResult, DisableKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 导入机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ImportSecretResponse ImportSecret(ImportSecretRequest request) {
            return  new ImportSecretExecutor().Client(this).Execute<ImportSecretResponse, ImportSecretResult, ImportSecretRequest>(request);
        }
#else
        /// <summary>
        /// 导入机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ImportSecretResponse> ImportSecret(ImportSecretRequest request) {
            return await new ImportSecretExecutor().Client(this).Execute<ImportSecretResponse, ImportSecretResult, ImportSecretRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取密钥详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeKeyResponse DescribeKey(DescribeKeyRequest request) {
            return  new DescribeKeyExecutor().Client(this).Execute<DescribeKeyResponse, DescribeKeyResult, DescribeKeyRequest>(request);
        }
#else
        /// <summary>
        /// 获取密钥详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeKeyResponse> DescribeKey(DescribeKeyRequest request) {
            return await new DescribeKeyExecutor().Client(this).Execute<DescribeKeyResponse, DescribeKeyResult, DescribeKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除指定版本机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteSecretVersionResponse DeleteSecretVersion(DeleteSecretVersionRequest request) {
            return  new DeleteSecretVersionExecutor().Client(this).Execute<DeleteSecretVersionResponse, DeleteSecretVersionResult, DeleteSecretVersionRequest>(request);
        }
#else
        /// <summary>
        /// 删除指定版本机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteSecretVersionResponse> DeleteSecretVersion(DeleteSecretVersionRequest request) {
            return await new DeleteSecretVersionExecutor().Client(this).Execute<DeleteSecretVersionResponse, DeleteSecretVersionResult, DeleteSecretVersionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取密钥列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeKeyListResponse DescribeKeyList(DescribeKeyListRequest request) {
            return  new DescribeKeyListExecutor().Client(this).Execute<DescribeKeyListResponse, DescribeKeyListResult, DescribeKeyListRequest>(request);
        }
#else
        /// <summary>
        /// 获取密钥列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeKeyListResponse> DescribeKeyList(DescribeKeyListRequest request) {
            return await new DescribeKeyListExecutor().Client(this).Execute<DescribeKeyListResponse, DescribeKeyListResult, DescribeKeyListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建机密新的版本，默认为已启用状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateSecretVersionResponse CreateSecretVersion(CreateSecretVersionRequest request) {
            return  new CreateSecretVersionExecutor().Client(this).Execute<CreateSecretVersionResponse, CreateSecretVersionResult, CreateSecretVersionRequest>(request);
        }
#else
        /// <summary>
        /// 创建机密新的版本，默认为已启用状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateSecretVersionResponse> CreateSecretVersion(CreateSecretVersionRequest request) {
            return await new CreateSecretVersionExecutor().Client(this).Execute<CreateSecretVersionResponse, CreateSecretVersionResult, CreateSecretVersionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 启用当前状态为&#x60;已禁用&#x60;的密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableKeyResponse EnableKey(EnableKeyRequest request) {
            return  new EnableKeyExecutor().Client(this).Execute<EnableKeyResponse, EnableKeyResult, EnableKeyRequest>(request);
        }
#else
        /// <summary>
        /// 启用当前状态为&#x60;已禁用&#x60;的密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableKeyResponse> EnableKey(EnableKeyRequest request) {
            return await new EnableKeyExecutor().Client(this).Execute<EnableKeyResponse, EnableKeyResult, EnableKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 使用密钥对数据进行解密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DecryptResponse Decrypt(DecryptRequest request) {
            return  new DecryptExecutor().Client(this).Execute<DecryptResponse, DecryptResult, DecryptRequest>(request);
        }
#else
        /// <summary>
        /// 使用密钥对数据进行解密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DecryptResponse> Decrypt(DecryptRequest request) {
            return await new DecryptExecutor().Client(this).Execute<DecryptResponse, DecryptResult, DecryptRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 启用指定版本机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableSecretVersionResponse EnableSecretVersion(EnableSecretVersionRequest request) {
            return  new EnableSecretVersionExecutor().Client(this).Execute<EnableSecretVersionResponse, EnableSecretVersionResult, EnableSecretVersionRequest>(request);
        }
#else
        /// <summary>
        /// 启用指定版本机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableSecretVersionResponse> EnableSecretVersion(EnableSecretVersionRequest request) {
            return await new EnableSecretVersionExecutor().Client(this).Execute<EnableSecretVersionResponse, EnableSecretVersionResult, EnableSecretVersionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量启用机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableSecretsResponse EnableSecrets(EnableSecretsRequest request) {
            return  new EnableSecretsExecutor().Client(this).Execute<EnableSecretsResponse, EnableSecretsResult, EnableSecretsRequest>(request);
        }
#else
        /// <summary>
        /// 批量启用机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableSecretsResponse> EnableSecrets(EnableSecretsRequest request) {
            return await new EnableSecretsExecutor().Client(this).Execute<EnableSecretsResponse, EnableSecretsResult, EnableSecretsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteSecretResponse DeleteSecret(DeleteSecretRequest request) {
            return  new DeleteSecretExecutor().Client(this).Execute<DeleteSecretResponse, DeleteSecretResult, DeleteSecretRequest>(request);
        }
#else
        /// <summary>
        /// 删除机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteSecretResponse> DeleteSecret(DeleteSecretRequest request) {
            return await new DeleteSecretExecutor().Client(this).Execute<DeleteSecretResponse, DeleteSecretResult, DeleteSecretRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 启用机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableSecretResponse EnableSecret(EnableSecretRequest request) {
            return  new EnableSecretExecutor().Client(this).Execute<EnableSecretResponse, EnableSecretResult, EnableSecretRequest>(request);
        }
#else
        /// <summary>
        /// 启用机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableSecretResponse> EnableSecret(EnableSecretRequest request) {
            return await new EnableSecretExecutor().Client(this).Execute<EnableSecretResponse, EnableSecretResult, EnableSecretRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 禁用指定版本密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableKeyVersionResponse DisableKeyVersion(DisableKeyVersionRequest request) {
            return  new DisableKeyVersionExecutor().Client(this).Execute<DisableKeyVersionResponse, DisableKeyVersionResult, DisableKeyVersionRequest>(request);
        }
#else
        /// <summary>
        /// 禁用指定版本密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableKeyVersionResponse> DisableKeyVersion(DisableKeyVersionRequest request) {
            return await new DisableKeyVersionExecutor().Client(this).Execute<DisableKeyVersionResponse, DisableKeyVersionResult, DisableKeyVersionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 导出机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ExportSecretResponse ExportSecret(ExportSecretRequest request) {
            return  new ExportSecretExecutor().Client(this).Execute<ExportSecretResponse, ExportSecretResult, ExportSecretRequest>(request);
        }
#else
        /// <summary>
        /// 导出机密
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ExportSecretResponse> ExportSecret(ExportSecretRequest request) {
            return await new ExportSecretExecutor().Client(this).Execute<ExportSecretResponse, ExportSecretResult, ExportSecretRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取机密列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeSecretListResponse DescribeSecretList(DescribeSecretListRequest request) {
            return  new DescribeSecretListExecutor().Client(this).Execute<DescribeSecretListResponse, DescribeSecretListResult, DescribeSecretListRequest>(request);
        }
#else
        /// <summary>
        /// 获取机密列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeSecretListResponse> DescribeSecretList(DescribeSecretListRequest request) {
            return await new DescribeSecretListExecutor().Client(this).Execute<DescribeSecretListResponse, DescribeSecretListResult, DescribeSecretListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 申请使用密钥管理服务（KMS）
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ApplyResponse Apply(ApplyRequest request) {
            return  new ApplyExecutor().Client(this).Execute<ApplyResponse, ApplyResult, ApplyRequest>(request);
        }
#else
        /// <summary>
        /// 申请使用密钥管理服务（KMS）
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ApplyResponse> Apply(ApplyRequest request) {
            return await new ApplyExecutor().Client(this).Execute<ApplyResponse, ApplyResult, ApplyRequest>(request);
        }
#endif

            /// <summary>
            ///  默认KmsClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>kmsClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>kmsClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>kmsClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造KmsClient 对象
                ///</summary>
                KmsClient Build();
            }

            /// <summary>
            ///  默认KmsClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// KmsClient service client
                /// </summary>
                private  KmsClient kmsClient;

                /// <summary>
                ///  默认KmsClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    kmsClient = new KmsClient();
                }

                /// <summary>
                ///  构造KmsClient 对象
                ///</summary>
                public KmsClient Build()
                {
                    if (kmsClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        kmsClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (kmsClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("KmsClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (kmsClient.HttpRequestConfig == null)
                    {
                        kmsClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (kmsClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("KmsClient build error: http request config not set");
                        }
                    }
                    return kmsClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>kmsClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    kmsClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>kmsClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    kmsClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>kmsClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    kmsClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
