/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JMR API
 * 提供大数据基础服务中JMR操作的相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Jmr.Apis;
using JDCloudSDK.Jmr.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Jmr.Client
{
    /// <summary>
    ///  JMR API
    ///  提供大数据基础服务中JMR操作的相关接口
    ///  Jmr Api 客户端
    ///</summary>
    public class JmrClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private JmrClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public JmrClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public JmrClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public JmrClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "jmr.jdcloud-api.com";
        private const string serviceName = "jmr";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        ///  删除作业
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteJobResponse DeleteJob(DeleteJobRequest request) {
            return  new DeleteJobExecutor().Client(this).Execute<DeleteJobResponse, DeleteJobResult, DeleteJobRequest>(request);
        }
#else
        /// <summary>
        ///  删除作业
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteJobResponse> DeleteJob(DeleteJobRequest request) {
            return await new DeleteJobExecutor().Client(this).Execute<DeleteJobResponse, DeleteJobResult, DeleteJobRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据userpin获取accessKey和accessKeySecret
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetAccessKeysResponse GetAccessKeys(GetAccessKeysRequest request) {
            return  new GetAccessKeysExecutor().Client(this).Execute<GetAccessKeysResponse, GetAccessKeysResult, GetAccessKeysRequest>(request);
        }
#else
        /// <summary>
        ///  根据userpin获取accessKey和accessKeySecret
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetAccessKeysResponse> GetAccessKeys(GetAccessKeysRequest request) {
            return await new GetAccessKeysExecutor().Client(this).Execute<GetAccessKeysResponse, GetAccessKeysResult, GetAccessKeysRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取定时任务详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetCronJobDetailResponse GetCronJobDetail(GetCronJobDetailRequest request) {
            return  new GetCronJobDetailExecutor().Client(this).Execute<GetCronJobDetailResponse, GetCronJobDetailResult, GetCronJobDetailRequest>(request);
        }
#else
        /// <summary>
        ///  获取定时任务详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetCronJobDetailResponse> GetCronJobDetail(GetCronJobDetailRequest request) {
            return await new GetCronJobDetailExecutor().Client(this).Execute<GetCronJobDetailResponse, GetCronJobDetailResult, GetCronJobDetailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取定时任务的某个作业的最后一次运行记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetLastCronJobTaskResponse GetLastCronJobTask(GetLastCronJobTaskRequest request) {
            return  new GetLastCronJobTaskExecutor().Client(this).Execute<GetLastCronJobTaskResponse, GetLastCronJobTaskResult, GetLastCronJobTaskRequest>(request);
        }
#else
        /// <summary>
        ///  获取定时任务的某个作业的最后一次运行记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetLastCronJobTaskResponse> GetLastCronJobTask(GetLastCronJobTaskRequest request) {
            return await new GetLastCronJobTaskExecutor().Client(this).Execute<GetLastCronJobTaskResponse, GetLastCronJobTaskResult, GetLastCronJobTaskRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建作业并执行
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateAndExcuteJobResponse CreateAndExcuteJob(CreateAndExcuteJobRequest request) {
            return  new CreateAndExcuteJobExecutor().Client(this).Execute<CreateAndExcuteJobResponse, CreateAndExcuteJobResult, CreateAndExcuteJobRequest>(request);
        }
#else
        /// <summary>
        ///  创建作业并执行
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateAndExcuteJobResponse> CreateAndExcuteJob(CreateAndExcuteJobRequest request) {
            return await new CreateAndExcuteJobExecutor().Client(this).Execute<CreateAndExcuteJobResponse, CreateAndExcuteJobResult, CreateAndExcuteJobRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  硬件配置信息列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetHardwareStackResponse GetHardwareStack(GetHardwareStackRequest request) {
            return  new GetHardwareStackExecutor().Client(this).Execute<GetHardwareStackResponse, GetHardwareStackResult, GetHardwareStackRequest>(request);
        }
#else
        /// <summary>
        ///  硬件配置信息列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetHardwareStackResponse> GetHardwareStack(GetHardwareStackRequest request) {
            return await new GetHardwareStackExecutor().Client(this).Execute<GetHardwareStackResponse, GetHardwareStackResult, GetHardwareStackRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取vpc集合
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryVpcsResponse QueryVpcs(QueryVpcsRequest request) {
            return  new QueryVpcsExecutor().Client(this).Execute<QueryVpcsResponse, QueryVpcsResult, QueryVpcsRequest>(request);
        }
#else
        /// <summary>
        ///  获取vpc集合
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryVpcsResponse> QueryVpcs(QueryVpcsRequest request) {
            return await new QueryVpcsExecutor().Client(this).Execute<QueryVpcsResponse, QueryVpcsResult, QueryVpcsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取作业类型列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetJobTypeListResponse GetJobTypeList(GetJobTypeListRequest request) {
            return  new GetJobTypeListExecutor().Client(this).Execute<GetJobTypeListResponse, GetJobTypeListResult, GetJobTypeListRequest>(request);
        }
#else
        /// <summary>
        ///  获取作业类型列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetJobTypeListResponse> GetJobTypeList(GetJobTypeListRequest request) {
            return await new GetJobTypeListExecutor().Client(this).Execute<GetJobTypeListResponse, GetJobTypeListResult, GetJobTypeListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询某一执行计划的某一个job的运行记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetCronJobTaskListByJobIdResponse GetCronJobTaskListByJobId(GetCronJobTaskListByJobIdRequest request) {
            return  new GetCronJobTaskListByJobIdExecutor().Client(this).Execute<GetCronJobTaskListByJobIdResponse, GetCronJobTaskListByJobIdResult, GetCronJobTaskListByJobIdRequest>(request);
        }
#else
        /// <summary>
        ///  查询某一执行计划的某一个job的运行记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetCronJobTaskListByJobIdResponse> GetCronJobTaskListByJobId(GetCronJobTaskListByJobIdRequest request) {
            return await new GetCronJobTaskListByJobIdExecutor().Client(this).Execute<GetCronJobTaskListByJobIdResponse, GetCronJobTaskListByJobIdResult, GetCronJobTaskListByJobIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  集群扩容
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ClusterExpansionResponse ClusterExpansion(ClusterExpansionRequest request) {
            return  new ClusterExpansionExecutor().Client(this).Execute<ClusterExpansionResponse, ClusterExpansionResult, ClusterExpansionRequest>(request);
        }
#else
        /// <summary>
        ///  集群扩容
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ClusterExpansionResponse> ClusterExpansion(ClusterExpansionRequest request) {
            return await new ClusterExpansionExecutor().Client(this).Execute<ClusterExpansionResponse, ClusterExpansionResult, ClusterExpansionRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除定时任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteCronJobResponse DeleteCronJob(DeleteCronJobRequest request) {
            return  new DeleteCronJobExecutor().Client(this).Execute<DeleteCronJobResponse, DeleteCronJobResult, DeleteCronJobRequest>(request);
        }
#else
        /// <summary>
        ///  删除定时任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteCronJobResponse> DeleteCronJob(DeleteCronJobRequest request) {
            return await new DeleteCronJobExecutor().Client(this).Execute<DeleteCronJobResponse, DeleteCronJobResult, DeleteCronJobRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除集群的hdfs文件
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteHdfsFileResponse DeleteHdfsFile(DeleteHdfsFileRequest request) {
            return  new DeleteHdfsFileExecutor().Client(this).Execute<DeleteHdfsFileResponse, DeleteHdfsFileResult, DeleteHdfsFileRequest>(request);
        }
#else
        /// <summary>
        ///  删除集群的hdfs文件
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteHdfsFileResponse> DeleteHdfsFile(DeleteHdfsFileRequest request) {
            return await new DeleteHdfsFileExecutor().Client(this).Execute<DeleteHdfsFileResponse, DeleteHdfsFileResult, DeleteHdfsFileRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查看作业明细
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ShowJobDetailsResponse ShowJobDetails(ShowJobDetailsRequest request) {
            return  new ShowJobDetailsExecutor().Client(this).Execute<ShowJobDetailsResponse, ShowJobDetailsResult, ShowJobDetailsRequest>(request);
        }
#else
        /// <summary>
        ///  查看作业明细
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ShowJobDetailsResponse> ShowJobDetails(ShowJobDetailsRequest request) {
            return await new ShowJobDetailsExecutor().Client(this).Execute<ShowJobDetailsResponse, ShowJobDetailsResult, ShowJobDetailsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取集群的部署作业数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetClusterCronJobCountResponse GetClusterCronJobCount(GetClusterCronJobCountRequest request) {
            return  new GetClusterCronJobCountExecutor().Client(this).Execute<GetClusterCronJobCountResponse, GetClusterCronJobCountResult, GetClusterCronJobCountRequest>(request);
        }
#else
        /// <summary>
        ///  获取集群的部署作业数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetClusterCronJobCountResponse> GetClusterCronJobCount(GetClusterCronJobCountRequest request) {
            return await new GetClusterCronJobCountExecutor().Client(this).Execute<GetClusterCronJobCountResponse, GetClusterCronJobCountResult, GetClusterCronJobCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  立即执行
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RunCronJobOnceResponse RunCronJobOnce(RunCronJobOnceRequest request) {
            return  new RunCronJobOnceExecutor().Client(this).Execute<RunCronJobOnceResponse, RunCronJobOnceResult, RunCronJobOnceRequest>(request);
        }
#else
        /// <summary>
        ///  立即执行
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RunCronJobOnceResponse> RunCronJobOnce(RunCronJobOnceRequest request) {
            return await new RunCronJobOnceExecutor().Client(this).Execute<RunCronJobOnceResponse, RunCronJobOnceResult, RunCronJobOnceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  集群扩容时，显示集群details
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetClusterDetailInfoResponse GetClusterDetailInfo(GetClusterDetailInfoRequest request) {
            return  new GetClusterDetailInfoExecutor().Client(this).Execute<GetClusterDetailInfoResponse, GetClusterDetailInfoResult, GetClusterDetailInfoRequest>(request);
        }
#else
        /// <summary>
        ///  集群扩容时，显示集群details
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetClusterDetailInfoResponse> GetClusterDetailInfo(GetClusterDetailInfoRequest request) {
            return await new GetClusterDetailInfoExecutor().Client(this).Execute<GetClusterDetailInfoResponse, GetClusterDetailInfoResult, GetClusterDetailInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建新集群
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateClusterInNewNetworkResponse CreateClusterInNewNetwork(CreateClusterInNewNetworkRequest request) {
            return  new CreateClusterInNewNetworkExecutor().Client(this).Execute<CreateClusterInNewNetworkResponse, CreateClusterInNewNetworkResult, CreateClusterInNewNetworkRequest>(request);
        }
#else
        /// <summary>
        ///  创建新集群
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateClusterInNewNetworkResponse> CreateClusterInNewNetwork(CreateClusterInNewNetworkRequest request) {
            return await new CreateClusterInNewNetworkExecutor().Client(this).Execute<CreateClusterInNewNetworkResponse, CreateClusterInNewNetworkResult, CreateClusterInNewNetworkRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  通过clusterId得到远程连接集群主节点的VNC URL
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetFirstServerVncUrlResponse GetFirstServerVncUrl(GetFirstServerVncUrlRequest request) {
            return  new GetFirstServerVncUrlExecutor().Client(this).Execute<GetFirstServerVncUrlResponse, GetFirstServerVncUrlResult, GetFirstServerVncUrlRequest>(request);
        }
#else
        /// <summary>
        ///  通过clusterId得到远程连接集群主节点的VNC URL
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetFirstServerVncUrlResponse> GetFirstServerVncUrl(GetFirstServerVncUrlRequest request) {
            return await new GetFirstServerVncUrlExecutor().Client(this).Execute<GetFirstServerVncUrlResponse, GetFirstServerVncUrlResult, GetFirstServerVncUrlRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  恢复定时任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ResumeCronJobResponse ResumeCronJob(ResumeCronJobRequest request) {
            return  new ResumeCronJobExecutor().Client(this).Execute<ResumeCronJobResponse, ResumeCronJobResult, ResumeCronJobRequest>(request);
        }
#else
        /// <summary>
        ///  恢复定时任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ResumeCronJobResponse> ResumeCronJob(ResumeCronJobRequest request) {
            return await new ResumeCronJobExecutor().Client(this).Execute<ResumeCronJobResponse, ResumeCronJobResult, ResumeCronJobRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  返回jmr版本列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetJmrVersionListResponse GetJmrVersionList(GetJmrVersionListRequest request) {
            return  new GetJmrVersionListExecutor().Client(this).Execute<GetJmrVersionListResponse, GetJmrVersionListResult, GetJmrVersionListRequest>(request);
        }
#else
        /// <summary>
        ///  返回jmr版本列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetJmrVersionListResponse> GetJmrVersionList(GetJmrVersionListRequest request) {
            return await new GetJmrVersionListExecutor().Client(this).Execute<GetJmrVersionListResponse, GetJmrVersionListResult, GetJmrVersionListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  校验执行计划名称是否可用
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public IsValidPlanNameResponse IsValidPlanName(IsValidPlanNameRequest request) {
            return  new IsValidPlanNameExecutor().Client(this).Execute<IsValidPlanNameResponse, IsValidPlanNameResult, IsValidPlanNameRequest>(request);
        }
#else
        /// <summary>
        ///  校验执行计划名称是否可用
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<IsValidPlanNameResponse> IsValidPlanName(IsValidPlanNameRequest request) {
            return await new IsValidPlanNameExecutor().Client(this).Execute<IsValidPlanNameResponse, IsValidPlanNameResult, IsValidPlanNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询集群随机码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryFloatingIpResponse QueryFloatingIp(QueryFloatingIpRequest request) {
            return  new QueryFloatingIpExecutor().Client(this).Execute<QueryFloatingIpResponse, QueryFloatingIpResult, QueryFloatingIpRequest>(request);
        }
#else
        /// <summary>
        ///  查询集群随机码
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryFloatingIpResponse> QueryFloatingIp(QueryFloatingIpRequest request) {
            return await new QueryFloatingIpExecutor().Client(this).Execute<QueryFloatingIpResponse, QueryFloatingIpResult, QueryFloatingIpRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  暂停定时任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public PauseCronJobResponse PauseCronJob(PauseCronJobRequest request) {
            return  new PauseCronJobExecutor().Client(this).Execute<PauseCronJobResponse, PauseCronJobResult, PauseCronJobRequest>(request);
        }
#else
        /// <summary>
        ///  暂停定时任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<PauseCronJobResponse> PauseCronJob(PauseCronJobRequest request) {
            return await new PauseCronJobExecutor().Client(this).Execute<PauseCronJobResponse, PauseCronJobResult, PauseCronJobRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取某一作业的运行记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetTaskListResponse GetTaskList(GetTaskListRequest request) {
            return  new GetTaskListExecutor().Client(this).Execute<GetTaskListResponse, GetTaskListResult, GetTaskListRequest>(request);
        }
#else
        /// <summary>
        ///  获取某一作业的运行记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetTaskListResponse> GetTaskList(GetTaskListRequest request) {
            return await new GetTaskListExecutor().Client(this).Execute<GetTaskListResponse, GetTaskListResult, GetTaskListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  计算集群扩容的价格
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CalculateExpansionPriceResponse CalculateExpansionPrice(CalculateExpansionPriceRequest request) {
            return  new CalculateExpansionPriceExecutor().Client(this).Execute<CalculateExpansionPriceResponse, CalculateExpansionPriceResult, CalculateExpansionPriceRequest>(request);
        }
#else
        /// <summary>
        ///  计算集群扩容的价格
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CalculateExpansionPriceResponse> CalculateExpansionPrice(CalculateExpansionPriceRequest request) {
            return await new CalculateExpansionPriceExecutor().Client(this).Execute<CalculateExpansionPriceResponse, CalculateExpansionPriceResult, CalculateExpansionPriceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取用户appKey和secretKey
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetKeyResponse GetKey(GetKeyRequest request) {
            return  new GetKeyExecutor().Client(this).Execute<GetKeyResponse, GetKeyResult, GetKeyRequest>(request);
        }
#else
        /// <summary>
        ///  获取用户appKey和secretKey
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetKeyResponse> GetKey(GetKeyRequest request) {
            return await new GetKeyExecutor().Client(this).Execute<GetKeyResponse, GetKeyResult, GetKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  新建或更新调度配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateCronJobResponse CreateCronJob(CreateCronJobRequest request) {
            return  new CreateCronJobExecutor().Client(this).Execute<CreateCronJobResponse, CreateCronJobResult, CreateCronJobRequest>(request);
        }
#else
        /// <summary>
        ///  新建或更新调度配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateCronJobResponse> CreateCronJob(CreateCronJobRequest request) {
            return await new CreateCronJobExecutor().Client(this).Execute<CreateCronJobResponse, CreateCronJobResult, CreateCronJobRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取计划中的任务(已经添加到quartz调度器的任务)
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryExecutingJobListResponse QueryExecutingJobList(QueryExecutingJobListRequest request) {
            return  new QueryExecutingJobListExecutor().Client(this).Execute<QueryExecutingJobListResponse, QueryExecutingJobListResult, QueryExecutingJobListRequest>(request);
        }
#else
        /// <summary>
        ///  获取计划中的任务(已经添加到quartz调度器的任务)
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryExecutingJobListResponse> QueryExecutingJobList(QueryExecutingJobListRequest request) {
            return await new QueryExecutingJobListExecutor().Client(this).Execute<QueryExecutingJobListResponse, QueryExecutingJobListResult, QueryExecutingJobListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取作业列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetJobListResponse GetJobList(GetJobListRequest request) {
            return  new GetJobListExecutor().Client(this).Execute<GetJobListResponse, GetJobListResult, GetJobListRequest>(request);
        }
#else
        /// <summary>
        ///  获取作业列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetJobListResponse> GetJobList(GetJobListRequest request) {
            return await new GetJobListExecutor().Client(this).Execute<GetJobListResponse, GetJobListResult, GetJobListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取工作流运行记录列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetWorkFlowTrackerListResponse GetWorkFlowTrackerList(GetWorkFlowTrackerListRequest request) {
            return  new GetWorkFlowTrackerListExecutor().Client(this).Execute<GetWorkFlowTrackerListResponse, GetWorkFlowTrackerListResult, GetWorkFlowTrackerListRequest>(request);
        }
#else
        /// <summary>
        ///  获取工作流运行记录列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetWorkFlowTrackerListResponse> GetWorkFlowTrackerList(GetWorkFlowTrackerListRequest request) {
            return await new GetWorkFlowTrackerListExecutor().Client(this).Execute<GetWorkFlowTrackerListResponse, GetWorkFlowTrackerListResult, GetWorkFlowTrackerListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  校验作业名称是否有效
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public IsValidJobNameResponse IsValidJobName(IsValidJobNameRequest request) {
            return  new IsValidJobNameExecutor().Client(this).Execute<IsValidJobNameResponse, IsValidJobNameResult, IsValidJobNameRequest>(request);
        }
#else
        /// <summary>
        ///  校验作业名称是否有效
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<IsValidJobNameResponse> IsValidJobName(IsValidJobNameRequest request) {
            return await new IsValidJobNameExecutor().Client(this).Execute<IsValidJobNameResponse, IsValidJobNameResult, IsValidJobNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  逻辑删除
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteClusterResponse DeleteCluster(DeleteClusterRequest request) {
            return  new DeleteClusterExecutor().Client(this).Execute<DeleteClusterResponse, DeleteClusterResult, DeleteClusterRequest>(request);
        }
#else
        /// <summary>
        ///  逻辑删除
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteClusterResponse> DeleteCluster(DeleteClusterRequest request) {
            return await new DeleteClusterExecutor().Client(this).Execute<DeleteClusterResponse, DeleteClusterResult, DeleteClusterRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询集群详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ShowClusterDetailsResponse ShowClusterDetails(ShowClusterDetailsRequest request) {
            return  new ShowClusterDetailsExecutor().Client(this).Execute<ShowClusterDetailsResponse, ShowClusterDetailsResult, ShowClusterDetailsRequest>(request);
        }
#else
        /// <summary>
        ///  查询集群详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ShowClusterDetailsResponse> ShowClusterDetails(ShowClusterDetailsRequest request) {
            return await new ShowClusterDetailsExecutor().Client(this).Execute<ShowClusterDetailsResponse, ShowClusterDetailsResult, ShowClusterDetailsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取主机规格列表(过滤掉低内存的规格, 低于4核全部去掉。)
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetInstanceListResponse GetInstanceList(GetInstanceListRequest request) {
            return  new GetInstanceListExecutor().Client(this).Execute<GetInstanceListResponse, GetInstanceListResult, GetInstanceListRequest>(request);
        }
#else
        /// <summary>
        ///  获取主机规格列表(过滤掉低内存的规格, 低于4核全部去掉。)
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetInstanceListResponse> GetInstanceList(GetInstanceListRequest request) {
            return await new GetInstanceListExecutor().Client(this).Execute<GetInstanceListResponse, GetInstanceListResult, GetInstanceListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询用户集群列表及相关服务的一些信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public IdataClusterResponse IdataCluster(IdataClusterRequest request) {
            return  new IdataClusterExecutor().Client(this).Execute<IdataClusterResponse, IdataClusterResult, IdataClusterRequest>(request);
        }
#else
        /// <summary>
        ///  查询用户集群列表及相关服务的一些信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<IdataClusterResponse> IdataCluster(IdataClusterRequest request) {
            return await new IdataClusterExecutor().Client(this).Execute<IdataClusterResponse, IdataClusterResult, IdataClusterRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  修改作业信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyJobResponse ModifyJob(ModifyJobRequest request) {
            return  new ModifyJobExecutor().Client(this).Execute<ModifyJobResponse, ModifyJobResult, ModifyJobRequest>(request);
        }
#else
        /// <summary>
        ///  修改作业信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyJobResponse> ModifyJob(ModifyJobRequest request) {
            return await new ModifyJobExecutor().Client(this).Execute<ModifyJobResponse, ModifyJobResult, ModifyJobRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询VpcSubnet集合
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryVpcSubnetsResponse QueryVpcSubnets(QueryVpcSubnetsRequest request) {
            return  new QueryVpcSubnetsExecutor().Client(this).Execute<QueryVpcSubnetsResponse, QueryVpcSubnetsResult, QueryVpcSubnetsRequest>(request);
        }
#else
        /// <summary>
        ///  查询VpcSubnet集合
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryVpcSubnetsResponse> QueryVpcSubnets(QueryVpcSubnetsRequest request) {
            return await new QueryVpcSubnetsExecutor().Client(this).Execute<QueryVpcSubnetsResponse, QueryVpcSubnetsResult, QueryVpcSubnetsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  计算集群价格
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CalculateClusterPriceResponse CalculateClusterPrice(CalculateClusterPriceRequest request) {
            return  new CalculateClusterPriceExecutor().Client(this).Execute<CalculateClusterPriceResponse, CalculateClusterPriceResult, CalculateClusterPriceRequest>(request);
        }
#else
        /// <summary>
        ///  计算集群价格
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CalculateClusterPriceResponse> CalculateClusterPrice(CalculateClusterPriceRequest request) {
            return await new CalculateClusterPriceExecutor().Client(this).Execute<CalculateClusterPriceResponse, CalculateClusterPriceResult, CalculateClusterPriceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取软件清单信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetSoftwareAndVersionInfoResponse GetSoftwareAndVersionInfo(GetSoftwareAndVersionInfoRequest request) {
            return  new GetSoftwareAndVersionInfoExecutor().Client(this).Execute<GetSoftwareAndVersionInfoResponse, GetSoftwareAndVersionInfoResult, GetSoftwareAndVersionInfoRequest>(request);
        }
#else
        /// <summary>
        ///  获取软件清单信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetSoftwareAndVersionInfoResponse> GetSoftwareAndVersionInfo(GetSoftwareAndVersionInfoRequest request) {
            return await new GetSoftwareAndVersionInfoExecutor().Client(this).Execute<GetSoftwareAndVersionInfoResponse, GetSoftwareAndVersionInfoResult, GetSoftwareAndVersionInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除运行记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteWorkFlowTrackerResponse DeleteWorkFlowTracker(DeleteWorkFlowTrackerRequest request) {
            return  new DeleteWorkFlowTrackerExecutor().Client(this).Execute<DeleteWorkFlowTrackerResponse, DeleteWorkFlowTrackerResult, DeleteWorkFlowTrackerRequest>(request);
        }
#else
        /// <summary>
        ///  删除运行记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteWorkFlowTrackerResponse> DeleteWorkFlowTracker(DeleteWorkFlowTrackerRequest request) {
            return await new DeleteWorkFlowTrackerExecutor().Client(this).Execute<DeleteWorkFlowTrackerResponse, DeleteWorkFlowTrackerResult, DeleteWorkFlowTrackerRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  释放集群
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ReleaseClusterResponse ReleaseCluster(ReleaseClusterRequest request) {
            return  new ReleaseClusterExecutor().Client(this).Execute<ReleaseClusterResponse, ReleaseClusterResult, ReleaseClusterRequest>(request);
        }
#else
        /// <summary>
        ///  释放集群
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ReleaseClusterResponse> ReleaseCluster(ReleaseClusterRequest request) {
            return await new ReleaseClusterExecutor().Client(this).Execute<ReleaseClusterResponse, ReleaseClusterResult, ReleaseClusterRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  软件配置信息列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetPropertyValueResponse GetPropertyValue(GetPropertyValueRequest request) {
            return  new GetPropertyValueExecutor().Client(this).Execute<GetPropertyValueResponse, GetPropertyValueResult, GetPropertyValueRequest>(request);
        }
#else
        /// <summary>
        ///  软件配置信息列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetPropertyValueResponse> GetPropertyValue(GetPropertyValueRequest request) {
            return await new GetPropertyValueExecutor().Client(this).Execute<GetPropertyValueResponse, GetPropertyValueResult, GetPropertyValueRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  用户名校验
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ValidateUserResponse ValidateUser(ValidateUserRequest request) {
            return  new ValidateUserExecutor().Client(this).Execute<ValidateUserResponse, ValidateUserResult, ValidateUserRequest>(request);
        }
#else
        /// <summary>
        ///  用户名校验
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ValidateUserResponse> ValidateUser(ValidateUserRequest request) {
            return await new ValidateUserExecutor().Client(this).Execute<ValidateUserResponse, ValidateUserResult, ValidateUserRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除工作流
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteWorkFlowResponse DeleteWorkFlow(DeleteWorkFlowRequest request) {
            return  new DeleteWorkFlowExecutor().Client(this).Execute<DeleteWorkFlowResponse, DeleteWorkFlowResult, DeleteWorkFlowRequest>(request);
        }
#else
        /// <summary>
        ///  删除工作流
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteWorkFlowResponse> DeleteWorkFlow(DeleteWorkFlowRequest request) {
            return await new DeleteWorkFlowExecutor().Client(this).Execute<DeleteWorkFlowResponse, DeleteWorkFlowResult, DeleteWorkFlowRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取剩余可创建资源数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetAvaliableNumResponse GetAvaliableNum(GetAvaliableNumRequest request) {
            return  new GetAvaliableNumExecutor().Client(this).Execute<GetAvaliableNumResponse, GetAvaliableNumResult, GetAvaliableNumRequest>(request);
        }
#else
        /// <summary>
        ///  获取剩余可创建资源数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetAvaliableNumResponse> GetAvaliableNum(GetAvaliableNumRequest request) {
            return await new GetAvaliableNumExecutor().Client(this).Execute<GetAvaliableNumResponse, GetAvaliableNumResult, GetAvaliableNumRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  续费
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RenewBillingOrderResponse RenewBillingOrder(RenewBillingOrderRequest request) {
            return  new RenewBillingOrderExecutor().Client(this).Execute<RenewBillingOrderResponse, RenewBillingOrderResult, RenewBillingOrderRequest>(request);
        }
#else
        /// <summary>
        ///  续费
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RenewBillingOrderResponse> RenewBillingOrder(RenewBillingOrderRequest request) {
            return await new RenewBillingOrderExecutor().Client(this).Execute<RenewBillingOrderResponse, RenewBillingOrderResult, RenewBillingOrderRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  验证输入的集群名称是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ValidateNameResponse ValidateName(ValidateNameRequest request) {
            return  new ValidateNameExecutor().Client(this).Execute<ValidateNameResponse, ValidateNameResult, ValidateNameRequest>(request);
        }
#else
        /// <summary>
        ///  验证输入的集群名称是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ValidateNameResponse> ValidateName(ValidateNameRequest request) {
            return await new ValidateNameExecutor().Client(this).Execute<ValidateNameResponse, ValidateNameResult, ValidateNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  服务存活状态监控明细数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public MonitorDetailsResponse MonitorDetails(MonitorDetailsRequest request) {
            return  new MonitorDetailsExecutor().Client(this).Execute<MonitorDetailsResponse, MonitorDetailsResult, MonitorDetailsRequest>(request);
        }
#else
        /// <summary>
        ///  服务存活状态监控明细数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<MonitorDetailsResponse> MonitorDetails(MonitorDetailsRequest request) {
            return await new MonitorDetailsExecutor().Client(this).Execute<MonitorDetailsResponse, MonitorDetailsResult, MonitorDetailsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取软件清单信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetSoftwareInfoResponse GetSoftwareInfo(GetSoftwareInfoRequest request) {
            return  new GetSoftwareInfoExecutor().Client(this).Execute<GetSoftwareInfoResponse, GetSoftwareInfoResult, GetSoftwareInfoRequest>(request);
        }
#else
        /// <summary>
        ///  获取软件清单信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetSoftwareInfoResponse> GetSoftwareInfo(GetSoftwareInfoRequest request) {
            return await new GetSoftwareInfoExecutor().Client(this).Execute<GetSoftwareInfoResponse, GetSoftwareInfoResult, GetSoftwareInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查看工作流详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public WfInstanceDetailResponse WfInstanceDetail(WfInstanceDetailRequest request) {
            return  new WfInstanceDetailExecutor().Client(this).Execute<WfInstanceDetailResponse, WfInstanceDetailResult, WfInstanceDetailRequest>(request);
        }
#else
        /// <summary>
        ///  查看工作流详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<WfInstanceDetailResponse> WfInstanceDetail(WfInstanceDetailRequest request) {
            return await new WfInstanceDetailExecutor().Client(this).Execute<WfInstanceDetailResponse, WfInstanceDetailResult, WfInstanceDetailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取集群的作业数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetClusterJobCountResponse GetClusterJobCount(GetClusterJobCountRequest request) {
            return  new GetClusterJobCountExecutor().Client(this).Execute<GetClusterJobCountResponse, GetClusterJobCountResult, GetClusterJobCountRequest>(request);
        }
#else
        /// <summary>
        ///  获取集群的作业数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetClusterJobCountResponse> GetClusterJobCount(GetClusterJobCountRequest request) {
            return await new GetClusterJobCountExecutor().Client(this).Execute<GetClusterJobCountResponse, GetClusterJobCountResult, GetClusterJobCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询server的剩余配额
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryServerQuotaResponse QueryServerQuota(QueryServerQuotaRequest request) {
            return  new QueryServerQuotaExecutor().Client(this).Execute<QueryServerQuotaResponse, QueryServerQuotaResult, QueryServerQuotaRequest>(request);
        }
#else
        /// <summary>
        ///  查询server的剩余配额
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryServerQuotaResponse> QueryServerQuota(QueryServerQuotaRequest request) {
            return await new QueryServerQuotaExecutor().Client(this).Execute<QueryServerQuotaResponse, QueryServerQuotaResult, QueryServerQuotaRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  当前监控的服务列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public MonitorServiceListResponse MonitorServiceList(MonitorServiceListRequest request) {
            return  new MonitorServiceListExecutor().Client(this).Execute<MonitorServiceListResponse, MonitorServiceListResult, MonitorServiceListRequest>(request);
        }
#else
        /// <summary>
        ///  当前监控的服务列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<MonitorServiceListResponse> MonitorServiceList(MonitorServiceListRequest request) {
            return await new MonitorServiceListExecutor().Client(this).Execute<MonitorServiceListResponse, MonitorServiceListResult, MonitorServiceListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  运行工作流
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RunWorkFlowResponse RunWorkFlow(RunWorkFlowRequest request) {
            return  new RunWorkFlowExecutor().Client(this).Execute<RunWorkFlowResponse, RunWorkFlowResult, RunWorkFlowRequest>(request);
        }
#else
        /// <summary>
        ///  运行工作流
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RunWorkFlowResponse> RunWorkFlow(RunWorkFlowRequest request) {
            return await new RunWorkFlowExecutor().Client(this).Execute<RunWorkFlowResponse, RunWorkFlowResult, RunWorkFlowRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建作业
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateJobResponse CreateJob(CreateJobRequest request) {
            return  new CreateJobExecutor().Client(this).Execute<CreateJobResponse, CreateJobResult, CreateJobRequest>(request);
        }
#else
        /// <summary>
        ///  创建作业
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateJobResponse> CreateJob(CreateJobRequest request) {
            return await new CreateJobExecutor().Client(this).Execute<CreateJobResponse, CreateJobResult, CreateJobRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  保存工作流
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SaveWorkFlowResponse SaveWorkFlow(SaveWorkFlowRequest request) {
            return  new SaveWorkFlowExecutor().Client(this).Execute<SaveWorkFlowResponse, SaveWorkFlowResult, SaveWorkFlowRequest>(request);
        }
#else
        /// <summary>
        ///  保存工作流
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SaveWorkFlowResponse> SaveWorkFlow(SaveWorkFlowRequest request) {
            return await new SaveWorkFlowExecutor().Client(this).Execute<SaveWorkFlowResponse, SaveWorkFlowResult, SaveWorkFlowRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取工作流列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetWorkFlowListResponse GetWorkFlowList(GetWorkFlowListRequest request) {
            return  new GetWorkFlowListExecutor().Client(this).Execute<GetWorkFlowListResponse, GetWorkFlowListResult, GetWorkFlowListRequest>(request);
        }
#else
        /// <summary>
        ///  获取工作流列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetWorkFlowListResponse> GetWorkFlowList(GetWorkFlowListRequest request) {
            return await new GetWorkFlowListExecutor().Client(this).Execute<GetWorkFlowListResponse, GetWorkFlowListResult, GetWorkFlowListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取定时任务的运行记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetCronJobTaskListResponse GetCronJobTaskList(GetCronJobTaskListRequest request) {
            return  new GetCronJobTaskListExecutor().Client(this).Execute<GetCronJobTaskListResponse, GetCronJobTaskListResult, GetCronJobTaskListRequest>(request);
        }
#else
        /// <summary>
        ///  获取定时任务的运行记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetCronJobTaskListResponse> GetCronJobTaskList(GetCronJobTaskListRequest request) {
            return await new GetCronJobTaskListExecutor().Client(this).Execute<GetCronJobTaskListResponse, GetCronJobTaskListResult, GetCronJobTaskListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取执行计划列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetCronJobListResponse GetCronJobList(GetCronJobListRequest request) {
            return  new GetCronJobListExecutor().Client(this).Execute<GetCronJobListResponse, GetCronJobListResult, GetCronJobListRequest>(request);
        }
#else
        /// <summary>
        ///  获取执行计划列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetCronJobListResponse> GetCronJobList(GetCronJobListRequest request) {
            return await new GetCronJobListExecutor().Client(this).Execute<GetCronJobListResponse, GetCronJobListResult, GetCronJobListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  修改执行计划
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyCronJobResponse ModifyCronJob(ModifyCronJobRequest request) {
            return  new ModifyCronJobExecutor().Client(this).Execute<ModifyCronJobResponse, ModifyCronJobResult, ModifyCronJobRequest>(request);
        }
#else
        /// <summary>
        ///  修改执行计划
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyCronJobResponse> ModifyCronJob(ModifyCronJobRequest request) {
            return await new ModifyCronJobExecutor().Client(this).Execute<ModifyCronJobResponse, ModifyCronJobResult, ModifyCronJobRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  执行task
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ExecuteJobResponse ExecuteJob(ExecuteJobRequest request) {
            return  new ExecuteJobExecutor().Client(this).Execute<ExecuteJobResponse, ExecuteJobResult, ExecuteJobRequest>(request);
        }
#else
        /// <summary>
        ///  执行task
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ExecuteJobResponse> ExecuteJob(ExecuteJobRequest request) {
            return await new ExecuteJobExecutor().Client(this).Execute<ExecuteJobResponse, ExecuteJobResult, ExecuteJobRequest>(request);
        }
#endif

            /// <summary>
            ///  默认JmrClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>jmrClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>jmrClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>jmrClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造JmrClient 对象
                ///</summary>
                JmrClient Build();
            }

            /// <summary>
            ///  默认JmrClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                ///  JmrClient service client
                /// </summary>
                private  JmrClient jmrClient;

                /// <summary>
                ///  默认JmrClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    jmrClient = new JmrClient();
                }

                /// <summary>
                ///  构造JmrClient 对象
                ///</summary>
                public JmrClient Build()
                {
                    if (jmrClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        jmrClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (jmrClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("JmrClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (jmrClient.HttpRequestConfig == null)
                    {
                        jmrClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (jmrClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("JmrClient build error: http request config not set");
                        }
                    }
                    return jmrClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>jmrClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    jmrClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>jmrClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    jmrClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>jmrClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    jmrClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
