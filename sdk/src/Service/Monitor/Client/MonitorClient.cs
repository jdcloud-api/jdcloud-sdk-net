/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 云监控
 * 云监控相关接口，主要包含监控规则的增删改查，以及监控项数据的查询
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Monitor.Apis;
using JDCloudSDK.Monitor.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Monitor.Client
{
    /// <summary>
    ///  云监控
    ///  云监控相关接口，主要包含监控规则的增删改查，以及监控项数据的查询
    ///  Monitor Api 客户端
    ///</summary>
    public class MonitorClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private MonitorClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public MonitorClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public MonitorClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public MonitorClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "monitor.jdcloud-api.com";
        private const string serviceName = "monitor";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        ///  批量删除已创建的报警规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteAlarmsResponse DeleteAlarms(DeleteAlarmsRequest request) {
            return  new DeleteAlarmsExecutor().Client(this).Execute<DeleteAlarmsResponse, DeleteAlarmsResult, DeleteAlarmsRequest>(request);
        }
#else
        /// <summary>
        ///  批量删除已创建的报警规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteAlarmsResponse> DeleteAlarms(DeleteAlarmsRequest request) {
            return await new DeleteAlarmsExecutor().Client(this).Execute<DeleteAlarmsResponse, DeleteAlarmsResult, DeleteAlarmsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查看某资源的监控数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeMetricDataResponse DescribeMetricData(DescribeMetricDataRequest request) {
            return  new DescribeMetricDataExecutor().Client(this).Execute<DescribeMetricDataResponse, DescribeMetricDataResult, DescribeMetricDataRequest>(request);
        }
#else
        /// <summary>
        ///  查看某资源的监控数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeMetricDataResponse> DescribeMetricData(DescribeMetricDataRequest request) {
            return await new DescribeMetricDataExecutor().Client(this).Execute<DescribeMetricDataResponse, DescribeMetricDataResult, DescribeMetricDataRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  自定义监控数据上报接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public PutMetricDataResponse PutMetricData(PutMetricDataRequest request) {
            return  new PutMetricDataExecutor().Client(this).Execute<PutMetricDataResponse, PutMetricDataResult, PutMetricDataRequest>(request);
        }
#else
        /// <summary>
        ///  自定义监控数据上报接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<PutMetricDataResponse> PutMetricData(PutMetricDataRequest request) {
            return await new PutMetricDataExecutor().Client(this).Execute<PutMetricDataResponse, PutMetricDataResult, PutMetricDataRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  修改已创建的报警规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateAlarmResponse UpdateAlarm(UpdateAlarmRequest request) {
            return  new UpdateAlarmExecutor().Client(this).Execute<UpdateAlarmResponse, UpdateAlarmResult, UpdateAlarmRequest>(request);
        }
#else
        /// <summary>
        ///  修改已创建的报警规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateAlarmResponse> UpdateAlarm(UpdateAlarmRequest request) {
            return await new UpdateAlarmExecutor().Client(this).Execute<UpdateAlarmResponse, UpdateAlarmResult, UpdateAlarmRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询报警历史
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAlarmHistoryResponse DescribeAlarmHistory(DescribeAlarmHistoryRequest request) {
            return  new DescribeAlarmHistoryExecutor().Client(this).Execute<DescribeAlarmHistoryResponse, DescribeAlarmHistoryResult, DescribeAlarmHistoryRequest>(request);
        }
#else
        /// <summary>
        ///  查询报警历史
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAlarmHistoryResponse> DescribeAlarmHistory(DescribeAlarmHistoryRequest request) {
            return await new DescribeAlarmHistoryExecutor().Client(this).Execute<DescribeAlarmHistoryResponse, DescribeAlarmHistoryResult, DescribeAlarmHistoryRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据产品线查询可用监控项列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeMetricsResponse DescribeMetrics(DescribeMetricsRequest request) {
            return  new DescribeMetricsExecutor().Client(this).Execute<DescribeMetricsResponse, DescribeMetricsResult, DescribeMetricsRequest>(request);
        }
#else
        /// <summary>
        ///  根据产品线查询可用监控项列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeMetricsResponse> DescribeMetrics(DescribeMetricsRequest request) {
            return await new DescribeMetricsExecutor().Client(this).Execute<DescribeMetricsResponse, DescribeMetricsResult, DescribeMetricsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  禁用报警规则。报警规则禁用后，将停止探测实例的监控项数据。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisableAlarmResponse DisableAlarm(DisableAlarmRequest request) {
            return  new DisableAlarmExecutor().Client(this).Execute<DisableAlarmResponse, DisableAlarmResult, DisableAlarmRequest>(request);
        }
#else
        /// <summary>
        ///  禁用报警规则。报警规则禁用后，将停止探测实例的监控项数据。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisableAlarmResponse> DisableAlarm(DisableAlarmRequest request) {
            return await new DisableAlarmExecutor().Client(this).Execute<DisableAlarmResponse, DisableAlarmResult, DisableAlarmRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建报警规则，可以为某一个实例创建报警规则，也可以为多个实例同时创建报警规则。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateAlarmResponse CreateAlarm(CreateAlarmRequest request) {
            return  new CreateAlarmExecutor().Client(this).Execute<CreateAlarmResponse, CreateAlarmResult, CreateAlarmRequest>(request);
        }
#else
        /// <summary>
        ///  创建报警规则，可以为某一个实例创建报警规则，也可以为多个实例同时创建报警规则。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateAlarmResponse> CreateAlarm(CreateAlarmRequest request) {
            return await new CreateAlarmExecutor().Client(this).Execute<CreateAlarmResponse, CreateAlarmResult, CreateAlarmRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询监控规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAlarmsResponse DescribeAlarms(DescribeAlarmsRequest request) {
            return  new DescribeAlarmsExecutor().Client(this).Execute<DescribeAlarmsResponse, DescribeAlarmsResult, DescribeAlarmsRequest>(request);
        }
#else
        /// <summary>
        ///  查询监控规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAlarmsResponse> DescribeAlarms(DescribeAlarmsRequest request) {
            return await new DescribeAlarmsExecutor().Client(this).Execute<DescribeAlarmsResponse, DescribeAlarmsResult, DescribeAlarmsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询规则详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAlarmsByIDResponse DescribeAlarmsByID(DescribeAlarmsByIDRequest request) {
            return  new DescribeAlarmsByIDExecutor().Client(this).Execute<DescribeAlarmsByIDResponse, DescribeAlarmsByIDResult, DescribeAlarmsByIDRequest>(request);
        }
#else
        /// <summary>
        ///  查询规则详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAlarmsByIDResponse> DescribeAlarmsByID(DescribeAlarmsByIDRequest request) {
            return await new DescribeAlarmsByIDExecutor().Client(this).Execute<DescribeAlarmsByIDResponse, DescribeAlarmsByIDResult, DescribeAlarmsByIDRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询可用创建监控规则的指标列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeMetricsForCreateAlarmResponse DescribeMetricsForCreateAlarm(DescribeMetricsForCreateAlarmRequest request) {
            return  new DescribeMetricsForCreateAlarmExecutor().Client(this).Execute<DescribeMetricsForCreateAlarmResponse, DescribeMetricsForCreateAlarmResult, DescribeMetricsForCreateAlarmRequest>(request);
        }
#else
        /// <summary>
        ///  查询可用创建监控规则的指标列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeMetricsForCreateAlarmResponse> DescribeMetricsForCreateAlarm(DescribeMetricsForCreateAlarmRequest request) {
            return await new DescribeMetricsForCreateAlarmExecutor().Client(this).Execute<DescribeMetricsForCreateAlarmResponse, DescribeMetricsForCreateAlarmResult, DescribeMetricsForCreateAlarmRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  启用报警规则，当客户的报警规则处于停止状态时，可以使用此接口启用报警规则。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public EnableAlarmResponse EnableAlarm(EnableAlarmRequest request) {
            return  new EnableAlarmExecutor().Client(this).Execute<EnableAlarmResponse, EnableAlarmResult, EnableAlarmRequest>(request);
        }
#else
        /// <summary>
        ///  启用报警规则，当客户的报警规则处于停止状态时，可以使用此接口启用报警规则。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<EnableAlarmResponse> EnableAlarm(EnableAlarmRequest request) {
            return await new EnableAlarmExecutor().Client(this).Execute<EnableAlarmResponse, EnableAlarmResult, EnableAlarmRequest>(request);
        }
#endif

            /// <summary>
            ///  默认MonitorClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>monitorClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>monitorClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>monitorClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造MonitorClient 对象
                ///</summary>
                MonitorClient Build();
            }

            /// <summary>
            ///  默认MonitorClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                ///  MonitorClient service client
                /// </summary>
                private  MonitorClient monitorClient;

                /// <summary>
                ///  默认MonitorClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    monitorClient = new MonitorClient();
                }

                /// <summary>
                ///  构造MonitorClient 对象
                ///</summary>
                public MonitorClient Build()
                {
                    if (monitorClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        monitorClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (monitorClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("MonitorClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (monitorClient.HttpRequestConfig == null)
                    {
                        monitorClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (monitorClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("MonitorClient build error: http request config not set");
                        }
                    }
                    return monitorClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>monitorClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    monitorClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>monitorClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    monitorClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>monitorClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    monitorClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
