/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 云部署
 * 云部署应用、部署组、部署任务相关的接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Deploy.Apis;
using JDCloudSDK.Deploy.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Deploy.Client
{
    /// <summary>
    ///  云部署
    ///  云部署应用、部署组、部署任务相关的接口
    ///  Deploy Api 客户端
    ///</summary>
    public class DeployClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private DeployClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public DeployClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public DeployClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public DeployClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.9
        ///</summary>
        public const string ClientVersion = "1.0.9";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "deploy.jdcloud-api.com";
        private const string serviceName = "deploy";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        ///  查询一个应用的信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAppResponse DescribeApp(DescribeAppRequest request) {
            return  new DescribeAppExecutor().Client(this).Execute<DescribeAppResponse, DescribeAppResult, DescribeAppRequest>(request);
        }
#else
        /// <summary>
        ///  查询一个应用的信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAppResponse> DescribeApp(DescribeAppRequest request) {
            return await new DescribeAppExecutor().Client(this).Execute<DescribeAppResponse, DescribeAppResult, DescribeAppRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建部署任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateDeployResponse CreateDeploy(CreateDeployRequest request) {
            return  new CreateDeployExecutor().Client(this).Execute<CreateDeployResponse, CreateDeployResult, CreateDeployRequest>(request);
        }
#else
        /// <summary>
        ///  创建部署任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateDeployResponse> CreateDeploy(CreateDeployRequest request) {
            return await new CreateDeployExecutor().Client(this).Execute<CreateDeployResponse, CreateDeployResult, CreateDeployRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询一个部署任务详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeDeployResponse DescribeDeploy(DescribeDeployRequest request) {
            return  new DescribeDeployExecutor().Client(this).Execute<DescribeDeployResponse, DescribeDeployResult, DescribeDeployRequest>(request);
        }
#else
        /// <summary>
        ///  查询一个部署任务详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeDeployResponse> DescribeDeploy(DescribeDeployRequest request) {
            return await new DescribeDeployExecutor().Client(this).Execute<DescribeDeployResponse, DescribeDeployResult, DescribeDeployRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  批量查询应用的信息，此接口支持分页查询，默认每页20条
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAppsResponse DescribeApps(DescribeAppsRequest request) {
            return  new DescribeAppsExecutor().Client(this).Execute<DescribeAppsResponse, DescribeAppsResult, DescribeAppsRequest>(request);
        }
#else
        /// <summary>
        ///  批量查询应用的信息，此接口支持分页查询，默认每页20条
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAppsResponse> DescribeApps(DescribeAppsRequest request) {
            return await new DescribeAppsExecutor().Client(this).Execute<DescribeAppsResponse, DescribeAppsResult, DescribeAppsRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  批量查询部署组的信息，此接口支持分页查询，默认每页20条
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeGroupsResponse DescribeGroups(DescribeGroupsRequest request) {
            return  new DescribeGroupsExecutor().Client(this).Execute<DescribeGroupsResponse, DescribeGroupsResult, DescribeGroupsRequest>(request);
        }
#else
        /// <summary>
        ///  批量查询部署组的信息，此接口支持分页查询，默认每页20条
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeGroupsResponse> DescribeGroups(DescribeGroupsRequest request) {
            return await new DescribeGroupsExecutor().Client(this).Execute<DescribeGroupsResponse, DescribeGroupsResult, DescribeGroupsRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询一个部署组的信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeGroupResponse DescribeGroup(DescribeGroupRequest request) {
            return  new DescribeGroupExecutor().Client(this).Execute<DescribeGroupResponse, DescribeGroupResult, DescribeGroupRequest>(request);
        }
#else
        /// <summary>
        ///  查询一个部署组的信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeGroupResponse> DescribeGroup(DescribeGroupRequest request) {
            return await new DescribeGroupExecutor().Client(this).Execute<DescribeGroupResponse, DescribeGroupResult, DescribeGroupRequest>(request).ConfigureAwait(false);
        }
#endif

            /// <summary>
            ///  默认DeployClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>deployClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>deployClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>deployClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造DeployClient 对象
                ///</summary>
                DeployClient Build();
            }

            /// <summary>
            ///  默认DeployClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                ///  DeployClient service client
                /// </summary>
                private  DeployClient deployClient;

                /// <summary>
                ///  默认DeployClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    deployClient = new DeployClient();
                }

                /// <summary>
                ///  构造DeployClient 对象
                ///</summary>
                public DeployClient Build()
                {
                    if (deployClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        deployClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (deployClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("DeployClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (deployClient.HttpRequestConfig == null)
                    {
                        deployClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (deployClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("DeployClient build error: http request config not set");
                        }
                    }
                    return deployClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>deployClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    deployClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>deployClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    deployClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>deployClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    deployClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
