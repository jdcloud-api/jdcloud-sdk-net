/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云解析OpenAPI接口
 * 京东云解析OpenAPI接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Clouddnsservice.Apis;
using JDCloudSDK.Clouddnsservice.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Clouddnsservice.Client
{
    /// <summary>
    /// 京东云解析OpenAPI接口
    /// 京东云解析OpenAPI接口
    /// Clouddnsservice Api 客户端
    ///</summary>
    public class ClouddnsserviceClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private ClouddnsserviceClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public ClouddnsserviceClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public ClouddnsserviceClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public ClouddnsserviceClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "clouddnsservice.jdcloud-api.com";
        private const string serviceName = "clouddnsservice";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 域名的监控项修改
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateMonitorResponse UpdateMonitor(UpdateMonitorRequest request) {
            return  new UpdateMonitorExecutor().Client(this).Execute<UpdateMonitorResponse, UpdateMonitorResult, UpdateMonitorRequest>(request);
        }
#else
        /// <summary>
        /// 域名的监控项修改
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateMonitorResponse> UpdateMonitor(UpdateMonitorRequest request) {
            return await new UpdateMonitorExecutor().Client(this).Execute<UpdateMonitorResponse, UpdateMonitorResult, UpdateMonitorRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询用户名下的主域名列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDomainsResponse GetDomains(GetDomainsRequest request) {
            return  new GetDomainsExecutor().Client(this).Execute<GetDomainsResponse, GetDomainsResult, GetDomainsRequest>(request);
        }
#else
        /// <summary>
        /// 查询用户名下的主域名列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDomainsResponse> GetDomains(GetDomainsRequest request) {
            return await new GetDomainsExecutor().Client(this).Execute<GetDomainsResponse, GetDomainsResult, GetDomainsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加子域名的某些特定监控对象为监控项
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddMonitorTargetResponse AddMonitorTarget(AddMonitorTargetRequest request) {
            return  new AddMonitorTargetExecutor().Client(this).Execute<AddMonitorTargetResponse, AddMonitorTargetResult, AddMonitorTargetRequest>(request);
        }
#else
        /// <summary>
        /// 添加子域名的某些特定监控对象为监控项
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddMonitorTargetResponse> AddMonitorTarget(AddMonitorTargetRequest request) {
            return await new AddMonitorTargetExecutor().Client(this).Execute<AddMonitorTargetResponse, AddMonitorTargetResult, AddMonitorTargetRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改主域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DomainUpdateResponse DomainUpdate(DomainUpdateRequest request) {
            return  new DomainUpdateExecutor().Client(this).Execute<DomainUpdateResponse, DomainUpdateResult, DomainUpdateRequest>(request);
        }
#else
        /// <summary>
        /// 修改主域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DomainUpdateResponse> DomainUpdate(DomainUpdateRequest request) {
            return await new DomainUpdateExecutor().Client(this).Execute<DomainUpdateResponse, DomainUpdateResult, DomainUpdateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 启用、停用、删除主域名下某些解析记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RROperateResponse RROperate(RROperateRequest request) {
            return  new RROperateExecutor().Client(this).Execute<RROperateResponse, RROperateResult, RROperateRequest>(request);
        }
#else
        /// <summary>
        /// 启用、停用、删除主域名下某些解析记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RROperateResponse> RROperate(RROperateRequest request) {
            return await new RROperateExecutor().Client(this).Execute<RROperateResponse, RROperateResult, RROperateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 监控项的操作，包括：删除，暂停，启动, 手动恢复, 手动切换
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public OpMonitorResponse OpMonitor(OpMonitorRequest request) {
            return  new OpMonitorExecutor().Client(this).Execute<OpMonitorResponse, OpMonitorResult, OpMonitorRequest>(request);
        }
#else
        /// <summary>
        /// 监控项的操作，包括：删除，暂停，启动, 手动恢复, 手动切换
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<OpMonitorResponse> OpMonitor(OpMonitorRequest request) {
            return await new OpMonitorExecutor().Client(this).Execute<OpMonitorResponse, OpMonitorResult, OpMonitorRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询子域名的可用监控对象
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetTargetsResponse GetTargets(GetTargetsRequest request) {
            return  new GetTargetsExecutor().Client(this).Execute<GetTargetsResponse, GetTargetsResult, GetTargetsRequest>(request);
        }
#else
        /// <summary>
        /// 查询子域名的可用监控对象
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetTargetsResponse> GetTargets(GetTargetsRequest request) {
            return await new GetTargetsExecutor().Client(this).Execute<GetTargetsResponse, GetTargetsResult, GetTargetsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改主域名的某个解析记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RRUpdateResponse RRUpdate(RRUpdateRequest request) {
            return  new RRUpdateExecutor().Client(this).Execute<RRUpdateResponse, RRUpdateResult, RRUpdateRequest>(request);
        }
#else
        /// <summary>
        /// 修改主域名的某个解析记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RRUpdateResponse> RRUpdate(RRUpdateRequest request) {
            return await new RRUpdateExecutor().Client(this).Execute<RRUpdateResponse, RRUpdateResult, RRUpdateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除主域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DomainDelResponse DomainDel(DomainDelRequest request) {
            return  new DomainDelExecutor().Client(this).Execute<DomainDelResponse, DomainDelResult, DomainDelRequest>(request);
        }
#else
        /// <summary>
        /// 删除主域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DomainDelResponse> DomainDel(DomainDelRequest request) {
            return await new DomainDelExecutor().Client(this).Execute<DomainDelResponse, DomainDelResult, DomainDelRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加子域名的监控项，采用默认配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddMonitorResponse AddMonitor(AddMonitorRequest request) {
            return  new AddMonitorExecutor().Client(this).Execute<AddMonitorResponse, AddMonitorResult, AddMonitorRequest>(request);
        }
#else
        /// <summary>
        /// 添加子域名的监控项，采用默认配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddMonitorResponse> AddMonitor(AddMonitorRequest request) {
            return await new AddMonitorExecutor().Client(this).Execute<AddMonitorResponse, AddMonitorResult, AddMonitorRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询DNS所有解析线路
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetViewTreeResponse GetViewTree(GetViewTreeRequest request) {
            return  new GetViewTreeExecutor().Client(this).Execute<GetViewTreeResponse, GetViewTreeResult, GetViewTreeRequest>(request);
        }
#else
        /// <summary>
        /// 查询DNS所有解析线路
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetViewTreeResponse> GetViewTree(GetViewTreeRequest request) {
            return await new GetViewTreeExecutor().Client(this).Execute<GetViewTreeResponse, GetViewTreeResult, GetViewTreeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查看主域名的监控项的配置以及状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetMonitorResponse GetMonitor(GetMonitorRequest request) {
            return  new GetMonitorExecutor().Client(this).Execute<GetMonitorResponse, GetMonitorResult, GetMonitorRequest>(request);
        }
#else
        /// <summary>
        /// 查看主域名的监控项的配置以及状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetMonitorResponse> GetMonitor(GetMonitorRequest request) {
            return await new GetMonitorExecutor().Client(this).Execute<GetMonitorResponse, GetMonitorResult, GetMonitorRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加主域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DomainAddResponse DomainAdd(DomainAddRequest request) {
            return  new DomainAddExecutor().Client(this).Execute<DomainAddResponse, DomainAddResult, DomainAddRequest>(request);
        }
#else
        /// <summary>
        /// 添加主域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DomainAddResponse> DomainAdd(DomainAddRequest request) {
            return await new DomainAddExecutor().Client(this).Execute<DomainAddResponse, DomainAddResult, DomainAddRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加域名解析
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RRAddResponse RRAdd(RRAddRequest request) {
            return  new RRAddExecutor().Client(this).Execute<RRAddResponse, RRAddResult, RRAddRequest>(request);
        }
#else
        /// <summary>
        /// 添加域名解析
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RRAddResponse> RRAdd(RRAddRequest request) {
            return await new RRAddExecutor().Client(this).Execute<RRAddResponse, RRAddResult, RRAddRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查看域名的查询流量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDomainStatisticsResponse GetDomainStatistics(GetDomainStatisticsRequest request) {
            return  new GetDomainStatisticsExecutor().Client(this).Execute<GetDomainStatisticsResponse, GetDomainStatisticsResult, GetDomainStatisticsRequest>(request);
        }
#else
        /// <summary>
        /// 查看域名的查询流量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDomainStatisticsResponse> GetDomainStatistics(GetDomainStatisticsRequest request) {
            return await new GetDomainStatisticsExecutor().Client(this).Execute<GetDomainStatisticsResponse, GetDomainStatisticsResult, GetDomainStatisticsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 主域名的监控项的报警信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public MonitorAlarmInfoResponse MonitorAlarmInfo(MonitorAlarmInfoRequest request) {
            return  new MonitorAlarmInfoExecutor().Client(this).Execute<MonitorAlarmInfoResponse, MonitorAlarmInfoResult, MonitorAlarmInfoRequest>(request);
        }
#else
        /// <summary>
        /// 主域名的监控项的报警信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<MonitorAlarmInfoResponse> MonitorAlarmInfo(MonitorAlarmInfoRequest request) {
            return await new MonitorAlarmInfoExecutor().Client(this).Execute<MonitorAlarmInfoResponse, MonitorAlarmInfoResult, MonitorAlarmInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询某个主域名的解析记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SearchRRResponse SearchRR(SearchRRRequest request) {
            return  new SearchRRExecutor().Client(this).Execute<SearchRRResponse, SearchRRResult, SearchRRRequest>(request);
        }
#else
        /// <summary>
        /// 查询某个主域名的解析记录
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SearchRRResponse> SearchRR(SearchRRRequest request) {
            return await new SearchRRExecutor().Client(this).Execute<SearchRRResponse, SearchRRResult, SearchRRRequest>(request);
        }
#endif

            /// <summary>
            ///  默认ClouddnsserviceClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>clouddnsserviceClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>clouddnsserviceClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>clouddnsserviceClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造ClouddnsserviceClient 对象
                ///</summary>
                ClouddnsserviceClient Build();
            }

            /// <summary>
            ///  默认ClouddnsserviceClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// ClouddnsserviceClient service client
                /// </summary>
                private  ClouddnsserviceClient clouddnsserviceClient;

                /// <summary>
                ///  默认ClouddnsserviceClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    clouddnsserviceClient = new ClouddnsserviceClient();
                }

                /// <summary>
                ///  构造ClouddnsserviceClient 对象
                ///</summary>
                public ClouddnsserviceClient Build()
                {
                    if (clouddnsserviceClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        clouddnsserviceClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (clouddnsserviceClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("ClouddnsserviceClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (clouddnsserviceClient.HttpRequestConfig == null)
                    {
                        clouddnsserviceClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (clouddnsserviceClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("ClouddnsserviceClient build error: http request config not set");
                        }
                    }
                    return clouddnsserviceClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>clouddnsserviceClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    clouddnsserviceClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>clouddnsserviceClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    clouddnsserviceClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>clouddnsserviceClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    clouddnsserviceClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
