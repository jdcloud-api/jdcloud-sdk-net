/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD 态势感知 API
 * 提供基础威胁检测和入侵告警服务接口。
 *
 * OpenAPI spec version: v2
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Csa.Apis;
using JDCloudSDK.Csa.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Csa.Client
{
    /// <summary>
    /// JDCLOUD 态势感知 API
    /// 提供基础威胁检测和入侵告警服务接口。
    /// Csa Api 客户端
    ///</summary>
    public class CsaClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private CsaClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public CsaClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public CsaClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public CsaClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v2";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "csa.jdcloud-api.com";
        private const string serviceName = "csa";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 查看资产详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAssetFixedIpsResponse QueryAssetFixedIps(QueryAssetFixedIpsRequest request) {
            return  new QueryAssetFixedIpsExecutor().Client(this).Execute<QueryAssetFixedIpsResponse, QueryAssetFixedIpsResult, QueryAssetFixedIpsRequest>(request);
        }
#else
        /// <summary>
        /// 查看资产详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAssetFixedIpsResponse> QueryAssetFixedIps(QueryAssetFixedIpsRequest request) {
            return await new QueryAssetFixedIpsExecutor().Client(this).Execute<QueryAssetFixedIpsResponse, QueryAssetFixedIpsResult, QueryAssetFixedIpsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询安全事件发展趋势
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsEventTrendResponse QueryStatisticsEventTrend(QueryStatisticsEventTrendRequest request) {
            return  new QueryStatisticsEventTrendExecutor().Client(this).Execute<QueryStatisticsEventTrendResponse, QueryStatisticsEventTrendResult, QueryStatisticsEventTrendRequest>(request);
        }
#else
        /// <summary>
        /// 查询安全事件发展趋势
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsEventTrendResponse> QueryStatisticsEventTrend(QueryStatisticsEventTrendRequest request) {
            return await new QueryStatisticsEventTrendExecutor().Client(this).Execute<QueryStatisticsEventTrendResponse, QueryStatisticsEventTrendResult, QueryStatisticsEventTrendRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询弱点事件数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWeakEventsCountResponse QueryWeakEventsCount(QueryWeakEventsCountRequest request) {
            return  new QueryWeakEventsCountExecutor().Client(this).Execute<QueryWeakEventsCountResponse, QueryWeakEventsCountResult, QueryWeakEventsCountRequest>(request);
        }
#else
        /// <summary>
        /// 查询弱点事件数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWeakEventsCountResponse> QueryWeakEventsCount(QueryWeakEventsCountRequest request) {
            return await new QueryWeakEventsCountExecutor().Client(this).Execute<QueryWeakEventsCountResponse, QueryWeakEventsCountResult, QueryWeakEventsCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询安全引擎启动覆盖率
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryDefensesStartupCoverageResponse QueryDefensesStartupCoverage(QueryDefensesStartupCoverageRequest request) {
            return  new QueryDefensesStartupCoverageExecutor().Client(this).Execute<QueryDefensesStartupCoverageResponse, QueryDefensesStartupCoverageResult, QueryDefensesStartupCoverageRequest>(request);
        }
#else
        /// <summary>
        /// 查询安全引擎启动覆盖率
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryDefensesStartupCoverageResponse> QueryDefensesStartupCoverage(QueryDefensesStartupCoverageRequest request) {
            return await new QueryDefensesStartupCoverageExecutor().Client(this).Execute<QueryDefensesStartupCoverageResponse, QueryDefensesStartupCoverageResult, QueryDefensesStartupCoverageRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询单一攻击事件数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QuerySingleAttacksCountResponse QuerySingleAttacksCount(QuerySingleAttacksCountRequest request) {
            return  new QuerySingleAttacksCountExecutor().Client(this).Execute<QuerySingleAttacksCountResponse, QuerySingleAttacksCountResult, QuerySingleAttacksCountRequest>(request);
        }
#else
        /// <summary>
        /// 查询单一攻击事件数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QuerySingleAttacksCountResponse> QuerySingleAttacksCount(QuerySingleAttacksCountRequest request) {
            return await new QuerySingleAttacksCountExecutor().Client(this).Execute<QuerySingleAttacksCountResponse, QuerySingleAttacksCountResult, QuerySingleAttacksCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询漏洞资产列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QuerWeakEventsFixedIpsResponse QuerWeakEventsFixedIps(QuerWeakEventsFixedIpsRequest request) {
            return  new QuerWeakEventsFixedIpsExecutor().Client(this).Execute<QuerWeakEventsFixedIpsResponse, QuerWeakEventsFixedIpsResult, QuerWeakEventsFixedIpsRequest>(request);
        }
#else
        /// <summary>
        /// 查询漏洞资产列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QuerWeakEventsFixedIpsResponse> QuerWeakEventsFixedIps(QuerWeakEventsFixedIpsRequest request) {
            return await new QuerWeakEventsFixedIpsExecutor().Client(this).Execute<QuerWeakEventsFixedIpsResponse, QuerWeakEventsFixedIpsResult, QuerWeakEventsFixedIpsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询弱点事件数对比
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWeakEventsTrendResponse QueryWeakEventsTrend(QueryWeakEventsTrendRequest request) {
            return  new QueryWeakEventsTrendExecutor().Client(this).Execute<QueryWeakEventsTrendResponse, QueryWeakEventsTrendResult, QueryWeakEventsTrendRequest>(request);
        }
#else
        /// <summary>
        /// 查询弱点事件数对比
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWeakEventsTrendResponse> QueryWeakEventsTrend(QueryWeakEventsTrendRequest request) {
            return await new QueryWeakEventsTrendExecutor().Client(this).Execute<QueryWeakEventsTrendResponse, QueryWeakEventsTrendResult, QueryWeakEventsTrendRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询单一攻击事件安全事件
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QuerySingleAttackResponse QuerySingleAttack(QuerySingleAttackRequest request) {
            return  new QuerySingleAttackExecutor().Client(this).Execute<QuerySingleAttackResponse, QuerySingleAttackResult, QuerySingleAttackRequest>(request);
        }
#else
        /// <summary>
        /// 查询单一攻击事件安全事件
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QuerySingleAttackResponse> QuerySingleAttack(QuerySingleAttackRequest request) {
            return await new QuerySingleAttackExecutor().Client(this).Execute<QuerySingleAttackResponse, QuerySingleAttackResult, QuerySingleAttackRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询定向攻击事件安全事件统计接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryTargetAttacksNameCountStatResponse QueryTargetAttacksNameCountStat(QueryTargetAttacksNameCountStatRequest request) {
            return  new QueryTargetAttacksNameCountStatExecutor().Client(this).Execute<QueryTargetAttacksNameCountStatResponse, QueryTargetAttacksNameCountStatResult, QueryTargetAttacksNameCountStatRequest>(request);
        }
#else
        /// <summary>
        /// 查询定向攻击事件安全事件统计接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryTargetAttacksNameCountStatResponse> QueryTargetAttacksNameCountStat(QueryTargetAttacksNameCountStatRequest request) {
            return await new QueryTargetAttacksNameCountStatExecutor().Client(this).Execute<QueryTargetAttacksNameCountStatResponse, QueryTargetAttacksNameCountStatResult, QueryTargetAttacksNameCountStatRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询安全引擎启动覆盖率对比
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryDefensesCoverageTrendResponse QueryDefensesCoverageTrend(QueryDefensesCoverageTrendRequest request) {
            return  new QueryDefensesCoverageTrendExecutor().Client(this).Execute<QueryDefensesCoverageTrendResponse, QueryDefensesCoverageTrendResult, QueryDefensesCoverageTrendRequest>(request);
        }
#else
        /// <summary>
        /// 查询安全引擎启动覆盖率对比
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryDefensesCoverageTrendResponse> QueryDefensesCoverageTrend(QueryDefensesCoverageTrendRequest request) {
            return await new QueryDefensesCoverageTrendExecutor().Client(this).Execute<QueryDefensesCoverageTrendResponse, QueryDefensesCoverageTrendResult, QueryDefensesCoverageTrendRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询定向攻击事件数对比
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryTargetAttacksTrendResponse QueryTargetAttacksTrend(QueryTargetAttacksTrendRequest request) {
            return  new QueryTargetAttacksTrendExecutor().Client(this).Execute<QueryTargetAttacksTrendResponse, QueryTargetAttacksTrendResult, QueryTargetAttacksTrendRequest>(request);
        }
#else
        /// <summary>
        /// 查询定向攻击事件数对比
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryTargetAttacksTrendResponse> QueryTargetAttacksTrend(QueryTargetAttacksTrendRequest request) {
            return await new QueryTargetAttacksTrendExecutor().Client(this).Execute<QueryTargetAttacksTrendResponse, QueryTargetAttacksTrendResult, QueryTargetAttacksTrendRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询漏洞列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QuerWeakEventsResponse QuerWeakEvents(QuerWeakEventsRequest request) {
            return  new QuerWeakEventsExecutor().Client(this).Execute<QuerWeakEventsResponse, QuerWeakEventsResult, QuerWeakEventsRequest>(request);
        }
#else
        /// <summary>
        /// 查询漏洞列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QuerWeakEventsResponse> QuerWeakEvents(QuerWeakEventsRequest request) {
            return await new QuerWeakEventsExecutor().Client(this).Execute<QuerWeakEventsResponse, QuerWeakEventsResult, QuerWeakEventsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询单一攻击事件安全事件统计接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QuerySingleAttacksNameCountStatResponse QuerySingleAttacksNameCountStat(QuerySingleAttacksNameCountStatRequest request) {
            return  new QuerySingleAttacksNameCountStatExecutor().Client(this).Execute<QuerySingleAttacksNameCountStatResponse, QuerySingleAttacksNameCountStatResult, QuerySingleAttacksNameCountStatRequest>(request);
        }
#else
        /// <summary>
        /// 查询单一攻击事件安全事件统计接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QuerySingleAttacksNameCountStatResponse> QuerySingleAttacksNameCountStat(QuerySingleAttacksNameCountStatRequest request) {
            return await new QuerySingleAttacksNameCountStatExecutor().Client(this).Execute<QuerySingleAttacksNameCountStatResponse, QuerySingleAttacksNameCountStatResult, QuerySingleAttacksNameCountStatRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询单一攻击事件安全事件列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QuerySingleAttacksResponse QuerySingleAttacks(QuerySingleAttacksRequest request) {
            return  new QuerySingleAttacksExecutor().Client(this).Execute<QuerySingleAttacksResponse, QuerySingleAttacksResult, QuerySingleAttacksRequest>(request);
        }
#else
        /// <summary>
        /// 查询单一攻击事件安全事件列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QuerySingleAttacksResponse> QuerySingleAttacks(QuerySingleAttacksRequest request) {
            return await new QuerySingleAttacksExecutor().Client(this).Execute<QuerySingleAttacksResponse, QuerySingleAttacksResult, QuerySingleAttacksRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询定向攻击事件详情接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryTargetAttackResponse QueryTargetAttack(QueryTargetAttackRequest request) {
            return  new QueryTargetAttackExecutor().Client(this).Execute<QueryTargetAttackResponse, QueryTargetAttackResult, QueryTargetAttackRequest>(request);
        }
#else
        /// <summary>
        /// 查询定向攻击事件详情接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryTargetAttackResponse> QueryTargetAttack(QueryTargetAttackRequest request) {
            return await new QueryTargetAttackExecutor().Client(this).Execute<QueryTargetAttackResponse, QueryTargetAttackResult, QueryTargetAttackRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询TopN计数接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsTopCountResponse QueryStatisticsTopCount(QueryStatisticsTopCountRequest request) {
            return  new QueryStatisticsTopCountExecutor().Client(this).Execute<QueryStatisticsTopCountResponse, QueryStatisticsTopCountResult, QueryStatisticsTopCountRequest>(request);
        }
#else
        /// <summary>
        /// 查询TopN计数接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsTopCountResponse> QueryStatisticsTopCount(QueryStatisticsTopCountRequest request) {
            return await new QueryStatisticsTopCountExecutor().Client(this).Execute<QueryStatisticsTopCountResponse, QueryStatisticsTopCountResult, QueryStatisticsTopCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询报警通知规则列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryNotifyRulesResponse QueryNotifyRules(QueryNotifyRulesRequest request) {
            return  new QueryNotifyRulesExecutor().Client(this).Execute<QueryNotifyRulesResponse, QueryNotifyRulesResult, QueryNotifyRulesRequest>(request);
        }
#else
        /// <summary>
        /// 查询报警通知规则列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryNotifyRulesResponse> QueryNotifyRules(QueryNotifyRulesRequest request) {
            return await new QueryNotifyRulesExecutor().Client(this).Execute<QueryNotifyRulesResponse, QueryNotifyRulesResult, QueryNotifyRulesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询定向攻击事件列表接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryTargetAttacksResponse QueryTargetAttacks(QueryTargetAttacksRequest request) {
            return  new QueryTargetAttacksExecutor().Client(this).Execute<QueryTargetAttacksResponse, QueryTargetAttacksResult, QueryTargetAttacksRequest>(request);
        }
#else
        /// <summary>
        /// 查询定向攻击事件列表接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryTargetAttacksResponse> QueryTargetAttacks(QueryTargetAttacksRequest request) {
            return await new QueryTargetAttacksExecutor().Client(this).Execute<QueryTargetAttacksResponse, QueryTargetAttacksResult, QueryTargetAttacksRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 取消授权态势感知
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CancelAuthorizationResponse CancelAuthorization(CancelAuthorizationRequest request) {
            return  new CancelAuthorizationExecutor().Client(this).Execute<CancelAuthorizationResponse, CancelAuthorizationResult, CancelAuthorizationRequest>(request);
        }
#else
        /// <summary>
        /// 取消授权态势感知
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CancelAuthorizationResponse> CancelAuthorization(CancelAuthorizationRequest request) {
            return await new CancelAuthorizationExecutor().Client(this).Execute<CancelAuthorizationResponse, CancelAuthorizationResult, CancelAuthorizationRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更改事件状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateSingleAttackStatusResponse UpdateSingleAttackStatus(UpdateSingleAttackStatusRequest request) {
            return  new UpdateSingleAttackStatusExecutor().Client(this).Execute<UpdateSingleAttackStatusResponse, UpdateSingleAttackStatusResult, UpdateSingleAttackStatusRequest>(request);
        }
#else
        /// <summary>
        /// 更改事件状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateSingleAttackStatusResponse> UpdateSingleAttackStatus(UpdateSingleAttackStatusRequest request) {
            return await new UpdateSingleAttackStatusExecutor().Client(this).Execute<UpdateSingleAttackStatusResponse, UpdateSingleAttackStatusResult, UpdateSingleAttackStatusRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询用户是否被授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public IsAuthorizationGivenResponse IsAuthorizationGiven(IsAuthorizationGivenRequest request) {
            return  new IsAuthorizationGivenExecutor().Client(this).Execute<IsAuthorizationGivenResponse, IsAuthorizationGivenResult, IsAuthorizationGivenRequest>(request);
        }
#else
        /// <summary>
        /// 查询用户是否被授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<IsAuthorizationGivenResponse> IsAuthorizationGiven(IsAuthorizationGivenRequest request) {
            return await new IsAuthorizationGivenExecutor().Client(this).Execute<IsAuthorizationGivenResponse, IsAuthorizationGivenResult, IsAuthorizationGivenRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更改事件状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateTargetAttackStatusResponse UpdateTargetAttackStatus(UpdateTargetAttackStatusRequest request) {
            return  new UpdateTargetAttackStatusExecutor().Client(this).Execute<UpdateTargetAttackStatusResponse, UpdateTargetAttackStatusResult, UpdateTargetAttackStatusRequest>(request);
        }
#else
        /// <summary>
        /// 更改事件状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateTargetAttackStatusResponse> UpdateTargetAttackStatus(UpdateTargetAttackStatusRequest request) {
            return await new UpdateTargetAttackStatusExecutor().Client(this).Execute<UpdateTargetAttackStatusResponse, UpdateTargetAttackStatusResult, UpdateTargetAttackStatusRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询TopN风险主机计数接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsTopRiskServerInfoCountResponse QueryStatisticsTopRiskServerInfoCount(QueryStatisticsTopRiskServerInfoCountRequest request) {
            return  new QueryStatisticsTopRiskServerInfoCountExecutor().Client(this).Execute<QueryStatisticsTopRiskServerInfoCountResponse, QueryStatisticsTopRiskServerInfoCountResult, QueryStatisticsTopRiskServerInfoCountRequest>(request);
        }
#else
        /// <summary>
        /// 查询TopN风险主机计数接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsTopRiskServerInfoCountResponse> QueryStatisticsTopRiskServerInfoCount(QueryStatisticsTopRiskServerInfoCountRequest request) {
            return await new QueryStatisticsTopRiskServerInfoCountExecutor().Client(this).Execute<QueryStatisticsTopRiskServerInfoCountResponse, QueryStatisticsTopRiskServerInfoCountResult, QueryStatisticsTopRiskServerInfoCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 同意授权态势感知
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ConfirmAuthorizationResponse ConfirmAuthorization(ConfirmAuthorizationRequest request) {
            return  new ConfirmAuthorizationExecutor().Client(this).Execute<ConfirmAuthorizationResponse, ConfirmAuthorizationResult, ConfirmAuthorizationRequest>(request);
        }
#else
        /// <summary>
        /// 同意授权态势感知
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ConfirmAuthorizationResponse> ConfirmAuthorization(ConfirmAuthorizationRequest request) {
            return await new ConfirmAuthorizationExecutor().Client(this).Execute<ConfirmAuthorizationResponse, ConfirmAuthorizationResult, ConfirmAuthorizationRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修复漏洞
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public FixWeakEventsLeaksResponse FixWeakEventsLeaks(FixWeakEventsLeaksRequest request) {
            return  new FixWeakEventsLeaksExecutor().Client(this).Execute<FixWeakEventsLeaksResponse, FixWeakEventsLeaksResult, FixWeakEventsLeaksRequest>(request);
        }
#else
        /// <summary>
        /// 修复漏洞
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<FixWeakEventsLeaksResponse> FixWeakEventsLeaks(FixWeakEventsLeaksRequest request) {
            return await new FixWeakEventsLeaksExecutor().Client(this).Execute<FixWeakEventsLeaksResponse, FixWeakEventsLeaksResult, FixWeakEventsLeaksRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 网络检测引擎开关接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateAssetNidsStatusResponse UpdateAssetNidsStatus(UpdateAssetNidsStatusRequest request) {
            return  new UpdateAssetNidsStatusExecutor().Client(this).Execute<UpdateAssetNidsStatusResponse, UpdateAssetNidsStatusResult, UpdateAssetNidsStatusRequest>(request);
        }
#else
        /// <summary>
        /// 网络检测引擎开关接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateAssetNidsStatusResponse> UpdateAssetNidsStatus(UpdateAssetNidsStatusRequest request) {
            return await new UpdateAssetNidsStatusExecutor().Client(this).Execute<UpdateAssetNidsStatusResponse, UpdateAssetNidsStatusResult, UpdateAssetNidsStatusRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 同步资产
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateAssetResourceResponse UpdateAssetResource(UpdateAssetResourceRequest request) {
            return  new UpdateAssetResourceExecutor().Client(this).Execute<UpdateAssetResourceResponse, UpdateAssetResourceResult, UpdateAssetResourceRequest>(request);
        }
#else
        /// <summary>
        /// 同步资产
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateAssetResourceResponse> UpdateAssetResource(UpdateAssetResourceRequest request) {
            return await new UpdateAssetResourceExecutor().Client(this).Execute<UpdateAssetResourceResponse, UpdateAssetResourceResult, UpdateAssetResourceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// Pcap攻击取证
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QuerySingleAttacksPcapUrlResponse QuerySingleAttacksPcapUrl(QuerySingleAttacksPcapUrlRequest request) {
            return  new QuerySingleAttacksPcapUrlExecutor().Client(this).Execute<QuerySingleAttacksPcapUrlResponse, QuerySingleAttacksPcapUrlResult, QuerySingleAttacksPcapUrlRequest>(request);
        }
#else
        /// <summary>
        /// Pcap攻击取证
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QuerySingleAttacksPcapUrlResponse> QuerySingleAttacksPcapUrl(QuerySingleAttacksPcapUrlRequest request) {
            return await new QuerySingleAttacksPcapUrlExecutor().Client(this).Execute<QuerySingleAttacksPcapUrlResponse, QuerySingleAttacksPcapUrlResult, QuerySingleAttacksPcapUrlRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查看资产公网Ip列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAssetFloatingIpsResponse QueryAssetFloatingIps(QueryAssetFloatingIpsRequest request) {
            return  new QueryAssetFloatingIpsExecutor().Client(this).Execute<QueryAssetFloatingIpsResponse, QueryAssetFloatingIpsResult, QueryAssetFloatingIpsRequest>(request);
        }
#else
        /// <summary>
        /// 查看资产公网Ip列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAssetFloatingIpsResponse> QueryAssetFloatingIps(QueryAssetFloatingIpsRequest request) {
            return await new QueryAssetFloatingIpsExecutor().Client(this).Execute<QueryAssetFloatingIpsResponse, QueryAssetFloatingIpsResult, QueryAssetFloatingIpsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询报警通知规则联系人
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryNotifyRuleContactsResponse QueryNotifyRuleContacts(QueryNotifyRuleContactsRequest request) {
            return  new QueryNotifyRuleContactsExecutor().Client(this).Execute<QueryNotifyRuleContactsResponse, QueryNotifyRuleContactsResult, QueryNotifyRuleContactsRequest>(request);
        }
#else
        /// <summary>
        /// 查询报警通知规则联系人
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryNotifyRuleContactsResponse> QueryNotifyRuleContacts(QueryNotifyRuleContactsRequest request) {
            return await new QueryNotifyRuleContactsExecutor().Client(this).Execute<QueryNotifyRuleContactsResponse, QueryNotifyRuleContactsResult, QueryNotifyRuleContactsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置报警通知规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetNotifyRuleResponse SetNotifyRule(SetNotifyRuleRequest request) {
            return  new SetNotifyRuleExecutor().Client(this).Execute<SetNotifyRuleResponse, SetNotifyRuleResult, SetNotifyRuleRequest>(request);
        }
#else
        /// <summary>
        /// 设置报警通知规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetNotifyRuleResponse> SetNotifyRule(SetNotifyRuleRequest request) {
            return await new SetNotifyRuleExecutor().Client(this).Execute<SetNotifyRuleResponse, SetNotifyRuleResult, SetNotifyRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询单一攻击事件数对比
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QuerySingleAttacksTrendResponse QuerySingleAttacksTrend(QuerySingleAttacksTrendRequest request) {
            return  new QuerySingleAttacksTrendExecutor().Client(this).Execute<QuerySingleAttacksTrendResponse, QuerySingleAttacksTrendResult, QuerySingleAttacksTrendRequest>(request);
        }
#else
        /// <summary>
        /// 查询单一攻击事件数对比
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QuerySingleAttacksTrendResponse> QuerySingleAttacksTrend(QuerySingleAttacksTrendRequest request) {
            return await new QuerySingleAttacksTrendExecutor().Client(this).Execute<QuerySingleAttacksTrendResponse, QuerySingleAttacksTrendResult, QuerySingleAttacksTrendRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询DDos流量数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QuerySingleAttacksDDosFlowRatesResponse QuerySingleAttacksDDosFlowRates(QuerySingleAttacksDDosFlowRatesRequest request) {
            return  new QuerySingleAttacksDDosFlowRatesExecutor().Client(this).Execute<QuerySingleAttacksDDosFlowRatesResponse, QuerySingleAttacksDDosFlowRatesResult, QuerySingleAttacksDDosFlowRatesRequest>(request);
        }
#else
        /// <summary>
        /// 查询DDos流量数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QuerySingleAttacksDDosFlowRatesResponse> QuerySingleAttacksDDosFlowRates(QuerySingleAttacksDDosFlowRatesRequest request) {
            return await new QuerySingleAttacksDDosFlowRatesExecutor().Client(this).Execute<QuerySingleAttacksDDosFlowRatesResponse, QuerySingleAttacksDDosFlowRatesResult, QuerySingleAttacksDDosFlowRatesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询定向攻击事件数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryTargetAttacksCountResponse QueryTargetAttacksCount(QueryTargetAttacksCountRequest request) {
            return  new QueryTargetAttacksCountExecutor().Client(this).Execute<QueryTargetAttacksCountResponse, QueryTargetAttacksCountResult, QueryTargetAttacksCountRequest>(request);
        }
#else
        /// <summary>
        /// 查询定向攻击事件数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryTargetAttacksCountResponse> QueryTargetAttacksCount(QueryTargetAttacksCountRequest request) {
            return await new QueryTargetAttacksCountExecutor().Client(this).Execute<QueryTargetAttacksCountResponse, QueryTargetAttacksCountResult, QueryTargetAttacksCountRequest>(request);
        }
#endif

            /// <summary>
            ///  默认CsaClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>csaClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>csaClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>csaClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造CsaClient 对象
                ///</summary>
                CsaClient Build();
            }

            /// <summary>
            ///  默认CsaClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// CsaClient service client
                /// </summary>
                private  CsaClient csaClient;

                /// <summary>
                ///  默认CsaClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    csaClient = new CsaClient();
                }

                /// <summary>
                ///  构造CsaClient 对象
                ///</summary>
                public CsaClient Build()
                {
                    if (csaClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        csaClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (csaClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("CsaClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (csaClient.HttpRequestConfig == null)
                    {
                        csaClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (csaClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("CsaClient build error: http request config not set");
                        }
                    }
                    return csaClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>csaClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    csaClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>csaClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    csaClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>csaClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    csaClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
