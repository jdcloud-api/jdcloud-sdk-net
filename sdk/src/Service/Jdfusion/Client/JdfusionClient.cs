/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JD Fusion
 * 云主机、网卡、云硬盘、网络与相关、关系型数据库、对象存储等相关的接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Jdfusion.Apis;
using JDCloudSDK.Jdfusion.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Jdfusion.Client
{
    /// <summary>
    ///  JD Fusion
    ///  云主机、网卡、云硬盘、网络与相关、关系型数据库、对象存储等相关的接口
    ///  Jdfusion Api 客户端
    ///</summary>
    public class JdfusionClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private JdfusionClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public JdfusionClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public JdfusionClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public JdfusionClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.7
        ///</summary>
        public const string ClientVersion = "1.0.7";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "jdfusion.jdcloud-api.com";
        private const string serviceName = "jdfusion";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        ///  虚拟机规格列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVmInstanceTypesResponse GetVmInstanceTypes(GetVmInstanceTypesRequest request) {
            return  new GetVmInstanceTypesExecutor().Client(this).Execute<GetVmInstanceTypesResponse, GetVmInstanceTypesResult, GetVmInstanceTypesRequest>(request);
        }
#else
        /// <summary>
        ///  虚拟机规格列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVmInstanceTypesResponse> GetVmInstanceTypes(GetVmInstanceTypesRequest request) {
            return await new GetVmInstanceTypesExecutor().Client(this).Execute<GetVmInstanceTypesResponse, GetVmInstanceTypesResult, GetVmInstanceTypesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  读取指定ID的运行结果和运行状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetTaskInfoHistoryByIdResponse GetTaskInfoHistoryById(GetTaskInfoHistoryByIdRequest request) {
            return  new GetTaskInfoHistoryByIdExecutor().Client(this).Execute<GetTaskInfoHistoryByIdResponse, GetTaskInfoHistoryByIdResult, GetTaskInfoHistoryByIdRequest>(request);
        }
#else
        /// <summary>
        ///  读取指定ID的运行结果和运行状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetTaskInfoHistoryByIdResponse> GetTaskInfoHistoryById(GetTaskInfoHistoryByIdRequest request) {
            return await new GetTaskInfoHistoryByIdExecutor().Client(this).Execute<GetTaskInfoHistoryByIdResponse, GetTaskInfoHistoryByIdResult, GetTaskInfoHistoryByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的网卡资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcNetworkInterfacesResponse GetVpcNetworkInterfaces(GetVpcNetworkInterfacesRequest request) {
            return  new GetVpcNetworkInterfacesExecutor().Client(this).Execute<GetVpcNetworkInterfacesResponse, GetVpcNetworkInterfacesResult, GetVpcNetworkInterfacesRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的网卡资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcNetworkInterfacesResponse> GetVpcNetworkInterfaces(GetVpcNetworkInterfacesRequest request) {
            return await new GetVpcNetworkInterfacesExecutor().Client(this).Execute<GetVpcNetworkInterfacesResponse, GetVpcNetworkInterfacesResult, GetVpcNetworkInterfacesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的负载均衡资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcSlbsResponse GetVpcSlbs(GetVpcSlbsRequest request) {
            return  new GetVpcSlbsExecutor().Client(this).Execute<GetVpcSlbsResponse, GetVpcSlbsResult, GetVpcSlbsRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的负载均衡资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcSlbsResponse> GetVpcSlbs(GetVpcSlbsRequest request) {
            return await new GetVpcSlbsExecutor().Client(this).Execute<GetVpcSlbsResponse, GetVpcSlbsResult, GetVpcSlbsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  网卡挂载虚拟机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AttachVpcNetworkInterfaceByIdResponse AttachVpcNetworkInterfaceById(AttachVpcNetworkInterfaceByIdRequest request) {
            return  new AttachVpcNetworkInterfaceByIdExecutor().Client(this).Execute<AttachVpcNetworkInterfaceByIdResponse, AttachVpcNetworkInterfaceByIdResult, AttachVpcNetworkInterfaceByIdRequest>(request);
        }
#else
        /// <summary>
        ///  网卡挂载虚拟机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AttachVpcNetworkInterfaceByIdResponse> AttachVpcNetworkInterfaceById(AttachVpcNetworkInterfaceByIdRequest request) {
            return await new AttachVpcNetworkInterfaceByIdExecutor().Client(this).Execute<AttachVpcNetworkInterfaceByIdResponse, AttachVpcNetworkInterfaceByIdResult, AttachVpcNetworkInterfaceByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商创建云硬盘
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateDiskResponse CreateDisk(CreateDiskRequest request) {
            return  new CreateDiskExecutor().Client(this).Execute<CreateDiskResponse, CreateDiskResult, CreateDiskRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商创建云硬盘
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateDiskResponse> CreateDisk(CreateDiskRequest request) {
            return await new CreateDiskExecutor().Client(this).Execute<CreateDiskResponse, CreateDiskResult, CreateDiskRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商创建网卡
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateVpcNetworkInterfaceResponse CreateVpcNetworkInterface(CreateVpcNetworkInterfaceRequest request) {
            return  new CreateVpcNetworkInterfaceExecutor().Client(this).Execute<CreateVpcNetworkInterfaceResponse, CreateVpcNetworkInterfaceResult, CreateVpcNetworkInterfaceRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商创建网卡
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateVpcNetworkInterfaceResponse> CreateVpcNetworkInterface(CreateVpcNetworkInterfaceRequest request) {
            return await new CreateVpcNetworkInterfaceExecutor().Client(this).Execute<CreateVpcNetworkInterfaceResponse, CreateVpcNetworkInterfaceResult, CreateVpcNetworkInterfaceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  只能重启状态为 运行中（Running）的实例。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RebootVmInstanceByIdResponse RebootVmInstanceById(RebootVmInstanceByIdRequest request) {
            return  new RebootVmInstanceByIdExecutor().Client(this).Execute<RebootVmInstanceByIdResponse, RebootVmInstanceByIdResult, RebootVmInstanceByIdRequest>(request);
        }
#else
        /// <summary>
        ///  只能重启状态为 运行中（Running）的实例。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RebootVmInstanceByIdResponse> RebootVmInstanceById(RebootVmInstanceByIdRequest request) {
            return await new RebootVmInstanceByIdExecutor().Client(this).Execute<RebootVmInstanceByIdResponse, RebootVmInstanceByIdResult, RebootVmInstanceByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的云硬盘资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDiskByIdResponse GetDiskById(GetDiskByIdRequest request) {
            return  new GetDiskByIdExecutor().Client(this).Execute<GetDiskByIdResponse, GetDiskByIdResult, GetDiskByIdRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的云硬盘资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDiskByIdResponse> GetDiskById(GetDiskByIdRequest request) {
            return await new GetDiskByIdExecutor().Client(this).Execute<GetDiskByIdResponse, GetDiskByIdResult, GetDiskByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的VM资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVmInstancesByIdResponse GetVmInstancesById(GetVmInstancesByIdRequest request) {
            return  new GetVmInstancesByIdExecutor().Client(this).Execute<GetVmInstancesByIdResponse, GetVmInstancesByIdResult, GetVmInstancesByIdRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的VM资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVmInstancesByIdResponse> GetVmInstancesById(GetVmInstancesByIdRequest request) {
            return await new GetVmInstancesByIdExecutor().Client(this).Execute<GetVmInstancesByIdResponse, GetVmInstancesByIdResult, GetVmInstancesByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商创建私有网络
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateVpcResponse CreateVpc(CreateVpcRequest request) {
            return  new CreateVpcExecutor().Client(this).Execute<CreateVpcResponse, CreateVpcResult, CreateVpcRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商创建私有网络
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateVpcResponse> CreateVpc(CreateVpcRequest request) {
            return await new CreateVpcExecutor().Client(this).Execute<CreateVpcResponse, CreateVpcResult, CreateVpcRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的网卡资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcNetworkInterfaceByIdResponse GetVpcNetworkInterfaceById(GetVpcNetworkInterfaceByIdRequest request) {
            return  new GetVpcNetworkInterfaceByIdExecutor().Client(this).Execute<GetVpcNetworkInterfaceByIdResponse, GetVpcNetworkInterfaceByIdResult, GetVpcNetworkInterfaceByIdRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的网卡资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcNetworkInterfaceByIdResponse> GetVpcNetworkInterfaceById(GetVpcNetworkInterfaceByIdRequest request) {
            return await new GetVpcNetworkInterfaceByIdExecutor().Client(this).Execute<GetVpcNetworkInterfaceByIdResponse, GetVpcNetworkInterfaceByIdResult, GetVpcNetworkInterfaceByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的SLB资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcSlbByIdResponse GetVpcSlbById(GetVpcSlbByIdRequest request) {
            return  new GetVpcSlbByIdExecutor().Client(this).Execute<GetVpcSlbByIdResponse, GetVpcSlbByIdResult, GetVpcSlbByIdRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的SLB资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcSlbByIdResponse> GetVpcSlbById(GetVpcSlbByIdRequest request) {
            return await new GetVpcSlbByIdExecutor().Client(this).Execute<GetVpcSlbByIdResponse, GetVpcSlbByIdResult, GetVpcSlbByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商创建子网
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateVpcSubnetResponse CreateVpcSubnet(CreateVpcSubnetRequest request) {
            return  new CreateVpcSubnetExecutor().Client(this).Execute<CreateVpcSubnetResponse, CreateVpcSubnetResult, CreateVpcSubnetRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商创建子网
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateVpcSubnetResponse> CreateVpcSubnet(CreateVpcSubnetRequest request) {
            return await new CreateVpcSubnetExecutor().Client(this).Execute<CreateVpcSubnetResponse, CreateVpcSubnetResult, CreateVpcSubnetRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除弹性网卡
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteVpcNetworkInterfaceByIdResponse DeleteVpcNetworkInterfaceById(DeleteVpcNetworkInterfaceByIdRequest request) {
            return  new DeleteVpcNetworkInterfaceByIdExecutor().Client(this).Execute<DeleteVpcNetworkInterfaceByIdResponse, DeleteVpcNetworkInterfaceByIdResult, DeleteVpcNetworkInterfaceByIdRequest>(request);
        }
#else
        /// <summary>
        ///  删除弹性网卡
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteVpcNetworkInterfaceByIdResponse> DeleteVpcNetworkInterfaceById(DeleteVpcNetworkInterfaceByIdRequest request) {
            return await new DeleteVpcNetworkInterfaceByIdExecutor().Client(this).Execute<DeleteVpcNetworkInterfaceByIdResponse, DeleteVpcNetworkInterfaceByIdResult, DeleteVpcNetworkInterfaceByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  卸载网卡
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DetachVpcNetworkInterfaceByIdResponse DetachVpcNetworkInterfaceById(DetachVpcNetworkInterfaceByIdRequest request) {
            return  new DetachVpcNetworkInterfaceByIdExecutor().Client(this).Execute<DetachVpcNetworkInterfaceByIdResponse, DetachVpcNetworkInterfaceByIdResult, DetachVpcNetworkInterfaceByIdRequest>(request);
        }
#else
        /// <summary>
        ///  卸载网卡
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DetachVpcNetworkInterfaceByIdResponse> DetachVpcNetworkInterfaceById(DetachVpcNetworkInterfaceByIdRequest request) {
            return await new DetachVpcNetworkInterfaceByIdExecutor().Client(this).Execute<DetachVpcNetworkInterfaceByIdResponse, DetachVpcNetworkInterfaceByIdResult, DetachVpcNetworkInterfaceByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  为指定用户关联云
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RegistCloudInfoResponse RegistCloudInfo(RegistCloudInfoRequest request) {
            return  new RegistCloudInfoExecutor().Client(this).Execute<RegistCloudInfoResponse, RegistCloudInfoResult, RegistCloudInfoRequest>(request);
        }
#else
        /// <summary>
        ///  为指定用户关联云
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RegistCloudInfoResponse> RegistCloudInfo(RegistCloudInfoRequest request) {
            return await new RegistCloudInfoExecutor().Client(this).Execute<RegistCloudInfoResponse, RegistCloudInfoResult, RegistCloudInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的公网IP资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcEipByIdResponse GetVpcEipById(GetVpcEipByIdRequest request) {
            return  new GetVpcEipByIdExecutor().Client(this).Execute<GetVpcEipByIdResponse, GetVpcEipByIdResult, GetVpcEipByIdRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的公网IP资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcEipByIdResponse> GetVpcEipById(GetVpcEipByIdRequest request) {
            return await new GetVpcEipByIdExecutor().Client(this).Execute<GetVpcEipByIdResponse, GetVpcEipByIdResult, GetVpcEipByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除安全组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteVpcSecurityGroupByIdResponse DeleteVpcSecurityGroupById(DeleteVpcSecurityGroupByIdRequest request) {
            return  new DeleteVpcSecurityGroupByIdExecutor().Client(this).Execute<DeleteVpcSecurityGroupByIdResponse, DeleteVpcSecurityGroupByIdResult, DeleteVpcSecurityGroupByIdRequest>(request);
        }
#else
        /// <summary>
        ///  删除安全组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteVpcSecurityGroupByIdResponse> DeleteVpcSecurityGroupById(DeleteVpcSecurityGroupByIdRequest request) {
            return await new DeleteVpcSecurityGroupByIdExecutor().Client(this).Execute<DeleteVpcSecurityGroupByIdResponse, DeleteVpcSecurityGroupByIdResult, DeleteVpcSecurityGroupByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除云硬盘
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RemoveDiskByIdResponse RemoveDiskById(RemoveDiskByIdRequest request) {
            return  new RemoveDiskByIdExecutor().Client(this).Execute<RemoveDiskByIdResponse, RemoveDiskByIdResult, RemoveDiskByIdRequest>(request);
        }
#else
        /// <summary>
        ///  删除云硬盘
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RemoveDiskByIdResponse> RemoveDiskById(RemoveDiskByIdRequest request) {
            return await new RemoveDiskByIdExecutor().Client(this).Execute<RemoveDiskByIdResponse, RemoveDiskByIdResult, RemoveDiskByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商分配公网IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateVpcEipResponse CreateVpcEip(CreateVpcEipRequest request) {
            return  new CreateVpcEipExecutor().Client(this).Execute<CreateVpcEipResponse, CreateVpcEipResult, CreateVpcEipRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商分配公网IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateVpcEipResponse> CreateVpcEip(CreateVpcEipRequest request) {
            return await new CreateVpcEipExecutor().Client(this).Execute<CreateVpcEipResponse, CreateVpcEipResult, CreateVpcEipRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  弹性公网IP绑定到虚拟机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AssociateVpcEipByIdResponse AssociateVpcEipById(AssociateVpcEipByIdRequest request) {
            return  new AssociateVpcEipByIdExecutor().Client(this).Execute<AssociateVpcEipByIdResponse, AssociateVpcEipByIdResult, AssociateVpcEipByIdRequest>(request);
        }
#else
        /// <summary>
        ///  弹性公网IP绑定到虚拟机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AssociateVpcEipByIdResponse> AssociateVpcEipById(AssociateVpcEipByIdRequest request) {
            return await new AssociateVpcEipByIdExecutor().Client(this).Execute<AssociateVpcEipByIdResponse, AssociateVpcEipByIdResult, AssociateVpcEipByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商创建虚拟机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateVmInstanceResponse CreateVmInstance(CreateVmInstanceRequest request) {
            return  new CreateVmInstanceExecutor().Client(this).Execute<CreateVmInstanceResponse, CreateVmInstanceResult, CreateVmInstanceRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商创建虚拟机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateVmInstanceResponse> CreateVmInstance(CreateVmInstanceRequest request) {
            return await new CreateVmInstanceExecutor().Client(this).Execute<CreateVmInstanceResponse, CreateVmInstanceResult, CreateVmInstanceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取指定云信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UnregistCloudInfoResponse UnregistCloudInfo(UnregistCloudInfoRequest request) {
            return  new UnregistCloudInfoExecutor().Client(this).Execute<UnregistCloudInfoResponse, UnregistCloudInfoResult, UnregistCloudInfoRequest>(request);
        }
#else
        /// <summary>
        ///  获取指定云信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UnregistCloudInfoResponse> UnregistCloudInfo(UnregistCloudInfoRequest request) {
            return await new UnregistCloudInfoExecutor().Client(this).Execute<UnregistCloudInfoResponse, UnregistCloudInfoResult, UnregistCloudInfoRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  解绑公网IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DisassociateVpcEipByIdResponse DisassociateVpcEipById(DisassociateVpcEipByIdRequest request) {
            return  new DisassociateVpcEipByIdExecutor().Client(this).Execute<DisassociateVpcEipByIdResponse, DisassociateVpcEipByIdResult, DisassociateVpcEipByIdRequest>(request);
        }
#else
        /// <summary>
        ///  解绑公网IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DisassociateVpcEipByIdResponse> DisassociateVpcEipById(DisassociateVpcEipByIdRequest request) {
            return await new DisassociateVpcEipByIdExecutor().Client(this).Execute<DisassociateVpcEipByIdResponse, DisassociateVpcEipByIdResult, DisassociateVpcEipByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的安全组资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcSecurityGroupByIdResponse GetVpcSecurityGroupById(GetVpcSecurityGroupByIdRequest request) {
            return  new GetVpcSecurityGroupByIdExecutor().Client(this).Execute<GetVpcSecurityGroupByIdResponse, GetVpcSecurityGroupByIdResult, GetVpcSecurityGroupByIdRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的安全组资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcSecurityGroupByIdResponse> GetVpcSecurityGroupById(GetVpcSecurityGroupByIdRequest request) {
            return await new GetVpcSecurityGroupByIdExecutor().Client(this).Execute<GetVpcSecurityGroupByIdResponse, GetVpcSecurityGroupByIdResult, GetVpcSecurityGroupByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除VPC
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteVpcByIdResponse DeleteVpcById(DeleteVpcByIdRequest request) {
            return  new DeleteVpcByIdExecutor().Client(this).Execute<DeleteVpcByIdResponse, DeleteVpcByIdResult, DeleteVpcByIdRequest>(request);
        }
#else
        /// <summary>
        ///  删除VPC
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteVpcByIdResponse> DeleteVpcById(DeleteVpcByIdRequest request) {
            return await new DeleteVpcByIdExecutor().Client(this).Execute<DeleteVpcByIdResponse, DeleteVpcByIdResult, DeleteVpcByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  启动一台实例。实例状态必须为 已停止（Stopped），才可以调用该接口。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StartVmInstanceByIdResponse StartVmInstanceById(StartVmInstanceByIdRequest request) {
            return  new StartVmInstanceByIdExecutor().Client(this).Execute<StartVmInstanceByIdResponse, StartVmInstanceByIdResult, StartVmInstanceByIdRequest>(request);
        }
#else
        /// <summary>
        ///  启动一台实例。实例状态必须为 已停止（Stopped），才可以调用该接口。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StartVmInstanceByIdResponse> StartVmInstanceById(StartVmInstanceByIdRequest request) {
            return await new StartVmInstanceByIdExecutor().Client(this).Execute<StartVmInstanceByIdResponse, StartVmInstanceByIdResult, StartVmInstanceByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取指定云信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetCloudInfoByIdResponse GetCloudInfoById(GetCloudInfoByIdRequest request) {
            return  new GetCloudInfoByIdExecutor().Client(this).Execute<GetCloudInfoByIdResponse, GetCloudInfoByIdResult, GetCloudInfoByIdRequest>(request);
        }
#else
        /// <summary>
        ///  获取指定云信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetCloudInfoByIdResponse> GetCloudInfoById(GetCloudInfoByIdRequest request) {
            return await new GetCloudInfoByIdExecutor().Client(this).Execute<GetCloudInfoByIdResponse, GetCloudInfoByIdResult, GetCloudInfoByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  停止运行一台实例。只有状态为 运行中（Running）的实例才可以进行此操作。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StopVmInstanceByIdResponse StopVmInstanceById(StopVmInstanceByIdRequest request) {
            return  new StopVmInstanceByIdExecutor().Client(this).Execute<StopVmInstanceByIdResponse, StopVmInstanceByIdResult, StopVmInstanceByIdRequest>(request);
        }
#else
        /// <summary>
        ///  停止运行一台实例。只有状态为 运行中（Running）的实例才可以进行此操作。
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StopVmInstanceByIdResponse> StopVmInstanceById(StopVmInstanceByIdRequest request) {
            return await new StopVmInstanceByIdExecutor().Client(this).Execute<StopVmInstanceByIdResponse, StopVmInstanceByIdResult, StopVmInstanceByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  通过虚拟机id删除虚拟机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteVmInstanceByIdResponse DeleteVmInstanceById(DeleteVmInstanceByIdRequest request) {
            return  new DeleteVmInstanceByIdExecutor().Client(this).Execute<DeleteVmInstanceByIdResponse, DeleteVmInstanceByIdResult, DeleteVmInstanceByIdRequest>(request);
        }
#else
        /// <summary>
        ///  通过虚拟机id删除虚拟机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteVmInstanceByIdResponse> DeleteVmInstanceById(DeleteVmInstanceByIdRequest request) {
            return await new DeleteVmInstanceByIdExecutor().Client(this).Execute<DeleteVmInstanceByIdResponse, DeleteVmInstanceByIdResult, DeleteVmInstanceByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除密钥对
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteVmKeypairByNameResponse DeleteVmKeypairByName(DeleteVmKeypairByNameRequest request) {
            return  new DeleteVmKeypairByNameExecutor().Client(this).Execute<DeleteVmKeypairByNameResponse, DeleteVmKeypairByNameResult, DeleteVmKeypairByNameRequest>(request);
        }
#else
        /// <summary>
        ///  删除密钥对
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteVmKeypairByNameResponse> DeleteVmKeypairByName(DeleteVmKeypairByNameRequest request) {
            return await new DeleteVmKeypairByNameExecutor().Client(this).Execute<DeleteVmKeypairByNameResponse, DeleteVmKeypairByNameResult, DeleteVmKeypairByNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除子网
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteVpcSubnetByIdResponse DeleteVpcSubnetById(DeleteVpcSubnetByIdRequest request) {
            return  new DeleteVpcSubnetByIdExecutor().Client(this).Execute<DeleteVpcSubnetByIdResponse, DeleteVpcSubnetByIdResult, DeleteVpcSubnetByIdRequest>(request);
        }
#else
        /// <summary>
        ///  删除子网
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteVpcSubnetByIdResponse> DeleteVpcSubnetById(DeleteVpcSubnetByIdRequest request) {
            return await new DeleteVpcSubnetByIdExecutor().Client(this).Execute<DeleteVpcSubnetByIdResponse, DeleteVpcSubnetByIdResult, DeleteVpcSubnetByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的VPC资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcByIdResponse GetVpcById(GetVpcByIdRequest request) {
            return  new GetVpcByIdExecutor().Client(this).Execute<GetVpcByIdResponse, GetVpcByIdResult, GetVpcByIdRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的VPC资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcByIdResponse> GetVpcById(GetVpcByIdRequest request) {
            return await new GetVpcByIdExecutor().Client(this).Execute<GetVpcByIdResponse, GetVpcByIdResult, GetVpcByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的虚拟机资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVmInstancesResponse GetVmInstances(GetVmInstancesRequest request) {
            return  new GetVmInstancesExecutor().Client(this).Execute<GetVmInstancesResponse, GetVmInstancesResult, GetVmInstancesRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的虚拟机资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVmInstancesResponse> GetVmInstances(GetVmInstancesRequest request) {
            return await new GetVmInstancesExecutor().Client(this).Execute<GetVmInstancesResponse, GetVmInstancesResult, GetVmInstancesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的subnet资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcSubnetByIdResponse GetVpcSubnetById(GetVpcSubnetByIdRequest request) {
            return  new GetVpcSubnetByIdExecutor().Client(this).Execute<GetVpcSubnetByIdResponse, GetVpcSubnetByIdResult, GetVpcSubnetByIdRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的subnet资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcSubnetByIdResponse> GetVpcSubnetById(GetVpcSubnetByIdRequest request) {
            return await new GetVpcSubnetByIdExecutor().Client(this).Execute<GetVpcSubnetByIdResponse, GetVpcSubnetByIdResult, GetVpcSubnetByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商创建密钥对
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateVmKeypairResponse CreateVmKeypair(CreateVmKeypairRequest request) {
            return  new CreateVmKeypairExecutor().Client(this).Execute<CreateVmKeypairResponse, CreateVmKeypairResult, CreateVmKeypairRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商创建密钥对
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateVmKeypairResponse> CreateVmKeypair(CreateVmKeypairRequest request) {
            return await new CreateVmKeypairExecutor().Client(this).Execute<CreateVmKeypairResponse, CreateVmKeypairResult, CreateVmKeypairRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的公网IP资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcEipsResponse GetVpcEips(GetVpcEipsRequest request) {
            return  new GetVpcEipsExecutor().Client(this).Execute<GetVpcEipsResponse, GetVpcEipsResult, GetVpcEipsRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的公网IP资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcEipsResponse> GetVpcEips(GetVpcEipsRequest request) {
            return await new GetVpcEipsExecutor().Client(this).Execute<GetVpcEipsResponse, GetVpcEipsResult, GetVpcEipsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商创建负载均衡
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateVpcSlbResponse CreateVpcSlb(CreateVpcSlbRequest request) {
            return  new CreateVpcSlbExecutor().Client(this).Execute<CreateVpcSlbResponse, CreateVpcSlbResult, CreateVpcSlbRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商创建负载均衡
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateVpcSlbResponse> CreateVpcSlb(CreateVpcSlbRequest request) {
            return await new CreateVpcSlbExecutor().Client(this).Execute<CreateVpcSlbResponse, CreateVpcSlbResult, CreateVpcSlbRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的安全组资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcSecurityGroupsResponse GetVpcSecurityGroups(GetVpcSecurityGroupsRequest request) {
            return  new GetVpcSecurityGroupsExecutor().Client(this).Execute<GetVpcSecurityGroupsResponse, GetVpcSecurityGroupsResult, GetVpcSecurityGroupsRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的安全组资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcSecurityGroupsResponse> GetVpcSecurityGroups(GetVpcSecurityGroupsRequest request) {
            return await new GetVpcSecurityGroupsExecutor().Client(this).Execute<GetVpcSecurityGroupsResponse, GetVpcSecurityGroupsResult, GetVpcSecurityGroupsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的密钥对资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVmKeypairsByNameResponse GetVmKeypairsByName(GetVmKeypairsByNameRequest request) {
            return  new GetVmKeypairsByNameExecutor().Client(this).Execute<GetVmKeypairsByNameResponse, GetVmKeypairsByNameResult, GetVmKeypairsByNameRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的密钥对资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVmKeypairsByNameResponse> GetVmKeypairsByName(GetVmKeypairsByNameRequest request) {
            return await new GetVmKeypairsByNameExecutor().Client(this).Execute<GetVmKeypairsByNameResponse, GetVmKeypairsByNameResult, GetVmKeypairsByNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  云硬盘挂载至虚拟机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AttachDiskToVmInstanceByDiskIdResponse AttachDiskToVmInstanceByDiskId(AttachDiskToVmInstanceByDiskIdRequest request) {
            return  new AttachDiskToVmInstanceByDiskIdExecutor().Client(this).Execute<AttachDiskToVmInstanceByDiskIdResponse, AttachDiskToVmInstanceByDiskIdResult, AttachDiskToVmInstanceByDiskIdRequest>(request);
        }
#else
        /// <summary>
        ///  云硬盘挂载至虚拟机
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AttachDiskToVmInstanceByDiskIdResponse> AttachDiskToVmInstanceByDiskId(AttachDiskToVmInstanceByDiskIdRequest request) {
            return await new AttachDiskToVmInstanceByDiskIdExecutor().Client(this).Execute<AttachDiskToVmInstanceByDiskIdResponse, AttachDiskToVmInstanceByDiskIdResult, AttachDiskToVmInstanceByDiskIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  释放公网IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteVpcEipByIdResponse DeleteVpcEipById(DeleteVpcEipByIdRequest request) {
            return  new DeleteVpcEipByIdExecutor().Client(this).Execute<DeleteVpcEipByIdResponse, DeleteVpcEipByIdResult, DeleteVpcEipByIdRequest>(request);
        }
#else
        /// <summary>
        ///  释放公网IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteVpcEipByIdResponse> DeleteVpcEipById(DeleteVpcEipByIdRequest request) {
            return await new DeleteVpcEipByIdExecutor().Client(this).Execute<DeleteVpcEipByIdResponse, DeleteVpcEipByIdResult, DeleteVpcEipByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商创建安全组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateVpcSecurityGroupResponse CreateVpcSecurityGroup(CreateVpcSecurityGroupRequest request) {
            return  new CreateVpcSecurityGroupExecutor().Client(this).Execute<CreateVpcSecurityGroupResponse, CreateVpcSecurityGroupResult, CreateVpcSecurityGroupRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商创建安全组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateVpcSecurityGroupResponse> CreateVpcSecurityGroup(CreateVpcSecurityGroupRequest request) {
            return await new CreateVpcSecurityGroupExecutor().Client(this).Execute<CreateVpcSecurityGroupResponse, CreateVpcSecurityGroupResult, CreateVpcSecurityGroupRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的subnet资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcSubnetsResponse GetVpcSubnets(GetVpcSubnetsRequest request) {
            return  new GetVpcSubnetsExecutor().Client(this).Execute<GetVpcSubnetsResponse, GetVpcSubnetsResult, GetVpcSubnetsRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的subnet资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcSubnetsResponse> GetVpcSubnets(GetVpcSubnetsRequest request) {
            return await new GetVpcSubnetsExecutor().Client(this).Execute<GetVpcSubnetsResponse, GetVpcSubnetsResult, GetVpcSubnetsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据过滤条件，取得服务器组的信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcVServerGroupsResponse GetVpcVServerGroups(GetVpcVServerGroupsRequest request) {
            return  new GetVpcVServerGroupsExecutor().Client(this).Execute<GetVpcVServerGroupsResponse, GetVpcVServerGroupsResult, GetVpcVServerGroupsRequest>(request);
        }
#else
        /// <summary>
        ///  根据过滤条件，取得服务器组的信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcVServerGroupsResponse> GetVpcVServerGroups(GetVpcVServerGroupsRequest request) {
            return await new GetVpcVServerGroupsExecutor().Client(this).Execute<GetVpcVServerGroupsResponse, GetVpcVServerGroupsResult, GetVpcVServerGroupsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询私有网络资源列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVpcsResponse GetVpcs(GetVpcsRequest request) {
            return  new GetVpcsExecutor().Client(this).Execute<GetVpcsResponse, GetVpcsResult, GetVpcsRequest>(request);
        }
#else
        /// <summary>
        ///  查询私有网络资源列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVpcsResponse> GetVpcs(GetVpcsRequest request) {
            return await new GetVpcsExecutor().Client(this).Execute<GetVpcsResponse, GetVpcsResult, GetVpcsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  读取指定ID的运行结果和运行状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetTaskInfoByIdResponse GetTaskInfoById(GetTaskInfoByIdRequest request) {
            return  new GetTaskInfoByIdExecutor().Client(this).Execute<GetTaskInfoByIdResponse, GetTaskInfoByIdResult, GetTaskInfoByIdRequest>(request);
        }
#else
        /// <summary>
        ///  读取指定ID的运行结果和运行状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetTaskInfoByIdResponse> GetTaskInfoById(GetTaskInfoByIdRequest request) {
            return await new GetTaskInfoByIdExecutor().Client(this).Execute<GetTaskInfoByIdResponse, GetTaskInfoByIdResult, GetTaskInfoByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取当前用户的云注册信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetCloudInfosResponse GetCloudInfos(GetCloudInfosRequest request) {
            return  new GetCloudInfosExecutor().Client(this).Execute<GetCloudInfosResponse, GetCloudInfosResult, GetCloudInfosRequest>(request);
        }
#else
        /// <summary>
        ///  获取当前用户的云注册信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetCloudInfosResponse> GetCloudInfos(GetCloudInfosRequest request) {
            return await new GetCloudInfosExecutor().Client(this).Execute<GetCloudInfosResponse, GetCloudInfosResult, GetCloudInfosRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的密钥对资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVmKeypairsResponse GetVmKeypairs(GetVmKeypairsRequest request) {
            return  new GetVmKeypairsExecutor().Client(this).Execute<GetVmKeypairsResponse, GetVmKeypairsResult, GetVmKeypairsRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的密钥对资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVmKeypairsResponse> GetVmKeypairs(GetVmKeypairsRequest request) {
            return await new GetVmKeypairsExecutor().Client(this).Execute<GetVmKeypairsResponse, GetVmKeypairsResult, GetVmKeypairsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据过滤条件，取得镜像资源的信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetVmImagesResponse GetVmImages(GetVmImagesRequest request) {
            return  new GetVmImagesExecutor().Client(this).Execute<GetVmImagesResponse, GetVmImagesResult, GetVmImagesRequest>(request);
        }
#else
        /// <summary>
        ///  根据过滤条件，取得镜像资源的信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetVmImagesResponse> GetVmImages(GetVmImagesRequest request) {
            return await new GetVmImagesExecutor().Client(this).Execute<GetVmImagesResponse, GetVmImagesResult, GetVmImagesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除SLB
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteVpcSlbByIdResponse DeleteVpcSlbById(DeleteVpcSlbByIdRequest request) {
            return  new DeleteVpcSlbByIdExecutor().Client(this).Execute<DeleteVpcSlbByIdResponse, DeleteVpcSlbByIdResult, DeleteVpcSlbByIdRequest>(request);
        }
#else
        /// <summary>
        ///  删除SLB
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteVpcSlbByIdResponse> DeleteVpcSlbById(DeleteVpcSlbByIdRequest request) {
            return await new DeleteVpcSlbByIdExecutor().Client(this).Execute<DeleteVpcSlbByIdResponse, DeleteVpcSlbByIdResult, DeleteVpcSlbByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建虚拟服务器组，并添加后端服务器
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateVpcVServerGroupResponse CreateVpcVServerGroup(CreateVpcVServerGroupRequest request) {
            return  new CreateVpcVServerGroupExecutor().Client(this).Execute<CreateVpcVServerGroupResponse, CreateVpcVServerGroupResult, CreateVpcVServerGroupRequest>(request);
        }
#else
        /// <summary>
        ///  创建虚拟服务器组，并添加后端服务器
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateVpcVServerGroupResponse> CreateVpcVServerGroup(CreateVpcVServerGroupRequest request) {
            return await new CreateVpcVServerGroupExecutor().Client(this).Execute<CreateVpcVServerGroupResponse, CreateVpcVServerGroupResult, CreateVpcVServerGroupRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据云提供商查询对应的云硬盘资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDisksResponse GetDisks(GetDisksRequest request) {
            return  new GetDisksExecutor().Client(this).Execute<GetDisksResponse, GetDisksResult, GetDisksRequest>(request);
        }
#else
        /// <summary>
        ///  根据云提供商查询对应的云硬盘资源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDisksResponse> GetDisks(GetDisksRequest request) {
            return await new GetDisksExecutor().Client(this).Execute<GetDisksResponse, GetDisksResult, GetDisksRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  从虚拟机卸载云硬盘
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DetachDiskToVmInstanceByDiskIdResponse DetachDiskToVmInstanceByDiskId(DetachDiskToVmInstanceByDiskIdRequest request) {
            return  new DetachDiskToVmInstanceByDiskIdExecutor().Client(this).Execute<DetachDiskToVmInstanceByDiskIdResponse, DetachDiskToVmInstanceByDiskIdResult, DetachDiskToVmInstanceByDiskIdRequest>(request);
        }
#else
        /// <summary>
        ///  从虚拟机卸载云硬盘
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DetachDiskToVmInstanceByDiskIdResponse> DetachDiskToVmInstanceByDiskId(DetachDiskToVmInstanceByDiskIdRequest request) {
            return await new DetachDiskToVmInstanceByDiskIdExecutor().Client(this).Execute<DetachDiskToVmInstanceByDiskIdResponse, DetachDiskToVmInstanceByDiskIdResult, DetachDiskToVmInstanceByDiskIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建HTTP监听器
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateVpcLBHttpListenerResponse CreateVpcLBHttpListener(CreateVpcLBHttpListenerRequest request) {
            return  new CreateVpcLBHttpListenerExecutor().Client(this).Execute<CreateVpcLBHttpListenerResponse, CreateVpcLBHttpListenerResult, CreateVpcLBHttpListenerRequest>(request);
        }
#else
        /// <summary>
        ///  创建HTTP监听器
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateVpcLBHttpListenerResponse> CreateVpcLBHttpListener(CreateVpcLBHttpListenerRequest request) {
            return await new CreateVpcLBHttpListenerExecutor().Client(this).Execute<CreateVpcLBHttpListenerResponse, CreateVpcLBHttpListenerResult, CreateVpcLBHttpListenerRequest>(request);
        }
#endif

            /// <summary>
            ///  默认JdfusionClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>jdfusionClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>jdfusionClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>jdfusionClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造JdfusionClient 对象
                ///</summary>
                JdfusionClient Build();
            }

            /// <summary>
            ///  默认JdfusionClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                ///  JdfusionClient service client
                /// </summary>
                private  JdfusionClient jdfusionClient;

                /// <summary>
                ///  默认JdfusionClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    jdfusionClient = new JdfusionClient();
                }

                /// <summary>
                ///  构造JdfusionClient 对象
                ///</summary>
                public JdfusionClient Build()
                {
                    if (jdfusionClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        jdfusionClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (jdfusionClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("JdfusionClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (jdfusionClient.HttpRequestConfig == null)
                    {
                        jdfusionClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (jdfusionClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("JdfusionClient build error: http request config not set");
                        }
                    }
                    return jdfusionClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>jdfusionClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    jdfusionClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>jdfusionClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    jdfusionClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>jdfusionClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    jdfusionClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
