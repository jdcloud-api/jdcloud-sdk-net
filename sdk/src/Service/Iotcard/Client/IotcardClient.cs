/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云iotcard接口
 * iotcard相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Iotcard.Apis;
using JDCloudSDK.Iotcard.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Iotcard.Client
{
    /// <summary>
    ///  京东云iotcard接口
    ///  iotcard相关接口
    ///  Iotcard Api 客户端
    ///</summary>
    public class IotcardClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private IotcardClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public IotcardClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public IotcardClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public IotcardClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.1.0
        ///</summary>
        public const string ClientVersion = "1.1.0";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "openapi.myiot.jdcloud.com";
        private const string serviceName = "iotcard";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        ///  根据物联网卡iccid查询该卡的开关机状态信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public OnOffStatusResponse OnOffStatus(OnOffStatusRequest request) {
            return  new OnOffStatusExecutor().Client(this).Execute<OnOffStatusResponse, OnOffStatusResult, OnOffStatusRequest>(request);
        }
#else
        /// <summary>
        ///  根据物联网卡iccid查询该卡的开关机状态信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<OnOffStatusResponse> OnOffStatus(OnOffStatusRequest request) {
            return await new OnOffStatusExecutor().Client(this).Execute<OnOffStatusResponse, OnOffStatusResult, OnOffStatusRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  物联网卡停流量操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CloseIotFlowResponse CloseIotFlow(CloseIotFlowRequest request) {
            return  new CloseIotFlowExecutor().Client(this).Execute<CloseIotFlowResponse, CloseIotFlowResult, CloseIotFlowRequest>(request);
        }
#else
        /// <summary>
        ///  物联网卡停流量操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CloseIotFlowResponse> CloseIotFlow(CloseIotFlowRequest request) {
            return await new CloseIotFlowExecutor().Client(this).Execute<CloseIotFlowResponse, CloseIotFlowResult, CloseIotFlowRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  物联网卡开机操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public OpenIotCardResponse OpenIotCard(OpenIotCardRequest request) {
            return  new OpenIotCardExecutor().Client(this).Execute<OpenIotCardResponse, OpenIotCardResult, OpenIotCardRequest>(request);
        }
#else
        /// <summary>
        ///  物联网卡开机操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<OpenIotCardResponse> OpenIotCard(OpenIotCardRequest request) {
            return await new OpenIotCardExecutor().Client(this).Execute<OpenIotCardResponse, OpenIotCardResult, OpenIotCardRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  物联网卡开启流量操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public OpenIotFlowResponse OpenIotFlow(OpenIotFlowRequest request) {
            return  new OpenIotFlowExecutor().Client(this).Execute<OpenIotFlowResponse, OpenIotFlowResult, OpenIotFlowRequest>(request);
        }
#else
        /// <summary>
        ///  物联网卡开启流量操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<OpenIotFlowResponse> OpenIotFlow(OpenIotFlowRequest request) {
            return await new OpenIotFlowExecutor().Client(this).Execute<OpenIotFlowResponse, OpenIotFlowResult, OpenIotFlowRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据物联网卡iccid查询该卡的生命周期信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public LifeStatusResponse LifeStatus(LifeStatusRequest request) {
            return  new LifeStatusExecutor().Client(this).Execute<LifeStatusResponse, LifeStatusResult, LifeStatusRequest>(request);
        }
#else
        /// <summary>
        ///  根据物联网卡iccid查询该卡的生命周期信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<LifeStatusResponse> LifeStatus(LifeStatusRequest request) {
            return await new LifeStatusExecutor().Client(this).Execute<LifeStatusResponse, LifeStatusResult, LifeStatusRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  物联网卡停机操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CloseIotCardResponse CloseIotCard(CloseIotCardRequest request) {
            return  new CloseIotCardExecutor().Client(this).Execute<CloseIotCardResponse, CloseIotCardResult, CloseIotCardRequest>(request);
        }
#else
        /// <summary>
        ///  物联网卡停机操作
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CloseIotCardResponse> CloseIotCard(CloseIotCardRequest request) {
            return await new CloseIotCardExecutor().Client(this).Execute<CloseIotCardResponse, CloseIotCardResult, CloseIotCardRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据物联网卡iccid查询该卡的当月套餐内的GPRS实时使用量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GprsRealtimeInfoResponse GprsRealtimeInfo(GprsRealtimeInfoRequest request) {
            return  new GprsRealtimeInfoExecutor().Client(this).Execute<GprsRealtimeInfoResponse, GprsRealtimeInfoResult, GprsRealtimeInfoRequest>(request);
        }
#else
        /// <summary>
        ///  根据物联网卡iccid查询该卡的当月套餐内的GPRS实时使用量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GprsRealtimeInfoResponse> GprsRealtimeInfo(GprsRealtimeInfoRequest request) {
            return await new GprsRealtimeInfoExecutor().Client(this).Execute<GprsRealtimeInfoResponse, GprsRealtimeInfoResult, GprsRealtimeInfoRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据物联网卡iccid查询该卡的gprs状态信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GprsStatusResponse GprsStatus(GprsStatusRequest request) {
            return  new GprsStatusExecutor().Client(this).Execute<GprsStatusResponse, GprsStatusResult, GprsStatusRequest>(request);
        }
#else
        /// <summary>
        ///  根据物联网卡iccid查询该卡的gprs状态信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GprsStatusResponse> GprsStatus(GprsStatusRequest request) {
            return await new GprsStatusExecutor().Client(this).Execute<GprsStatusResponse, GprsStatusResult, GprsStatusRequest>(request).ConfigureAwait(false);
        }
#endif

            /// <summary>
            ///  默认IotcardClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>iotcardClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>iotcardClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>iotcardClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造IotcardClient 对象
                ///</summary>
                IotcardClient Build();
            }

            /// <summary>
            ///  默认IotcardClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                ///  IotcardClient service client
                /// </summary>
                private  IotcardClient iotcardClient;

                /// <summary>
                ///  默认IotcardClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    iotcardClient = new IotcardClient();
                }

                /// <summary>
                ///  构造IotcardClient 对象
                ///</summary>
                public IotcardClient Build()
                {
                    if (iotcardClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        iotcardClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (iotcardClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("IotcardClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (iotcardClient.HttpRequestConfig == null)
                    {
                        iotcardClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (iotcardClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("IotcardClient build error: http request config not set");
                        }
                    }
                    return iotcardClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>iotcardClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    iotcardClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>iotcardClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    iotcardClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>iotcardClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    iotcardClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
