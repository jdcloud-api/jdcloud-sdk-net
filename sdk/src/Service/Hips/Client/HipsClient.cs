/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD 主机安全 API
 * 提供主机告警信息，漏洞信息以及相关统计信息接口。
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Hips.Apis;
using JDCloudSDK.Hips.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Hips.Client
{
    /// <summary>
    /// JDCLOUD 主机安全 API
    /// 提供主机告警信息，漏洞信息以及相关统计信息接口。
    /// Hips Api 客户端
    ///</summary>
    public class HipsClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private HipsClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public HipsClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public HipsClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public HipsClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "hips.jdcloud-api.com";
        private const string serviceName = "hips";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 根据主机ID获得弱口令列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsServerWeakPasswordsResponse QueryWarnsServerWeakPasswords(QueryWarnsServerWeakPasswordsRequest request) {
            return  new QueryWarnsServerWeakPasswordsExecutor().Client(this).Execute<QueryWarnsServerWeakPasswordsResponse, QueryWarnsServerWeakPasswordsResult, QueryWarnsServerWeakPasswordsRequest>(request);
        }
#else
        /// <summary>
        /// 根据主机ID获得弱口令列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsServerWeakPasswordsResponse> QueryWarnsServerWeakPasswords(QueryWarnsServerWeakPasswordsRequest request) {
            return await new QueryWarnsServerWeakPasswordsExecutor().Client(this).Execute<QueryWarnsServerWeakPasswordsResponse, QueryWarnsServerWeakPasswordsResult, QueryWarnsServerWeakPasswordsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取统计报告
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsReportResponse QueryWarnsReport(QueryWarnsReportRequest request) {
            return  new QueryWarnsReportExecutor().Client(this).Execute<QueryWarnsReportResponse, QueryWarnsReportResult, QueryWarnsReportRequest>(request);
        }
#else
        /// <summary>
        /// 获取统计报告
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsReportResponse> QueryWarnsReport(QueryWarnsReportRequest request) {
            return await new QueryWarnsReportExecutor().Client(this).Execute<QueryWarnsReportResponse, QueryWarnsReportResult, QueryWarnsReportRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询位置信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLocationsResponse QueryLocations(QueryLocationsRequest request) {
            return  new QueryLocationsExecutor().Client(this).Execute<QueryLocationsResponse, QueryLocationsResult, QueryLocationsRequest>(request);
        }
#else
        /// <summary>
        /// 查询位置信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLocationsResponse> QueryLocations(QueryLocationsRequest request) {
            return await new QueryLocationsExecutor().Client(this).Execute<QueryLocationsResponse, QueryLocationsResult, QueryLocationsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 统计当前用户所有主机一周内的漏洞数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLeaksRecentCountsResponse QueryLeaksRecentCounts(QueryLeaksRecentCountsRequest request) {
            return  new QueryLeaksRecentCountsExecutor().Client(this).Execute<QueryLeaksRecentCountsResponse, QueryLeaksRecentCountsResult, QueryLeaksRecentCountsRequest>(request);
        }
#else
        /// <summary>
        /// 统计当前用户所有主机一周内的漏洞数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLeaksRecentCountsResponse> QueryLeaksRecentCounts(QueryLeaksRecentCountsRequest request) {
            return await new QueryLeaksRecentCountsExecutor().Client(this).Execute<QueryLeaksRecentCountsResponse, QueryLeaksRecentCountsResult, QueryLeaksRecentCountsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询通知詳情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryNoticeResponse QueryNotice(QueryNoticeRequest request) {
            return  new QueryNoticeExecutor().Client(this).Execute<QueryNoticeResponse, QueryNoticeResult, QueryNoticeRequest>(request);
        }
#else
        /// <summary>
        /// 查询通知詳情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryNoticeResponse> QueryNotice(QueryNoticeRequest request) {
            return await new QueryNoticeExecutor().Client(this).Execute<QueryNoticeResponse, QueryNoticeResult, QueryNoticeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据用户信息返回没有安装agent的主机信息列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryServerNoAgentResponse QueryServerNoAgent(QueryServerNoAgentRequest request) {
            return  new QueryServerNoAgentExecutor().Client(this).Execute<QueryServerNoAgentResponse, QueryServerNoAgentResult, QueryServerNoAgentRequest>(request);
        }
#else
        /// <summary>
        /// 根据用户信息返回没有安装agent的主机信息列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryServerNoAgentResponse> QueryServerNoAgent(QueryServerNoAgentRequest request) {
            return await new QueryServerNoAgentExecutor().Client(this).Execute<QueryServerNoAgentResponse, QueryServerNoAgentResult, QueryServerNoAgentRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取告警列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsInfosResponse QueryWarnsInfos(QueryWarnsInfosRequest request) {
            return  new QueryWarnsInfosExecutor().Client(this).Execute<QueryWarnsInfosResponse, QueryWarnsInfosResult, QueryWarnsInfosRequest>(request);
        }
#else
        /// <summary>
        /// 获取告警列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsInfosResponse> QueryWarnsInfos(QueryWarnsInfosRequest request) {
            return await new QueryWarnsInfosExecutor().Client(this).Execute<QueryWarnsInfosResponse, QueryWarnsInfosResult, QueryWarnsInfosRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询主机的漏洞详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryServerLeakInfosResponse QueryServerLeakInfos(QueryServerLeakInfosRequest request) {
            return  new QueryServerLeakInfosExecutor().Client(this).Execute<QueryServerLeakInfosResponse, QueryServerLeakInfosResult, QueryServerLeakInfosRequest>(request);
        }
#else
        /// <summary>
        /// 查询主机的漏洞详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryServerLeakInfosResponse> QueryServerLeakInfos(QueryServerLeakInfosRequest request) {
            return await new QueryServerLeakInfosExecutor().Client(this).Execute<QueryServerLeakInfosResponse, QueryServerLeakInfosResult, QueryServerLeakInfosRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询主机指定漏洞的修复建议
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryServerHandleLeaksAdviceResponse QueryServerHandleLeaksAdvice(QueryServerHandleLeaksAdviceRequest request) {
            return  new QueryServerHandleLeaksAdviceExecutor().Client(this).Execute<QueryServerHandleLeaksAdviceResponse, QueryServerHandleLeaksAdviceResult, QueryServerHandleLeaksAdviceRequest>(request);
        }
#else
        /// <summary>
        /// 查询主机指定漏洞的修复建议
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryServerHandleLeaksAdviceResponse> QueryServerHandleLeaksAdvice(QueryServerHandleLeaksAdviceRequest request) {
            return await new QueryServerHandleLeaksAdviceExecutor().Client(this).Execute<QueryServerHandleLeaksAdviceResponse, QueryServerHandleLeaksAdviceResult, QueryServerHandleLeaksAdviceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据主机id获得暴力破解列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsServerAttacksResponse QueryWarnsServerAttacks(QueryWarnsServerAttacksRequest request) {
            return  new QueryWarnsServerAttacksExecutor().Client(this).Execute<QueryWarnsServerAttacksResponse, QueryWarnsServerAttacksResult, QueryWarnsServerAttacksRequest>(request);
        }
#else
        /// <summary>
        /// 根据主机id获得暴力破解列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsServerAttacksResponse> QueryWarnsServerAttacks(QueryWarnsServerAttacksRequest request) {
            return await new QueryWarnsServerAttacksExecutor().Client(this).Execute<QueryWarnsServerAttacksResponse, QueryWarnsServerAttacksResult, QueryWarnsServerAttacksRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取弱口令数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsWeakPasswordCountResponse QueryWarnsWeakPasswordCount(QueryWarnsWeakPasswordCountRequest request) {
            return  new QueryWarnsWeakPasswordCountExecutor().Client(this).Execute<QueryWarnsWeakPasswordCountResponse, QueryWarnsWeakPasswordCountResult, QueryWarnsWeakPasswordCountRequest>(request);
        }
#else
        /// <summary>
        /// 获取弱口令数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsWeakPasswordCountResponse> QueryWarnsWeakPasswordCount(QueryWarnsWeakPasswordCountRequest request) {
            return await new QueryWarnsWeakPasswordCountExecutor().Client(this).Execute<QueryWarnsWeakPasswordCountResponse, QueryWarnsWeakPasswordCountResult, QueryWarnsWeakPasswordCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置常用登录地(只对安装Agent的主机生效)
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetServerLoginLocationsResponse SetServerLoginLocations(SetServerLoginLocationsRequest request) {
            return  new SetServerLoginLocationsExecutor().Client(this).Execute<SetServerLoginLocationsResponse, SetServerLoginLocationsResult, SetServerLoginLocationsRequest>(request);
        }
#else
        /// <summary>
        /// 设置常用登录地(只对安装Agent的主机生效)
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetServerLoginLocationsResponse> SetServerLoginLocations(SetServerLoginLocationsRequest request) {
            return await new SetServerLoginLocationsExecutor().Client(this).Execute<SetServerLoginLocationsResponse, SetServerLoginLocationsResult, SetServerLoginLocationsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据主机获得异地登陆列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsServerRemoteLoginsResponse QueryWarnsServerRemoteLogins(QueryWarnsServerRemoteLoginsRequest request) {
            return  new QueryWarnsServerRemoteLoginsExecutor().Client(this).Execute<QueryWarnsServerRemoteLoginsResponse, QueryWarnsServerRemoteLoginsResult, QueryWarnsServerRemoteLoginsRequest>(request);
        }
#else
        /// <summary>
        /// 根据主机获得异地登陆列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsServerRemoteLoginsResponse> QueryWarnsServerRemoteLogins(QueryWarnsServerRemoteLoginsRequest request) {
            return await new QueryWarnsServerRemoteLoginsExecutor().Client(this).Execute<QueryWarnsServerRemoteLoginsResponse, QueryWarnsServerRemoteLoginsResult, QueryWarnsServerRemoteLoginsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据主机Id获得木马攻击列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsServerWebShellsResponse QueryWarnsServerWebShells(QueryWarnsServerWebShellsRequest request) {
            return  new QueryWarnsServerWebShellsExecutor().Client(this).Execute<QueryWarnsServerWebShellsResponse, QueryWarnsServerWebShellsResult, QueryWarnsServerWebShellsRequest>(request);
        }
#else
        /// <summary>
        /// 根据主机Id获得木马攻击列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsServerWebShellsResponse> QueryWarnsServerWebShells(QueryWarnsServerWebShellsRequest request) {
            return await new QueryWarnsServerWebShellsExecutor().Client(this).Execute<QueryWarnsServerWebShellsResponse, QueryWarnsServerWebShellsResult, QueryWarnsServerWebShellsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询主机信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryServersResponse QueryServers(QueryServersRequest request) {
            return  new QueryServersExecutor().Client(this).Execute<QueryServersResponse, QueryServersResult, QueryServersRequest>(request);
        }
#else
        /// <summary>
        /// 查询主机信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryServersResponse> QueryServers(QueryServersRequest request) {
            return await new QueryServersExecutor().Client(this).Execute<QueryServersResponse, QueryServersResult, QueryServersRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据用户信息返回没有安装agent的主机总数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryServerNoAgentCountResponse QueryServerNoAgentCount(QueryServerNoAgentCountRequest request) {
            return  new QueryServerNoAgentCountExecutor().Client(this).Execute<QueryServerNoAgentCountResponse, QueryServerNoAgentCountResult, QueryServerNoAgentCountRequest>(request);
        }
#else
        /// <summary>
        /// 根据用户信息返回没有安装agent的主机总数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryServerNoAgentCountResponse> QueryServerNoAgentCount(QueryServerNoAgentCountRequest request) {
            return await new QueryServerNoAgentCountExecutor().Client(this).Execute<QueryServerNoAgentCountResponse, QueryServerNoAgentCountResult, QueryServerNoAgentCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获得异地登陆列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsRemoteLoginsResponse QueryWarnsRemoteLogins(QueryWarnsRemoteLoginsRequest request) {
            return  new QueryWarnsRemoteLoginsExecutor().Client(this).Execute<QueryWarnsRemoteLoginsResponse, QueryWarnsRemoteLoginsResult, QueryWarnsRemoteLoginsRequest>(request);
        }
#else
        /// <summary>
        /// 获得异地登陆列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsRemoteLoginsResponse> QueryWarnsRemoteLogins(QueryWarnsRemoteLoginsRequest request) {
            return await new QueryWarnsRemoteLoginsExecutor().Client(this).Execute<QueryWarnsRemoteLoginsResponse, QueryWarnsRemoteLoginsResult, QueryWarnsRemoteLoginsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取攻击数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsAttackCountResponse QueryWarnsAttackCount(QueryWarnsAttackCountRequest request) {
            return  new QueryWarnsAttackCountExecutor().Client(this).Execute<QueryWarnsAttackCountResponse, QueryWarnsAttackCountResult, QueryWarnsAttackCountRequest>(request);
        }
#else
        /// <summary>
        /// 获取攻击数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsAttackCountResponse> QueryWarnsAttackCount(QueryWarnsAttackCountRequest request) {
            return await new QueryWarnsAttackCountExecutor().Client(this).Execute<QueryWarnsAttackCountResponse, QueryWarnsAttackCountResult, QueryWarnsAttackCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置报警通知规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetNotifyRuleResponse SetNotifyRule(SetNotifyRuleRequest request) {
            return  new SetNotifyRuleExecutor().Client(this).Execute<SetNotifyRuleResponse, SetNotifyRuleResult, SetNotifyRuleRequest>(request);
        }
#else
        /// <summary>
        /// 设置报警通知规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetNotifyRuleResponse> SetNotifyRule(SetNotifyRuleRequest request) {
            return await new SetNotifyRuleExecutor().Client(this).Execute<SetNotifyRuleResponse, SetNotifyRuleResult, SetNotifyRuleRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询通知
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryNoticesResponse QueryNotices(QueryNoticesRequest request) {
            return  new QueryNoticesExecutor().Client(this).Execute<QueryNoticesResponse, QueryNoticesResult, QueryNoticesRequest>(request);
        }
#else
        /// <summary>
        /// 查询通知
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryNoticesResponse> QueryNotices(QueryNoticesRequest request) {
            return await new QueryNoticesExecutor().Client(this).Execute<QueryNoticesResponse, QueryNoticesResult, QueryNoticesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询报警通知规则列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryNotifyRulesResponse QueryNotifyRules(QueryNotifyRulesRequest request) {
            return  new QueryNotifyRulesExecutor().Client(this).Execute<QueryNotifyRulesResponse, QueryNotifyRulesResult, QueryNotifyRulesRequest>(request);
        }
#else
        /// <summary>
        /// 查询报警通知规则列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryNotifyRulesResponse> QueryNotifyRules(QueryNotifyRulesRequest request) {
            return await new QueryNotifyRulesExecutor().Client(this).Execute<QueryNotifyRulesResponse, QueryNotifyRulesResult, QueryNotifyRulesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 统计当前用户所有主机漏洞前五的机器
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLeaksTopCountServersResponse QueryLeaksTopCountServers(QueryLeaksTopCountServersRequest request) {
            return  new QueryLeaksTopCountServersExecutor().Client(this).Execute<QueryLeaksTopCountServersResponse, QueryLeaksTopCountServersResult, QueryLeaksTopCountServersRequest>(request);
        }
#else
        /// <summary>
        /// 统计当前用户所有主机漏洞前五的机器
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLeaksTopCountServersResponse> QueryLeaksTopCountServers(QueryLeaksTopCountServersRequest request) {
            return await new QueryLeaksTopCountServersExecutor().Client(this).Execute<QueryLeaksTopCountServersResponse, QueryLeaksTopCountServersResult, QueryLeaksTopCountServersRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据系统类型，统计7天漏洞数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLeaksRecentCountByOSResponse QueryLeaksRecentCountByOS(QueryLeaksRecentCountByOSRequest request) {
            return  new QueryLeaksRecentCountByOSExecutor().Client(this).Execute<QueryLeaksRecentCountByOSResponse, QueryLeaksRecentCountByOSResult, QueryLeaksRecentCountByOSRequest>(request);
        }
#else
        /// <summary>
        /// 根据系统类型，统计7天漏洞数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLeaksRecentCountByOSResponse> QueryLeaksRecentCountByOS(QueryLeaksRecentCountByOSRequest request) {
            return await new QueryLeaksRecentCountByOSExecutor().Client(this).Execute<QueryLeaksRecentCountByOSResponse, QueryLeaksRecentCountByOSResult, QueryLeaksRecentCountByOSRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取告警计数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsCountResponse QueryWarnsCount(QueryWarnsCountRequest request) {
            return  new QueryWarnsCountExecutor().Client(this).Execute<QueryWarnsCountResponse, QueryWarnsCountResult, QueryWarnsCountRequest>(request);
        }
#else
        /// <summary>
        /// 获取告警计数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsCountResponse> QueryWarnsCount(QueryWarnsCountRequest request) {
            return await new QueryWarnsCountExecutor().Client(this).Execute<QueryWarnsCountResponse, QueryWarnsCountResult, QueryWarnsCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修复主机漏洞
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public FixServerLeaksResponse FixServerLeaks(FixServerLeaksRequest request) {
            return  new FixServerLeaksExecutor().Client(this).Execute<FixServerLeaksResponse, FixServerLeaksResult, FixServerLeaksRequest>(request);
        }
#else
        /// <summary>
        /// 修复主机漏洞
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<FixServerLeaksResponse> FixServerLeaks(FixServerLeaksRequest request) {
            return await new FixServerLeaksExecutor().Client(this).Execute<FixServerLeaksResponse, FixServerLeaksResult, FixServerLeaksRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取远程登录数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsRemoteLoginCountResponse QueryWarnsRemoteLoginCount(QueryWarnsRemoteLoginCountRequest request) {
            return  new QueryWarnsRemoteLoginCountExecutor().Client(this).Execute<QueryWarnsRemoteLoginCountResponse, QueryWarnsRemoteLoginCountResult, QueryWarnsRemoteLoginCountRequest>(request);
        }
#else
        /// <summary>
        /// 获取远程登录数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsRemoteLoginCountResponse> QueryWarnsRemoteLoginCount(QueryWarnsRemoteLoginCountRequest request) {
            return await new QueryWarnsRemoteLoginCountExecutor().Client(this).Execute<QueryWarnsRemoteLoginCountResponse, QueryWarnsRemoteLoginCountResult, QueryWarnsRemoteLoginCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获得弱口令列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsWeakPasswordInfosResponse QueryWarnsWeakPasswordInfos(QueryWarnsWeakPasswordInfosRequest request) {
            return  new QueryWarnsWeakPasswordInfosExecutor().Client(this).Execute<QueryWarnsWeakPasswordInfosResponse, QueryWarnsWeakPasswordInfosResult, QueryWarnsWeakPasswordInfosRequest>(request);
        }
#else
        /// <summary>
        /// 获得弱口令列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsWeakPasswordInfosResponse> QueryWarnsWeakPasswordInfos(QueryWarnsWeakPasswordInfosRequest request) {
            return await new QueryWarnsWeakPasswordInfosExecutor().Client(this).Execute<QueryWarnsWeakPasswordInfosResponse, QueryWarnsWeakPasswordInfosResult, QueryWarnsWeakPasswordInfosRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询当前用户所有主机一周内的漏洞列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLeaksResponse QueryLeaks(QueryLeaksRequest request) {
            return  new QueryLeaksExecutor().Client(this).Execute<QueryLeaksResponse, QueryLeaksResult, QueryLeaksRequest>(request);
        }
#else
        /// <summary>
        /// 查询当前用户所有主机一周内的漏洞列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLeaksResponse> QueryLeaks(QueryLeaksRequest request) {
            return await new QueryLeaksExecutor().Client(this).Execute<QueryLeaksResponse, QueryLeaksResult, QueryLeaksRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询报警通知规则联系人
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryNotifyRuleContactsResponse QueryNotifyRuleContacts(QueryNotifyRuleContactsRequest request) {
            return  new QueryNotifyRuleContactsExecutor().Client(this).Execute<QueryNotifyRuleContactsResponse, QueryNotifyRuleContactsResult, QueryNotifyRuleContactsRequest>(request);
        }
#else
        /// <summary>
        /// 查询报警通知规则联系人
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryNotifyRuleContactsResponse> QueryNotifyRuleContacts(QueryNotifyRuleContactsRequest request) {
            return await new QueryNotifyRuleContactsExecutor().Client(this).Execute<QueryNotifyRuleContactsResponse, QueryNotifyRuleContactsResult, QueryNotifyRuleContactsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询常用登录地
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryServerLoginLocationsResponse QueryServerLoginLocations(QueryServerLoginLocationsRequest request) {
            return  new QueryServerLoginLocationsExecutor().Client(this).Execute<QueryServerLoginLocationsResponse, QueryServerLoginLocationsResult, QueryServerLoginLocationsRequest>(request);
        }
#else
        /// <summary>
        /// 查询常用登录地
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryServerLoginLocationsResponse> QueryServerLoginLocations(QueryServerLoginLocationsRequest request) {
            return await new QueryServerLoginLocationsExecutor().Client(this).Execute<QueryServerLoginLocationsResponse, QueryServerLoginLocationsResult, QueryServerLoginLocationsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获得暴力破解列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryWarnsAttackInfosResponse QueryWarnsAttackInfos(QueryWarnsAttackInfosRequest request) {
            return  new QueryWarnsAttackInfosExecutor().Client(this).Execute<QueryWarnsAttackInfosResponse, QueryWarnsAttackInfosResult, QueryWarnsAttackInfosRequest>(request);
        }
#else
        /// <summary>
        /// 获得暴力破解列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryWarnsAttackInfosResponse> QueryWarnsAttackInfos(QueryWarnsAttackInfosRequest request) {
            return await new QueryWarnsAttackInfosExecutor().Client(this).Execute<QueryWarnsAttackInfosResponse, QueryWarnsAttackInfosResult, QueryWarnsAttackInfosRequest>(request);
        }
#endif

            /// <summary>
            ///  默认HipsClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>hipsClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>hipsClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>hipsClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造HipsClient 对象
                ///</summary>
                HipsClient Build();
            }

            /// <summary>
            ///  默认HipsClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// HipsClient service client
                /// </summary>
                private  HipsClient hipsClient;

                /// <summary>
                ///  默认HipsClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    hipsClient = new HipsClient();
                }

                /// <summary>
                ///  构造HipsClient 对象
                ///</summary>
                public HipsClient Build()
                {
                    if (hipsClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        hipsClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (hipsClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("HipsClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (hipsClient.HttpRequestConfig == null)
                    {
                        hipsClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (hipsClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("HipsClient build error: http request config not set");
                        }
                    }
                    return hipsClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>hipsClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    hipsClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>hipsClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    hipsClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>hipsClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    hipsClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
