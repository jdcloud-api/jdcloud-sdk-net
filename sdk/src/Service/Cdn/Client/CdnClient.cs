/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD CDN Operation And Query API
 * API related to CDN instances
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Cdn.Apis;
using JDCloudSDK.Cdn.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Cdn.Client
{
    /// <summary>
    ///  JDCLOUD CDN Operation And Query API
    ///  API related to CDN instances
    ///  Cdn Api 客户端
    ///</summary>
    public class CdnClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private CdnClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public CdnClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public CdnClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public CdnClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.7
        ///</summary>
        public const string ClientVersion = "1.0.7";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "cdn.jdcloud-api.com";
        private const string serviceName = "cdn";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        ///  分地区及运营商查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsDataGroupByAreaResponse QueryStatisticsDataGroupByArea(QueryStatisticsDataGroupByAreaRequest request) {
            return  new QueryStatisticsDataGroupByAreaExecutor().Client(this).Execute<QueryStatisticsDataGroupByAreaResponse, QueryStatisticsDataGroupByAreaResult, QueryStatisticsDataGroupByAreaRequest>(request);
        }
#else
        /// <summary>
        ///  分地区及运营商查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsDataGroupByAreaResponse> QueryStatisticsDataGroupByArea(QueryStatisticsDataGroupByAreaRequest request) {
            return await new QueryStatisticsDataGroupByAreaExecutor().Client(this).Execute<QueryStatisticsDataGroupByAreaResponse, QueryStatisticsDataGroupByAreaResult, QueryStatisticsDataGroupByAreaRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  停止加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StopDomainResponse StopDomain(StopDomainRequest request) {
            return  new StopDomainExecutor().Client(this).Execute<StopDomainResponse, StopDomainResult, StopDomainRequest>(request);
        }
#else
        /// <summary>
        ///  停止加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StopDomainResponse> StopDomain(StopDomainRequest request) {
            return await new StopDomainExecutor().Client(this).Execute<StopDomainResponse, StopDomainResult, StopDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询TOP IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsTopIpResponse QueryStatisticsTopIp(QueryStatisticsTopIpRequest request) {
            return  new QueryStatisticsTopIpExecutor().Client(this).Execute<QueryStatisticsTopIpResponse, QueryStatisticsTopIpResult, QueryStatisticsTopIpRequest>(request);
        }
#else
        /// <summary>
        ///  查询TOP IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsTopIpResponse> QueryStatisticsTopIp(QueryStatisticsTopIpRequest request) {
            return await new QueryStatisticsTopIpExecutor().Client(this).Execute<QueryStatisticsTopIpResponse, QueryStatisticsTopIpResult, QueryStatisticsTopIpRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteDomainResponse DeleteDomain(DeleteDomainRequest request) {
            return  new DeleteDomainExecutor().Client(this).Execute<DeleteDomainResponse, DeleteDomainResult, DeleteDomainRequest>(request);
        }
#else
        /// <summary>
        ///  删除加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteDomainResponse> DeleteDomain(DeleteDomainRequest request) {
            return await new DeleteDomainExecutor().Client(this).Execute<DeleteDomainResponse, DeleteDomainResult, DeleteDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsDataResponse QueryStatisticsData(QueryStatisticsDataRequest request) {
            return  new QueryStatisticsDataExecutor().Client(this).Execute<QueryStatisticsDataResponse, QueryStatisticsDataResult, QueryStatisticsDataRequest>(request);
        }
#else
        /// <summary>
        ///  查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsDataResponse> QueryStatisticsData(QueryStatisticsDataRequest request) {
            return await new QueryStatisticsDataExecutor().Client(this).Execute<QueryStatisticsDataResponse, QueryStatisticsDataResult, QueryStatisticsDataRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询TOP Url
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsTopUrlResponse QueryStatisticsTopUrl(QueryStatisticsTopUrlRequest request) {
            return  new QueryStatisticsTopUrlExecutor().Client(this).Execute<QueryStatisticsTopUrlResponse, QueryStatisticsTopUrlResult, QueryStatisticsTopUrlRequest>(request);
        }
#else
        /// <summary>
        ///  查询TOP Url
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsTopUrlResponse> QueryStatisticsTopUrl(QueryStatisticsTopUrlRequest request) {
            return await new QueryStatisticsTopUrlExecutor().Client(this).Execute<QueryStatisticsTopUrlResponse, QueryStatisticsTopUrlResult, QueryStatisticsTopUrlRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询统计数据并进行汇总加和
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsDataGroupSumResponse QueryStatisticsDataGroupSum(QueryStatisticsDataGroupSumRequest request) {
            return  new QueryStatisticsDataGroupSumExecutor().Client(this).Execute<QueryStatisticsDataGroupSumResponse, QueryStatisticsDataGroupSumResult, QueryStatisticsDataGroupSumRequest>(request);
        }
#else
        /// <summary>
        ///  查询统计数据并进行汇总加和
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsDataGroupSumResponse> QueryStatisticsDataGroupSum(QueryStatisticsDataGroupSumRequest request) {
            return await new QueryStatisticsDataGroupSumExecutor().Client(this).Execute<QueryStatisticsDataGroupSumResponse, QueryStatisticsDataGroupSumResult, QueryStatisticsDataGroupSumRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询加速域名接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDomainListResponse GetDomainList(GetDomainListRequest request) {
            return  new GetDomainListExecutor().Client(this).Execute<GetDomainListResponse, GetDomainListResult, GetDomainListRequest>(request);
        }
#else
        /// <summary>
        ///  查询加速域名接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDomainListResponse> GetDomainList(GetDomainListRequest request) {
            return await new GetDomainListExecutor().Client(this).Execute<GetDomainListResponse, GetDomainListResult, GetDomainListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询加速域名详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDomainDetailResponse GetDomainDetail(GetDomainDetailRequest request) {
            return  new GetDomainDetailExecutor().Client(this).Execute<GetDomainDetailResponse, GetDomainDetailResult, GetDomainDetailRequest>(request);
        }
#else
        /// <summary>
        ///  查询加速域名详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDomainDetailResponse> GetDomainDetail(GetDomainDetailRequest request) {
            return await new GetDomainDetailExecutor().Client(this).Execute<GetDomainDetailResponse, GetDomainDetailResult, GetDomainDetailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  启动加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StartDomainResponse StartDomain(StartDomainRequest request) {
            return  new StartDomainExecutor().Client(this).Execute<StartDomainResponse, StartDomainResult, StartDomainRequest>(request);
        }
#else
        /// <summary>
        ///  启动加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StartDomainResponse> StartDomain(StartDomainRequest request) {
            return await new StartDomainExecutor().Client(this).Execute<StartDomainResponse, StartDomainResult, StartDomainRequest>(request);
        }
#endif

            /// <summary>
            ///  默认CdnClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>cdnClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>cdnClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>cdnClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造CdnClient 对象
                ///</summary>
                CdnClient Build();
            }

            /// <summary>
            ///  默认CdnClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                ///  CdnClient service client
                /// </summary>
                private  CdnClient cdnClient;

                /// <summary>
                ///  默认CdnClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    cdnClient = new CdnClient();
                }

                /// <summary>
                ///  构造CdnClient 对象
                ///</summary>
                public CdnClient Build()
                {
                    if (cdnClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        cdnClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (cdnClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("CdnClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (cdnClient.HttpRequestConfig == null)
                    {
                        cdnClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (cdnClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("CdnClient build error: http request config not set");
                        }
                    }
                    return cdnClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>cdnClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    cdnClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>cdnClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    cdnClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>cdnClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    cdnClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
