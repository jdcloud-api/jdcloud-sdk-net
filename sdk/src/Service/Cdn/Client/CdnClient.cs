/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD CDN instance API
 * API related to CDN instances
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Cdn.Apis;
using JDCloudSDK.Cdn.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Cdn.Client
{
    /// <summary>
    /// JDCLOUD CDN instance API
    /// API related to CDN instances
    /// Cdn Api 客户端
    ///</summary>
    public class CdnClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private CdnClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public CdnClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public CdnClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public CdnClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "cdn.jdcloud-api.com";
        private const string serviceName = "cdn";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 查询CDN鉴权设置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeAccessKeyConfigResponse DescribeAccessKeyConfig(DescribeAccessKeyConfigRequest request) {
            return  new DescribeAccessKeyConfigExecutor().Client(this).Execute<DescribeAccessKeyConfigResponse, DescribeAccessKeyConfigResult, DescribeAccessKeyConfigRequest>(request);
        }
#else
        /// <summary>
        /// 查询CDN鉴权设置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeAccessKeyConfigResponse> DescribeAccessKeyConfig(DescribeAccessKeyConfigRequest request) {
            return await new DescribeAccessKeyConfigExecutor().Client(this).Execute<DescribeAccessKeyConfigResponse, DescribeAccessKeyConfigResult, DescribeAccessKeyConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询日志下载地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeDownloadUrlResponse DescribeDownloadUrl(DescribeDownloadUrlRequest request) {
            return  new DescribeDownloadUrlExecutor().Client(this).Execute<DescribeDownloadUrlResponse, DescribeDownloadUrlResult, DescribeDownloadUrlRequest>(request);
        }
#else
        /// <summary>
        /// 查询日志下载地址
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeDownloadUrlResponse> DescribeDownloadUrl(DescribeDownloadUrlRequest request) {
            return await new DescribeDownloadUrlExecutor().Client(this).Execute<DescribeDownloadUrlResponse, DescribeDownloadUrlResult, DescribeDownloadUrlRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// CDN刷新接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RefreshResponse Refresh(RefreshRequest request) {
            return  new RefreshExecutor().Client(this).Execute<RefreshResponse, RefreshResult, RefreshRequest>(request);
        }
#else
        /// <summary>
        /// CDN刷新接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RefreshResponse> Refresh(RefreshRequest request) {
            return await new RefreshExecutor().Client(this).Execute<RefreshResponse, RefreshResult, RefreshRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询域名缓存配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCdnCacheResponse DescribeCdnCache(DescribeCdnCacheRequest request) {
            return  new DescribeCdnCacheExecutor().Client(this).Execute<DescribeCdnCacheResponse, DescribeCdnCacheResult, DescribeCdnCacheRequest>(request);
        }
#else
        /// <summary>
        /// 查询域名缓存配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCdnCacheResponse> DescribeCdnCache(DescribeCdnCacheRequest request) {
            return await new DescribeCdnCacheExecutor().Client(this).Execute<DescribeCdnCacheResponse, DescribeCdnCacheResult, DescribeCdnCacheRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询CDN预热结果
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribePrefetchResponse DescribePrefetch(DescribePrefetchRequest request) {
            return  new DescribePrefetchExecutor().Client(this).Execute<DescribePrefetchResponse, DescribePrefetchResult, DescribePrefetchRequest>(request);
        }
#else
        /// <summary>
        /// 查询CDN预热结果
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribePrefetchResponse> DescribePrefetch(DescribePrefetchRequest request) {
            return await new DescribePrefetchExecutor().Client(this).Execute<DescribePrefetchResponse, DescribePrefetchResult, DescribePrefetchRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置忽略参数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetIgnoreArgsResponse SetIgnoreArgs(SetIgnoreArgsRequest request) {
            return  new SetIgnoreArgsExecutor().Client(this).Execute<SetIgnoreArgsResponse, SetIgnoreArgsResult, SetIgnoreArgsRequest>(request);
        }
#else
        /// <summary>
        /// 设置忽略参数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetIgnoreArgsResponse> SetIgnoreArgs(SetIgnoreArgsRequest request) {
            return await new SetIgnoreArgsExecutor().Client(this).Execute<SetIgnoreArgsResponse, SetIgnoreArgsResult, SetIgnoreArgsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置Range参数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetRangeArgsResponse SetRangeArgs(SetRangeArgsRequest request) {
            return  new SetRangeArgsExecutor().Client(this).Execute<SetRangeArgsResponse, SetRangeArgsResult, SetRangeArgsRequest>(request);
        }
#else
        /// <summary>
        /// 设置Range参数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetRangeArgsResponse> SetRangeArgs(SetRangeArgsRequest request) {
            return await new SetRangeArgsExecutor().Client(this).Execute<SetRangeArgsResponse, SetRangeArgsResult, SetRangeArgsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置回源Host
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetReferHostResponse SetReferHost(SetReferHostRequest request) {
            return  new SetReferHostExecutor().Client(this).Execute<SetReferHostResponse, SetReferHostResult, SetReferHostRequest>(request);
        }
#else
        /// <summary>
        /// 设置回源Host
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetReferHostResponse> SetReferHost(SetReferHostRequest request) {
            return await new SetReferHostExecutor().Client(this).Execute<SetReferHostResponse, SetReferHostResult, SetReferHostRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改回源策略
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifySourceResponse ModifySource(ModifySourceRequest request) {
            return  new ModifySourceExecutor().Client(this).Execute<ModifySourceResponse, ModifySourceResult, ModifySourceRequest>(request);
        }
#else
        /// <summary>
        /// 修改回源策略
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifySourceResponse> ModifySource(ModifySourceRequest request) {
            return await new ModifySourceExecutor().Client(this).Execute<ModifySourceResponse, ModifySourceResult, ModifySourceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询CDN域名列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCdnDomainsResponse DescribeCdnDomains(DescribeCdnDomainsRequest request) {
            return  new DescribeCdnDomainsExecutor().Client(this).Execute<DescribeCdnDomainsResponse, DescribeCdnDomainsResult, DescribeCdnDomainsRequest>(request);
        }
#else
        /// <summary>
        /// 查询CDN域名列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCdnDomainsResponse> DescribeCdnDomains(DescribeCdnDomainsRequest request) {
            return await new DescribeCdnDomainsExecutor().Client(this).Execute<DescribeCdnDomainsResponse, DescribeCdnDomainsResult, DescribeCdnDomainsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建CDN加速域名的实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateCdnDomainResponse CreateCdnDomain(CreateCdnDomainRequest request) {
            return  new CreateCdnDomainExecutor().Client(this).Execute<CreateCdnDomainResponse, CreateCdnDomainResult, CreateCdnDomainRequest>(request);
        }
#else
        /// <summary>
        /// 创建CDN加速域名的实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateCdnDomainResponse> CreateCdnDomain(CreateCdnDomainRequest request) {
            return await new CreateCdnDomainExecutor().Client(this).Execute<CreateCdnDomainResponse, CreateCdnDomainResult, CreateCdnDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 停止CDN域名，只能停止启用状态的域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StopCdnDomainResponse StopCdnDomain(StopCdnDomainRequest request) {
            return  new StopCdnDomainExecutor().Client(this).Execute<StopCdnDomainResponse, StopCdnDomainResult, StopCdnDomainRequest>(request);
        }
#else
        /// <summary>
        /// 停止CDN域名，只能停止启用状态的域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StopCdnDomainResponse> StopCdnDomain(StopCdnDomainRequest request) {
            return await new StopCdnDomainExecutor().Client(this).Execute<StopCdnDomainResponse, StopCdnDomainResult, StopCdnDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 启动单个实例，只能启动停止状态的实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StartCdnDomainResponse StartCdnDomain(StartCdnDomainRequest request) {
            return  new StartCdnDomainExecutor().Client(this).Execute<StartCdnDomainResponse, StartCdnDomainResult, StartCdnDomainRequest>(request);
        }
#else
        /// <summary>
        /// 启动单个实例，只能启动停止状态的实例
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StartCdnDomainResponse> StartCdnDomain(StartCdnDomainRequest request) {
            return await new StartCdnDomainExecutor().Client(this).Execute<StartCdnDomainResponse, StartCdnDomainResult, StartCdnDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// CDN预热
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public PrefetchResponse Prefetch(PrefetchRequest request) {
            return  new PrefetchExecutor().Client(this).Execute<PrefetchResponse, PrefetchResult, PrefetchRequest>(request);
        }
#else
        /// <summary>
        /// CDN预热
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<PrefetchResponse> Prefetch(PrefetchRequest request) {
            return await new PrefetchExecutor().Client(this).Execute<PrefetchResponse, PrefetchResult, PrefetchRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置URL鉴权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetAccessKeyConfigResponse SetAccessKeyConfig(SetAccessKeyConfigRequest request) {
            return  new SetAccessKeyConfigExecutor().Client(this).Execute<SetAccessKeyConfigResponse, SetAccessKeyConfigResult, SetAccessKeyConfigRequest>(request);
        }
#else
        /// <summary>
        /// 设置URL鉴权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetAccessKeyConfigResponse> SetAccessKeyConfig(SetAccessKeyConfigRequest request) {
            return await new SetAccessKeyConfigExecutor().Client(this).Execute<SetAccessKeyConfigResponse, SetAccessKeyConfigResult, SetAccessKeyConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置通信协议
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetHttpTypeResponse SetHttpType(SetHttpTypeRequest request) {
            return  new SetHttpTypeExecutor().Client(this).Execute<SetHttpTypeResponse, SetHttpTypeResult, SetHttpTypeRequest>(request);
        }
#else
        /// <summary>
        /// 设置通信协议
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetHttpTypeResponse> SetHttpType(SetHttpTypeRequest request) {
            return await new SetHttpTypeExecutor().Client(this).Execute<SetHttpTypeResponse, SetHttpTypeResult, SetHttpTypeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询域名配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeDomainConfigsResponse DescribeDomainConfigs(DescribeDomainConfigsRequest request) {
            return  new DescribeDomainConfigsExecutor().Client(this).Execute<DescribeDomainConfigsResponse, DescribeDomainConfigsResult, DescribeDomainConfigsRequest>(request);
        }
#else
        /// <summary>
        /// 查询域名配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeDomainConfigsResponse> DescribeDomainConfigs(DescribeDomainConfigsRequest request) {
            return await new DescribeDomainConfigsExecutor().Client(this).Execute<DescribeDomainConfigsResponse, DescribeDomainConfigsResult, DescribeDomainConfigsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 设置黑白名单信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetReferConfigResponse SetReferConfig(SetReferConfigRequest request) {
            return  new SetReferConfigExecutor().Client(this).Execute<SetReferConfigResponse, SetReferConfigResult, SetReferConfigRequest>(request);
        }
#else
        /// <summary>
        /// 设置黑白名单信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetReferConfigResponse> SetReferConfig(SetReferConfigRequest request) {
            return await new SetReferConfigExecutor().Client(this).Execute<SetReferConfigResponse, SetReferConfigResult, SetReferConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除单个CDN加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteCdnDomainResponse DeleteCdnDomain(DeleteCdnDomainRequest request) {
            return  new DeleteCdnDomainExecutor().Client(this).Execute<DeleteCdnDomainResponse, DeleteCdnDomainResult, DeleteCdnDomainRequest>(request);
        }
#else
        /// <summary>
        /// 删除单个CDN加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteCdnDomainResponse> DeleteCdnDomain(DeleteCdnDomainRequest request) {
            return await new DeleteCdnDomainExecutor().Client(this).Execute<DeleteCdnDomainResponse, DeleteCdnDomainResult, DeleteCdnDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询CDN刷新结果
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeRefreshResponse DescribeRefresh(DescribeRefreshRequest request) {
            return  new DescribeRefreshExecutor().Client(this).Execute<DescribeRefreshResponse, DescribeRefreshResult, DescribeRefreshRequest>(request);
        }
#else
        /// <summary>
        /// 查询CDN刷新结果
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeRefreshResponse> DescribeRefresh(DescribeRefreshRequest request) {
            return await new DescribeRefreshExecutor().Client(this).Execute<DescribeRefreshResponse, DescribeRefreshResult, DescribeRefreshRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 缓存策略变更
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyCacheResponse ModifyCache(ModifyCacheRequest request) {
            return  new ModifyCacheExecutor().Client(this).Execute<ModifyCacheResponse, ModifyCacheResult, ModifyCacheRequest>(request);
        }
#else
        /// <summary>
        /// 缓存策略变更
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyCacheResponse> ModifyCache(ModifyCacheRequest request) {
            return await new ModifyCacheExecutor().Client(this).Execute<ModifyCacheResponse, ModifyCacheResult, ModifyCacheRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询CDN加速域名详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCdnDomainResponse DescribeCdnDomain(DescribeCdnDomainRequest request) {
            return  new DescribeCdnDomainExecutor().Client(this).Execute<DescribeCdnDomainResponse, DescribeCdnDomainResult, DescribeCdnDomainRequest>(request);
        }
#else
        /// <summary>
        /// 查询CDN加速域名详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCdnDomainResponse> DescribeCdnDomain(DescribeCdnDomainRequest request) {
            return await new DescribeCdnDomainExecutor().Client(this).Execute<DescribeCdnDomainResponse, DescribeCdnDomainResult, DescribeCdnDomainRequest>(request);
        }
#endif

            /// <summary>
            ///  默认CdnClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>cdnClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>cdnClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>cdnClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造CdnClient 对象
                ///</summary>
                CdnClient Build();
            }

            /// <summary>
            ///  默认CdnClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// CdnClient service client
                /// </summary>
                private  CdnClient cdnClient;

                /// <summary>
                ///  默认CdnClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    cdnClient = new CdnClient();
                }

                /// <summary>
                ///  构造CdnClient 对象
                ///</summary>
                public CdnClient Build()
                {
                    if (cdnClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        cdnClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (cdnClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("CdnClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (cdnClient.HttpRequestConfig == null)
                    {
                        cdnClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (cdnClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("CdnClient build error: http request config not set");
                        }
                    }
                    return cdnClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>cdnClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    cdnClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>cdnClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    cdnClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>cdnClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    cdnClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
