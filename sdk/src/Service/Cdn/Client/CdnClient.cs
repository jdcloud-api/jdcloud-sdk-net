/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD CDN Operation And Query API
 * API related to CDN instances
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Cdn.Apis;
using JDCloudSDK.Cdn.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Cdn.Client
{
    /// <summary>
    ///  JDCLOUD CDN Operation And Query API
    ///  API related to CDN instances
    ///  Cdn Api 客户端
    ///</summary>
    public class CdnClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private CdnClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public CdnClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public CdnClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public CdnClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.1.0
        ///</summary>
        public const string ClientVersion = "1.1.0";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "cdn.jdcloud-api.com";
        private const string serviceName = "cdn";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        ///  设置线上计费方式
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetOnlineBillingTypeResponse SetOnlineBillingType(SetOnlineBillingTypeRequest request) {
            return  new SetOnlineBillingTypeExecutor().Client(this).Execute<SetOnlineBillingTypeResponse, SetOnlineBillingTypeResult, SetOnlineBillingTypeRequest>(request);
        }
#else
        /// <summary>
        ///  设置线上计费方式
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetOnlineBillingTypeResponse> SetOnlineBillingType(SetOnlineBillingTypeRequest request) {
            return await new SetOnlineBillingTypeExecutor().Client(this).Execute<SetOnlineBillingTypeResponse, SetOnlineBillingTypeResult, SetOnlineBillingTypeRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询统计数据并进行汇总加和
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryMixTrafficGroupSumResponse QueryMixTrafficGroupSum(QueryMixTrafficGroupSumRequest request) {
            return  new QueryMixTrafficGroupSumExecutor().Client(this).Execute<QueryMixTrafficGroupSumResponse, QueryMixTrafficGroupSumResult, QueryMixTrafficGroupSumRequest>(request);
        }
#else
        /// <summary>
        ///  查询统计数据并进行汇总加和
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryMixTrafficGroupSumResponse> QueryMixTrafficGroupSum(QueryMixTrafficGroupSumRequest request) {
            return await new QueryMixTrafficGroupSumExecutor().Client(this).Execute<QueryMixTrafficGroupSumResponse, QueryMixTrafficGroupSumResult, QueryMixTrafficGroupSumRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询域名组详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryDomainGroupDetailResponse QueryDomainGroupDetail(QueryDomainGroupDetailRequest request) {
            return  new QueryDomainGroupDetailExecutor().Client(this).Execute<QueryDomainGroupDetailResponse, QueryDomainGroupDetailResult, QueryDomainGroupDetailRequest>(request);
        }
#else
        /// <summary>
        ///  查询域名组详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryDomainGroupDetailResponse> QueryDomainGroupDetail(QueryDomainGroupDetailRequest request) {
            return await new QueryDomainGroupDetailExecutor().Client(this).Execute<QueryDomainGroupDetailResponse, QueryDomainGroupDetailResult, QueryDomainGroupDetailRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除httpHeader
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteHttpHeaderResponse DeleteHttpHeader(DeleteHttpHeaderRequest request) {
            return  new DeleteHttpHeaderExecutor().Client(this).Execute<DeleteHttpHeaderResponse, DeleteHttpHeaderResult, DeleteHttpHeaderRequest>(request);
        }
#else
        /// <summary>
        ///  删除httpHeader
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteHttpHeaderResponse> DeleteHttpHeader(DeleteHttpHeaderRequest request) {
            return await new DeleteHttpHeaderExecutor().Client(this).Execute<DeleteHttpHeaderResponse, DeleteHttpHeaderResult, DeleteHttpHeaderRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询oss存储域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryOssBucketsResponse QueryOssBuckets(QueryOssBucketsRequest request) {
            return  new QueryOssBucketsExecutor().Client(this).Execute<QueryOssBucketsResponse, QueryOssBucketsResult, QueryOssBucketsRequest>(request);
        }
#else
        /// <summary>
        ///  查询oss存储域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryOssBucketsResponse> QueryOssBuckets(QueryOssBucketsRequest request) {
            return await new QueryOssBucketsExecutor().Client(this).Execute<QueryOssBucketsResponse, QueryOssBucketsResult, QueryOssBucketsRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryIpBlackListResponse QueryIpBlackList(QueryIpBlackListRequest request) {
            return  new QueryIpBlackListExecutor().Client(this).Execute<QueryIpBlackListResponse, QueryIpBlackListResult, QueryIpBlackListRequest>(request);
        }
#else
        /// <summary>
        ///  查询ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryIpBlackListResponse> QueryIpBlackList(QueryIpBlackListRequest request) {
            return await new QueryIpBlackListExecutor().Client(this).Execute<QueryIpBlackListResponse, QueryIpBlackListResult, QueryIpBlackListRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置直播域名回源host
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetLiveDomainBackSourceHostResponse SetLiveDomainBackSourceHost(SetLiveDomainBackSourceHostRequest request) {
            return  new SetLiveDomainBackSourceHostExecutor().Client(this).Execute<SetLiveDomainBackSourceHostResponse, SetLiveDomainBackSourceHostResult, SetLiveDomainBackSourceHostRequest>(request);
        }
#else
        /// <summary>
        ///  设置直播域名回源host
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetLiveDomainBackSourceHostResponse> SetLiveDomainBackSourceHost(SetLiveDomainBackSourceHostRequest request) {
            return await new SetLiveDomainBackSourceHostExecutor().Client(this).Execute<SetLiveDomainBackSourceHostResponse, SetLiveDomainBackSourceHostResult, SetLiveDomainBackSourceHostRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询TOP Url
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsTopUrlResponse QueryStatisticsTopUrl(QueryStatisticsTopUrlRequest request) {
            return  new QueryStatisticsTopUrlExecutor().Client(this).Execute<QueryStatisticsTopUrlResponse, QueryStatisticsTopUrlResult, QueryStatisticsTopUrlRequest>(request);
        }
#else
        /// <summary>
        ///  查询TOP Url
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsTopUrlResponse> QueryStatisticsTopUrl(QueryStatisticsTopUrlRequest request) {
            return await new QueryStatisticsTopUrlExecutor().Client(this).Execute<QueryStatisticsTopUrlResponse, QueryStatisticsTopUrlResult, QueryStatisticsTopUrlRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置转协议
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetProtocolConvertResponse SetProtocolConvert(SetProtocolConvertRequest request) {
            return  new SetProtocolConvertExecutor().Client(this).Execute<SetProtocolConvertResponse, SetProtocolConvertResult, SetProtocolConvertRequest>(request);
        }
#else
        /// <summary>
        ///  设置转协议
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetProtocolConvertResponse> SetProtocolConvert(SetProtocolConvertRequest request) {
            return await new SetProtocolConvertExecutor().Client(this).Execute<SetProtocolConvertResponse, SetProtocolConvertResult, SetProtocolConvertRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  获取所有上层节点的ip
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetAllUpperNodeIpListResponse GetAllUpperNodeIpList(GetAllUpperNodeIpListRequest request) {
            return  new GetAllUpperNodeIpListExecutor().Client(this).Execute<GetAllUpperNodeIpListResponse, GetAllUpperNodeIpListResult, GetAllUpperNodeIpListRequest>(request);
        }
#else
        /// <summary>
        ///  获取所有上层节点的ip
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetAllUpperNodeIpListResponse> GetAllUpperNodeIpList(GetAllUpperNodeIpListRequest request) {
            return await new GetAllUpperNodeIpListExecutor().Client(this).Execute<GetAllUpperNodeIpListResponse, GetAllUpperNodeIpListResult, GetAllUpperNodeIpListRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  分地区及运营商查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLiveStatisticsAreaDataGroupByResponse QueryLiveStatisticsAreaDataGroupBy(QueryLiveStatisticsAreaDataGroupByRequest request) {
            return  new QueryLiveStatisticsAreaDataGroupByExecutor().Client(this).Execute<QueryLiveStatisticsAreaDataGroupByResponse, QueryLiveStatisticsAreaDataGroupByResult, QueryLiveStatisticsAreaDataGroupByRequest>(request);
        }
#else
        /// <summary>
        ///  分地区及运营商查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLiveStatisticsAreaDataGroupByResponse> QueryLiveStatisticsAreaDataGroupBy(QueryLiveStatisticsAreaDataGroupByRequest request) {
            return await new QueryLiveStatisticsAreaDataGroupByExecutor().Client(this).Execute<QueryLiveStatisticsAreaDataGroupByResponse, QueryLiveStatisticsAreaDataGroupByResult, QueryLiveStatisticsAreaDataGroupByRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询加速域名接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDomainListResponse GetDomainList(GetDomainListRequest request) {
            return  new GetDomainListExecutor().Client(this).Execute<GetDomainListResponse, GetDomainListResult, GetDomainListRequest>(request);
        }
#else
        /// <summary>
        ///  查询加速域名接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDomainListResponse> GetDomainList(GetDomainListRequest request) {
            return await new GetDomainListExecutor().Client(this).Execute<GetDomainListResponse, GetDomainListResult, GetDomainListRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置域名refer防盗链
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetLiveDomainReferResponse SetLiveDomainRefer(SetLiveDomainReferRequest request) {
            return  new SetLiveDomainReferExecutor().Client(this).Execute<SetLiveDomainReferResponse, SetLiveDomainReferResult, SetLiveDomainReferRequest>(request);
        }
#else
        /// <summary>
        ///  设置域名refer防盗链
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetLiveDomainReferResponse> SetLiveDomainRefer(SetLiveDomainReferRequest request) {
            return await new SetLiveDomainReferExecutor().Client(this).Execute<SetLiveDomainReferResponse, SetLiveDomainReferResult, SetLiveDomainReferRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetIpBlackListResponse SetIpBlackList(SetIpBlackListRequest request) {
            return  new SetIpBlackListExecutor().Client(this).Execute<SetIpBlackListResponse, SetIpBlackListResult, SetIpBlackListRequest>(request);
        }
#else
        /// <summary>
        ///  设置ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetIpBlackListResponse> SetIpBlackList(SetIpBlackListRequest request) {
            return await new SetIpBlackListExecutor().Client(this).Execute<SetIpBlackListResponse, SetIpBlackListResult, SetIpBlackListRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置忽略参数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetIgnoreQueryStringResponse SetIgnoreQueryString(SetIgnoreQueryStringRequest request) {
            return  new SetIgnoreQueryStringExecutor().Client(this).Execute<SetIgnoreQueryStringResponse, SetIgnoreQueryStringResult, SetIgnoreQueryStringRequest>(request);
        }
#else
        /// <summary>
        ///  设置忽略参数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetIgnoreQueryStringResponse> SetIgnoreQueryString(SetIgnoreQueryStringRequest request) {
            return await new SetIgnoreQueryStringExecutor().Client(this).Execute<SetIgnoreQueryStringResponse, SetIgnoreQueryStringResult, SetIgnoreQueryStringRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  批量删除域名组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public BatchDeleteDomainGroupResponse BatchDeleteDomainGroup(BatchDeleteDomainGroupRequest request) {
            return  new BatchDeleteDomainGroupExecutor().Client(this).Execute<BatchDeleteDomainGroupResponse, BatchDeleteDomainGroupResult, BatchDeleteDomainGroupRequest>(request);
        }
#else
        /// <summary>
        ///  批量删除域名组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<BatchDeleteDomainGroupResponse> BatchDeleteDomainGroup(BatchDeleteDomainGroupRequest request) {
            return await new BatchDeleteDomainGroupExecutor().Client(this).Execute<BatchDeleteDomainGroupResponse, BatchDeleteDomainGroupResult, BatchDeleteDomainGroupRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置userAgent信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetUserAgentConfigResponse SetUserAgentConfig(SetUserAgentConfigRequest request) {
            return  new SetUserAgentConfigExecutor().Client(this).Execute<SetUserAgentConfigResponse, SetUserAgentConfigResult, SetUserAgentConfigRequest>(request);
        }
#else
        /// <summary>
        ///  设置userAgent信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetUserAgentConfigResponse> SetUserAgentConfig(SetUserAgentConfigRequest request) {
            return await new SetUserAgentConfigExecutor().Client(this).Execute<SetUserAgentConfigResponse, SetUserAgentConfigResult, SetUserAgentConfigRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置直播域名回源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetLiveDomainBackSourceResponse SetLiveDomainBackSource(SetLiveDomainBackSourceRequest request) {
            return  new SetLiveDomainBackSourceExecutor().Client(this).Execute<SetLiveDomainBackSourceResponse, SetLiveDomainBackSourceResult, SetLiveDomainBackSourceRequest>(request);
        }
#else
        /// <summary>
        ///  设置直播域名回源信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetLiveDomainBackSourceResponse> SetLiveDomainBackSource(SetLiveDomainBackSourceRequest request) {
            return await new SetLiveDomainBackSourceExecutor().Client(this).Execute<SetLiveDomainBackSourceResponse, SetLiveDomainBackSourceResult, SetLiveDomainBackSourceRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置协议跟随回源
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetFollowSourceProtocolResponse SetFollowSourceProtocol(SetFollowSourceProtocolRequest request) {
            return  new SetFollowSourceProtocolExecutor().Client(this).Execute<SetFollowSourceProtocolResponse, SetFollowSourceProtocolResult, SetFollowSourceProtocolRequest>(request);
        }
#else
        /// <summary>
        ///  设置协议跟随回源
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetFollowSourceProtocolResponse> SetFollowSourceProtocol(SetFollowSourceProtocolRequest request) {
            return await new SetFollowSourceProtocolExecutor().Client(this).Execute<SetFollowSourceProtocolResponse, SetFollowSourceProtocolResult, SetFollowSourceProtocolRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查看证书列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetSslCertListResponse GetSslCertList(GetSslCertListRequest request) {
            return  new GetSslCertListExecutor().Client(this).Execute<GetSslCertListResponse, GetSslCertListResult, GetSslCertListRequest>(request);
        }
#else
        /// <summary>
        ///  查看证书列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetSslCertListResponse> GetSslCertList(GetSslCertListRequest request) {
            return await new GetSslCertListExecutor().Client(this).Execute<GetSslCertListResponse, GetSslCertListResult, GetSslCertListRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置回源302跳转
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetFollowRedirectResponse SetFollowRedirect(SetFollowRedirectRequest request) {
            return  new SetFollowRedirectExecutor().Client(this).Execute<SetFollowRedirectResponse, SetFollowRedirectResult, SetFollowRedirectRequest>(request);
        }
#else
        /// <summary>
        ///  设置回源302跳转
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetFollowRedirectResponse> SetFollowRedirect(SetFollowRedirectRequest request) {
            return await new SetFollowRedirectExecutor().Client(this).Execute<SetFollowRedirectResponse, SetFollowRedirectResult, SetFollowRedirectRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  启动加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StartDomainResponse StartDomain(StartDomainRequest request) {
            return  new StartDomainExecutor().Client(this).Execute<StartDomainResponse, StartDomainResult, StartDomainRequest>(request);
        }
#else
        /// <summary>
        ///  启动加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StartDomainResponse> StartDomain(StartDomainRequest request) {
            return await new StartDomainExecutor().Client(this).Execute<StartDomainResponse, StartDomainResult, StartDomainRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置url鉴权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetAccesskeyConfigResponse SetAccesskeyConfig(SetAccesskeyConfigRequest request) {
            return  new SetAccesskeyConfigExecutor().Client(this).Execute<SetAccesskeyConfigResponse, SetAccesskeyConfigResult, SetAccesskeyConfigRequest>(request);
        }
#else
        /// <summary>
        ///  设置url鉴权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetAccesskeyConfigResponse> SetAccesskeyConfig(SetAccesskeyConfigRequest request) {
            return await new SetAccesskeyConfigExecutor().Client(this).Execute<SetAccesskeyConfigResponse, SetAccesskeyConfigResult, SetAccesskeyConfigRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置range参数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetRangeResponse SetRange(SetRangeRequest request) {
            return  new SetRangeExecutor().Client(this).Execute<SetRangeResponse, SetRangeResult, SetRangeRequest>(request);
        }
#else
        /// <summary>
        ///  设置range参数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetRangeResponse> SetRange(SetRangeRequest request) {
            return await new SetRangeExecutor().Client(this).Execute<SetRangeResponse, SetRangeResult, SetRangeRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建点播加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateDomainResponse CreateDomain(CreateDomainRequest request) {
            return  new CreateDomainExecutor().Client(this).Execute<CreateDomainResponse, CreateDomainResult, CreateDomainRequest>(request);
        }
#else
        /// <summary>
        ///  创建点播加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateDomainResponse> CreateDomain(CreateDomainRequest request) {
            return await new CreateDomainExecutor().Client(this).Execute<CreateDomainResponse, CreateDomainResult, CreateDomainRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询域名配置信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryDomainConfigResponse QueryDomainConfig(QueryDomainConfigRequest request) {
            return  new QueryDomainConfigExecutor().Client(this).Execute<QueryDomainConfigResponse, QueryDomainConfigResult, QueryDomainConfigRequest>(request);
        }
#else
        /// <summary>
        ///  查询域名配置信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryDomainConfigResponse> QueryDomainConfig(QueryDomainConfigRequest request) {
            return await new QueryDomainConfigExecutor().Client(this).Execute<QueryDomainConfigResponse, QueryDomainConfigResult, QueryDomainConfigRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置视频拖拽
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetVideoDraftResponse SetVideoDraft(SetVideoDraftRequest request) {
            return  new SetVideoDraftExecutor().Client(this).Execute<SetVideoDraftResponse, SetVideoDraftResult, SetVideoDraftRequest>(request);
        }
#else
        /// <summary>
        ///  设置视频拖拽
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetVideoDraftResponse> SetVideoDraft(SetVideoDraftRequest request) {
            return await new SetVideoDraftExecutor().Client(this).Execute<SetVideoDraftResponse, SetVideoDraftResult, SetVideoDraftRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置直播域名ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetLiveDomainIpBlackListResponse SetLiveDomainIpBlackList(SetLiveDomainIpBlackListRequest request) {
            return  new SetLiveDomainIpBlackListExecutor().Client(this).Execute<SetLiveDomainIpBlackListResponse, SetLiveDomainIpBlackListResult, SetLiveDomainIpBlackListRequest>(request);
        }
#else
        /// <summary>
        ///  设置直播域名ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetLiveDomainIpBlackListResponse> SetLiveDomainIpBlackList(SetLiveDomainIpBlackListRequest request) {
            return await new SetLiveDomainIpBlackListExecutor().Client(this).Execute<SetLiveDomainIpBlackListResponse, SetLiveDomainIpBlackListResult, SetLiveDomainIpBlackListRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询源站监控信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryMonitorResponse QueryMonitor(QueryMonitorRequest request) {
            return  new QueryMonitorExecutor().Client(this).Execute<QueryMonitorResponse, QueryMonitorResult, QueryMonitorRequest>(request);
        }
#else
        /// <summary>
        ///  查询源站监控信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryMonitorResponse> QueryMonitor(QueryMonitorRequest request) {
            return await new QueryMonitorExecutor().Client(this).Execute<QueryMonitorResponse, QueryMonitorResult, QueryMonitorRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  泛域名共享缓存
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public OperateShareCacheResponse OperateShareCache(OperateShareCacheRequest request) {
            return  new OperateShareCacheExecutor().Client(this).Execute<OperateShareCacheResponse, OperateShareCacheResult, OperateShareCacheRequest>(request);
        }
#else
        /// <summary>
        ///  泛域名共享缓存
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<OperateShareCacheResponse> OperateShareCache(OperateShareCacheRequest request) {
            return await new OperateShareCacheExecutor().Client(this).Execute<OperateShareCacheResponse, OperateShareCacheResult, OperateShareCacheRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询直播域名app列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLiveDomainAppsResponse QueryLiveDomainApps(QueryLiveDomainAppsRequest request) {
            return  new QueryLiveDomainAppsExecutor().Client(this).Execute<QueryLiveDomainAppsResponse, QueryLiveDomainAppsResult, QueryLiveDomainAppsRequest>(request);
        }
#else
        /// <summary>
        ///  查询直播域名app列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLiveDomainAppsResponse> QueryLiveDomainApps(QueryLiveDomainAppsRequest request) {
            return await new QueryLiveDomainAppsExecutor().Client(this).Execute<QueryLiveDomainAppsResponse, QueryLiveDomainAppsResult, QueryLiveDomainAppsRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  分地区及运营商查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryMixStatisticsWithAreaDataResponse QueryMixStatisticsWithAreaData(QueryMixStatisticsWithAreaDataRequest request) {
            return  new QueryMixStatisticsWithAreaDataExecutor().Client(this).Execute<QueryMixStatisticsWithAreaDataResponse, QueryMixStatisticsWithAreaDataResult, QueryMixStatisticsWithAreaDataRequest>(request);
        }
#else
        /// <summary>
        ///  分地区及运营商查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryMixStatisticsWithAreaDataResponse> QueryMixStatisticsWithAreaData(QueryMixStatisticsWithAreaDataRequest request) {
            return await new QueryMixStatisticsWithAreaDataExecutor().Client(this).Execute<QueryMixStatisticsWithAreaDataResponse, QueryMixStatisticsWithAreaDataResult, QueryMixStatisticsWithAreaDataRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  开启或关闭ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public OperateLiveDomainIpBlackListResponse OperateLiveDomainIpBlackList(OperateLiveDomainIpBlackListRequest request) {
            return  new OperateLiveDomainIpBlackListExecutor().Client(this).Execute<OperateLiveDomainIpBlackListResponse, OperateLiveDomainIpBlackListResult, OperateLiveDomainIpBlackListRequest>(request);
        }
#else
        /// <summary>
        ///  开启或关闭ip黑名单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<OperateLiveDomainIpBlackListResponse> OperateLiveDomainIpBlackList(OperateLiveDomainIpBlackListRequest request) {
            return await new OperateLiveDomainIpBlackListExecutor().Client(this).Execute<OperateLiveDomainIpBlackListResponse, OperateLiveDomainIpBlackListResult, OperateLiveDomainIpBlackListRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsDataResponse QueryStatisticsData(QueryStatisticsDataRequest request) {
            return  new QueryStatisticsDataExecutor().Client(this).Execute<QueryStatisticsDataResponse, QueryStatisticsDataResult, QueryStatisticsDataRequest>(request);
        }
#else
        /// <summary>
        ///  查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsDataResponse> QueryStatisticsData(QueryStatisticsDataRequest request) {
            return await new QueryStatisticsDataExecutor().Client(this).Execute<QueryStatisticsDataResponse, QueryStatisticsDataResult, QueryStatisticsDataRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查找地域运营商列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAreaIspListResponse QueryAreaIspList(QueryAreaIspListRequest request) {
            return  new QueryAreaIspListExecutor().Client(this).Execute<QueryAreaIspListResponse, QueryAreaIspListResult, QueryAreaIspListRequest>(request);
        }
#else
        /// <summary>
        ///  查找地域运营商列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAreaIspListResponse> QueryAreaIspList(QueryAreaIspListRequest request) {
            return await new QueryAreaIspListExecutor().Client(this).Execute<QueryAreaIspListResponse, QueryAreaIspListResult, QueryAreaIspListRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建域名组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateDomainGroupResponse CreateDomainGroup(CreateDomainGroupRequest request) {
            return  new CreateDomainGroupExecutor().Client(this).Execute<CreateDomainGroupResponse, CreateDomainGroupResult, CreateDomainGroupRequest>(request);
        }
#else
        /// <summary>
        ///  创建域名组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateDomainGroupResponse> CreateDomainGroup(CreateDomainGroupRequest request) {
            return await new CreateDomainGroupExecutor().Client(this).Execute<CreateDomainGroupResponse, CreateDomainGroupResult, CreateDomainGroupRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置ip黑名单状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public OperateIpBlackListResponse OperateIpBlackList(OperateIpBlackListRequest request) {
            return  new OperateIpBlackListExecutor().Client(this).Execute<OperateIpBlackListResponse, OperateIpBlackListResult, OperateIpBlackListRequest>(request);
        }
#else
        /// <summary>
        ///  设置ip黑名单状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<OperateIpBlackListResponse> OperateIpBlackList(OperateIpBlackListRequest request) {
            return await new OperateIpBlackListExecutor().Client(this).Execute<OperateIpBlackListResponse, OperateIpBlackListResult, OperateIpBlackListRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryMixStatisticsDataResponse QueryMixStatisticsData(QueryMixStatisticsDataRequest request) {
            return  new QueryMixStatisticsDataExecutor().Client(this).Execute<QueryMixStatisticsDataResponse, QueryMixStatisticsDataResult, QueryMixStatisticsDataRequest>(request);
        }
#else
        /// <summary>
        ///  查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryMixStatisticsDataResponse> QueryMixStatisticsData(QueryMixStatisticsDataRequest request) {
            return await new QueryMixStatisticsDataExecutor().Client(this).Execute<QueryMixStatisticsDataResponse, QueryMixStatisticsDataResult, QueryMixStatisticsDataRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询刷新预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryRefreshTaskResponse QueryRefreshTask(QueryRefreshTaskRequest request) {
            return  new QueryRefreshTaskExecutor().Client(this).Execute<QueryRefreshTaskResponse, QueryRefreshTaskResult, QueryRefreshTaskRequest>(request);
        }
#else
        /// <summary>
        ///  查询刷新预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryRefreshTaskResponse> QueryRefreshTask(QueryRefreshTaskRequest request) {
            return await new QueryRefreshTaskExecutor().Client(this).Execute<QueryRefreshTaskResponse, QueryRefreshTaskResult, QueryRefreshTaskRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询默认http header头部参数列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryDefaultHttpHeaderKeyResponse QueryDefaultHttpHeaderKey(QueryDefaultHttpHeaderKeyRequest request) {
            return  new QueryDefaultHttpHeaderKeyExecutor().Client(this).Execute<QueryDefaultHttpHeaderKeyResponse, QueryDefaultHttpHeaderKeyResult, QueryDefaultHttpHeaderKeyRequest>(request);
        }
#else
        /// <summary>
        ///  查询默认http header头部参数列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryDefaultHttpHeaderKeyResponse> QueryDefaultHttpHeaderKey(QueryDefaultHttpHeaderKeyRequest request) {
            return await new QueryDefaultHttpHeaderKeyExecutor().Client(this).Execute<QueryDefaultHttpHeaderKeyResponse, QueryDefaultHttpHeaderKeyResult, QueryDefaultHttpHeaderKeyRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询加速域名详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDomainDetailResponse GetDomainDetail(GetDomainDetailRequest request) {
            return  new GetDomainDetailExecutor().Client(this).Execute<GetDomainDetailResponse, GetDomainDetailResult, GetDomainDetailRequest>(request);
        }
#else
        /// <summary>
        ///  查询加速域名详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDomainDetailResponse> GetDomainDetail(GetDomainDetailRequest request) {
            return await new GetDomainDetailExecutor().Client(this).Execute<GetDomainDetailResponse, GetDomainDetailResult, GetDomainDetailRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置源站监控信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetMonitorResponse SetMonitor(SetMonitorRequest request) {
            return  new SetMonitorExecutor().Client(this).Execute<SetMonitorResponse, SetMonitorResult, SetMonitorRequest>(request);
        }
#else
        /// <summary>
        ///  设置源站监控信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetMonitorResponse> SetMonitor(SetMonitorRequest request) {
            return await new SetMonitorExecutor().Client(this).Execute<SetMonitorResponse, SetMonitorResult, SetMonitorRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteDomainResponse DeleteDomain(DeleteDomainRequest request) {
            return  new DeleteDomainExecutor().Client(this).Execute<DeleteDomainResponse, DeleteDomainResult, DeleteDomainRequest>(request);
        }
#else
        /// <summary>
        ///  删除加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteDomainResponse> DeleteDomain(DeleteDomainRequest request) {
            return await new DeleteDomainExecutor().Client(this).Execute<DeleteDomainResponse, DeleteDomainResult, DeleteDomainRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置userAgent信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryUserAgentResponse QueryUserAgent(QueryUserAgentRequest request) {
            return  new QueryUserAgentExecutor().Client(this).Execute<QueryUserAgentResponse, QueryUserAgentResult, QueryUserAgentRequest>(request);
        }
#else
        /// <summary>
        ///  设置userAgent信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryUserAgentResponse> QueryUserAgent(QueryUserAgentRequest request) {
            return await new QueryUserAgentExecutor().Client(this).Execute<QueryUserAgentResponse, QueryUserAgentResult, QueryUserAgentRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  通过标签查询加速域名接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDomainListByFilterResponse GetDomainListByFilter(GetDomainListByFilterRequest request) {
            return  new GetDomainListByFilterExecutor().Client(this).Execute<GetDomainListByFilterResponse, GetDomainListByFilterResult, GetDomainListByFilterRequest>(request);
        }
#else
        /// <summary>
        ///  通过标签查询加速域名接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDomainListByFilterResponse> GetDomainListByFilter(GetDomainListByFilterRequest request) {
            return await new GetDomainListByFilterExecutor().Client(this).Execute<GetDomainListByFilterResponse, GetDomainListByFilterResult, GetDomainListByFilterRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询回源302跳转信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryFollowRedirectResponse QueryFollowRedirect(QueryFollowRedirectRequest request) {
            return  new QueryFollowRedirectExecutor().Client(this).Execute<QueryFollowRedirectResponse, QueryFollowRedirectResult, QueryFollowRedirectRequest>(request);
        }
#else
        /// <summary>
        ///  查询回源302跳转信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryFollowRedirectResponse> QueryFollowRedirect(QueryFollowRedirectRequest request) {
            return await new QueryFollowRedirectExecutor().Client(this).Execute<QueryFollowRedirectResponse, QueryFollowRedirectResult, QueryFollowRedirectRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询用户推流域名app名/流名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryPushDomainORAppOrStreamResponse QueryPushDomainORAppOrStream(QueryPushDomainORAppOrStreamRequest request) {
            return  new QueryPushDomainORAppOrStreamExecutor().Client(this).Execute<QueryPushDomainORAppOrStreamResponse, QueryPushDomainORAppOrStreamResult, QueryPushDomainORAppOrStreamRequest>(request);
        }
#else
        /// <summary>
        ///  查询用户推流域名app名/流名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryPushDomainORAppOrStreamResponse> QueryPushDomainORAppOrStream(QueryPushDomainORAppOrStreamRequest request) {
            return await new QueryPushDomainORAppOrStreamExecutor().Client(this).Execute<QueryPushDomainORAppOrStreamResponse, QueryPushDomainORAppOrStreamResult, QueryPushDomainORAppOrStreamRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  分地区及运营商查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsDataGroupByAreaResponse QueryStatisticsDataGroupByArea(QueryStatisticsDataGroupByAreaRequest request) {
            return  new QueryStatisticsDataGroupByAreaExecutor().Client(this).Execute<QueryStatisticsDataGroupByAreaResponse, QueryStatisticsDataGroupByAreaResult, QueryStatisticsDataGroupByAreaRequest>(request);
        }
#else
        /// <summary>
        ///  分地区及运营商查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsDataGroupByAreaResponse> QueryStatisticsDataGroupByArea(QueryStatisticsDataGroupByAreaRequest request) {
            return await new QueryStatisticsDataGroupByAreaExecutor().Client(this).Execute<QueryStatisticsDataGroupByAreaResponse, QueryStatisticsDataGroupByAreaResult, QueryStatisticsDataGroupByAreaRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除缓存规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteCacheRuleResponse DeleteCacheRule(DeleteCacheRuleRequest request) {
            return  new DeleteCacheRuleExecutor().Client(this).Execute<DeleteCacheRuleResponse, DeleteCacheRuleResult, DeleteCacheRuleRequest>(request);
        }
#else
        /// <summary>
        ///  删除缓存规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteCacheRuleResponse> DeleteCacheRule(DeleteCacheRuleRequest request) {
            return await new DeleteCacheRuleExecutor().Client(this).Execute<DeleteCacheRuleResponse, DeleteCacheRuleResult, DeleteCacheRuleRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置URL鉴权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetLiveDomainAccessKeyResponse SetLiveDomainAccessKey(SetLiveDomainAccessKeyRequest request) {
            return  new SetLiveDomainAccessKeyExecutor().Client(this).Execute<SetLiveDomainAccessKeyResponse, SetLiveDomainAccessKeyResult, SetLiveDomainAccessKeyRequest>(request);
        }
#else
        /// <summary>
        ///  设置URL鉴权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetLiveDomainAccessKeyResponse> SetLiveDomainAccessKey(SetLiveDomainAccessKeyRequest request) {
            return await new SetLiveDomainAccessKeyExecutor().Client(this).Execute<SetLiveDomainAccessKeyResponse, SetLiveDomainAccessKeyResult, SetLiveDomainAccessKeyRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询域名组接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryDomainGroupListResponse QueryDomainGroupList(QueryDomainGroupListRequest request) {
            return  new QueryDomainGroupListExecutor().Client(this).Execute<QueryDomainGroupListResponse, QueryDomainGroupListResult, QueryDomainGroupListRequest>(request);
        }
#else
        /// <summary>
        ///  查询域名组接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryDomainGroupListResponse> QueryDomainGroupList(QueryDomainGroupListRequest request) {
            return await new QueryDomainGroupListExecutor().Client(this).Execute<QueryDomainGroupListResponse, QueryDomainGroupListResult, QueryDomainGroupListRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询未分组域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryDomainsNotInGroupResponse QueryDomainsNotInGroup(QueryDomainsNotInGroupRequest request) {
            return  new QueryDomainsNotInGroupExecutor().Client(this).Execute<QueryDomainsNotInGroupResponse, QueryDomainsNotInGroupResult, QueryDomainsNotInGroupRequest>(request);
        }
#else
        /// <summary>
        ///  查询未分组域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryDomainsNotInGroupResponse> QueryDomainsNotInGroup(QueryDomainsNotInGroupRequest request) {
            return await new QueryDomainsNotInGroupExecutor().Client(this).Execute<QueryDomainsNotInGroupResponse, QueryDomainsNotInGroupResult, QueryDomainsNotInGroupRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除禁播流
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteForbiddenStreamResponse DeleteForbiddenStream(DeleteForbiddenStreamRequest request) {
            return  new DeleteForbiddenStreamExecutor().Client(this).Execute<DeleteForbiddenStreamResponse, DeleteForbiddenStreamResult, DeleteForbiddenStreamRequest>(request);
        }
#else
        /// <summary>
        ///  删除禁播流
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteForbiddenStreamResponse> DeleteForbiddenStream(DeleteForbiddenStreamRequest request) {
            return await new DeleteForbiddenStreamExecutor().Client(this).Execute<DeleteForbiddenStreamResponse, DeleteForbiddenStreamResult, DeleteForbiddenStreamRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据taskIds查询刷新预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryRefreshTaskByIdsResponse QueryRefreshTaskByIds(QueryRefreshTaskByIdsRequest request) {
            return  new QueryRefreshTaskByIdsExecutor().Client(this).Execute<QueryRefreshTaskByIdsResponse, QueryRefreshTaskByIdsResult, QueryRefreshTaskByIdsRequest>(request);
        }
#else
        /// <summary>
        ///  根据taskIds查询刷新预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryRefreshTaskByIdsResponse> QueryRefreshTaskByIds(QueryRefreshTaskByIdsRequest request) {
            return await new QueryRefreshTaskByIdsExecutor().Client(this).Execute<QueryRefreshTaskByIdsResponse, QueryRefreshTaskByIdsResult, QueryRefreshTaskByIdsRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询协议跟随回源
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryFollowSourceProtocolResponse QueryFollowSourceProtocol(QueryFollowSourceProtocolRequest request) {
            return  new QueryFollowSourceProtocolExecutor().Client(this).Execute<QueryFollowSourceProtocolResponse, QueryFollowSourceProtocolResult, QueryFollowSourceProtocolRequest>(request);
        }
#else
        /// <summary>
        ///  查询协议跟随回源
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryFollowSourceProtocolResponse> QueryFollowSourceProtocol(QueryFollowSourceProtocolRequest request) {
            return await new QueryFollowSourceProtocolExecutor().Client(this).Execute<QueryFollowSourceProtocolResponse, QueryFollowSourceProtocolResult, QueryFollowSourceProtocolRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询统计数据并进行汇总加和
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsDataGroupSumResponse QueryStatisticsDataGroupSum(QueryStatisticsDataGroupSumRequest request) {
            return  new QueryStatisticsDataGroupSumExecutor().Client(this).Execute<QueryStatisticsDataGroupSumResponse, QueryStatisticsDataGroupSumResult, QueryStatisticsDataGroupSumRequest>(request);
        }
#else
        /// <summary>
        ///  查询统计数据并进行汇总加和
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsDataGroupSumResponse> QueryStatisticsDataGroupSum(QueryStatisticsDataGroupSumRequest request) {
            return await new QueryStatisticsDataGroupSumExecutor().Client(this).Execute<QueryStatisticsDataGroupSumResponse, QueryStatisticsDataGroupSumResult, QueryStatisticsDataGroupSumRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加httpHeader
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetHttpHeaderResponse SetHttpHeader(SetHttpHeaderRequest request) {
            return  new SetHttpHeaderExecutor().Client(this).Execute<SetHttpHeaderResponse, SetHttpHeaderResult, SetHttpHeaderRequest>(request);
        }
#else
        /// <summary>
        ///  添加httpHeader
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetHttpHeaderResponse> SetHttpHeader(SetHttpHeaderRequest request) {
            return await new SetHttpHeaderExecutor().Client(this).Execute<SetHttpHeaderResponse, SetHttpHeaderResult, SetHttpHeaderRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  更新域名组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateDomainGroupResponse UpdateDomainGroup(UpdateDomainGroupRequest request) {
            return  new UpdateDomainGroupExecutor().Client(this).Execute<UpdateDomainGroupResponse, UpdateDomainGroupResult, UpdateDomainGroupRequest>(request);
        }
#else
        /// <summary>
        ///  更新域名组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateDomainGroupResponse> UpdateDomainGroup(UpdateDomainGroupRequest request) {
            return await new UpdateDomainGroupExecutor().Client(this).Execute<UpdateDomainGroupResponse, UpdateDomainGroupResult, UpdateDomainGroupRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查看证书详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetSslCertDetailResponse GetSslCertDetail(GetSslCertDetailRequest request) {
            return  new GetSslCertDetailExecutor().Client(this).Execute<GetSslCertDetailResponse, GetSslCertDetailResult, GetSslCertDetailRequest>(request);
        }
#else
        /// <summary>
        ///  查看证书详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetSslCertDetailResponse> GetSslCertDetail(GetSslCertDetailRequest request) {
            return await new GetSslCertDetailExecutor().Client(this).Execute<GetSslCertDetailResponse, GetSslCertDetailResult, GetSslCertDetailRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  停止加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StopDomainResponse StopDomain(StopDomainRequest request) {
            return  new StopDomainExecutor().Client(this).Execute<StopDomainResponse, StopDomainResult, StopDomainRequest>(request);
        }
#else
        /// <summary>
        ///  停止加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StopDomainResponse> StopDomain(StopDomainRequest request) {
            return await new StopDomainExecutor().Client(this).Execute<StopDomainResponse, StopDomainResult, StopDomainRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLiveStatisticsDataResponse QueryLiveStatisticsData(QueryLiveStatisticsDataRequest request) {
            return  new QueryLiveStatisticsDataExecutor().Client(this).Execute<QueryLiveStatisticsDataResponse, QueryLiveStatisticsDataResult, QueryLiveStatisticsDataRequest>(request);
        }
#else
        /// <summary>
        ///  查询统计数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLiveStatisticsDataResponse> QueryLiveStatisticsData(QueryLiveStatisticsDataRequest request) {
            return await new QueryLiveStatisticsDataExecutor().Client(this).Execute<QueryLiveStatisticsDataResponse, QueryLiveStatisticsDataResult, QueryLiveStatisticsDataRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  批量域名查询日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryDomainsLogResponse QueryDomainsLog(QueryDomainsLogRequest request) {
            return  new QueryDomainsLogExecutor().Client(this).Execute<QueryDomainsLogResponse, QueryDomainsLogResult, QueryDomainsLogRequest>(request);
        }
#else
        /// <summary>
        ///  批量域名查询日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryDomainsLogResponse> QueryDomainsLog(QueryDomainsLogRequest request) {
            return await new QueryDomainsLogExecutor().Client(this).Execute<QueryDomainsLogResponse, QueryDomainsLogResult, QueryDomainsLogRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置域名refer
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetReferResponse SetRefer(SetReferRequest request) {
            return  new SetReferExecutor().Client(this).Execute<SetReferResponse, SetReferResult, SetReferRequest>(request);
        }
#else
        /// <summary>
        ///  设置域名refer
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetReferResponse> SetRefer(SetReferRequest request) {
            return await new SetReferExecutor().Client(this).Execute<SetReferResponse, SetReferResult, SetReferRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询直播域名详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLiveDomainDetailResponse QueryLiveDomainDetail(QueryLiveDomainDetailRequest request) {
            return  new QueryLiveDomainDetailExecutor().Client(this).Execute<QueryLiveDomainDetailResponse, QueryLiveDomainDetailResult, QueryLiveDomainDetailRequest>(request);
        }
#else
        /// <summary>
        ///  查询直播域名详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLiveDomainDetailResponse> QueryLiveDomainDetail(QueryLiveDomainDetailRequest request) {
            return await new QueryLiveDomainDetailExecutor().Client(this).Execute<QueryLiveDomainDetailResponse, QueryLiveDomainDetailResult, QueryLiveDomainDetailRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建刷新预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateRefreshTaskResponse CreateRefreshTask(CreateRefreshTaskRequest request) {
            return  new CreateRefreshTaskExecutor().Client(this).Execute<CreateRefreshTaskResponse, CreateRefreshTaskResult, CreateRefreshTaskRequest>(request);
        }
#else
        /// <summary>
        ///  创建刷新预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateRefreshTaskResponse> CreateRefreshTask(CreateRefreshTaskRequest request) {
            return await new CreateRefreshTaskExecutor().Client(this).Execute<CreateRefreshTaskResponse, CreateRefreshTaskResult, CreateRefreshTaskRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建直播预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateLiveDomainPrefecthTaskResponse CreateLiveDomainPrefecthTask(CreateLiveDomainPrefecthTaskRequest request) {
            return  new CreateLiveDomainPrefecthTaskExecutor().Client(this).Execute<CreateLiveDomainPrefecthTaskResponse, CreateLiveDomainPrefecthTaskResult, CreateLiveDomainPrefecthTaskRequest>(request);
        }
#else
        /// <summary>
        ///  创建直播预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateLiveDomainPrefecthTaskResponse> CreateLiveDomainPrefecthTask(CreateLiveDomainPrefecthTaskRequest request) {
            return await new CreateLiveDomainPrefecthTaskExecutor().Client(this).Execute<CreateLiveDomainPrefecthTaskResponse, CreateLiveDomainPrefecthTaskResult, CreateLiveDomainPrefecthTaskRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询TOP IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryStatisticsTopIpResponse QueryStatisticsTopIp(QueryStatisticsTopIpRequest request) {
            return  new QueryStatisticsTopIpExecutor().Client(this).Execute<QueryStatisticsTopIpResponse, QueryStatisticsTopIpResult, QueryStatisticsTopIpRequest>(request);
        }
#else
        /// <summary>
        ///  查询TOP IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryStatisticsTopIpResponse> QueryStatisticsTopIp(QueryStatisticsTopIpRequest request) {
            return await new QueryStatisticsTopIpExecutor().Client(this).Execute<QueryStatisticsTopIpResponse, QueryStatisticsTopIpResult, QueryStatisticsTopIpRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  预览证书
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public PreviewCertificateResponse PreviewCertificate(PreviewCertificateRequest request) {
            return  new PreviewCertificateExecutor().Client(this).Execute<PreviewCertificateResponse, PreviewCertificateResult, PreviewCertificateRequest>(request);
        }
#else
        /// <summary>
        ///  预览证书
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<PreviewCertificateResponse> PreviewCertificate(PreviewCertificateRequest request) {
            return await new PreviewCertificateExecutor().Client(this).Execute<PreviewCertificateResponse, PreviewCertificateResult, PreviewCertificateRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  停止源站监控
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StopMonitorResponse StopMonitor(StopMonitorRequest request) {
            return  new StopMonitorExecutor().Client(this).Execute<StopMonitorResponse, StopMonitorResult, StopMonitorRequest>(request);
        }
#else
        /// <summary>
        ///  停止源站监控
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StopMonitorResponse> StopMonitor(StopMonitorRequest request) {
            return await new StopMonitorExecutor().Client(this).Execute<StopMonitorResponse, StopMonitorResult, StopMonitorRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询url鉴权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAccesskeyConfigResponse QueryAccesskeyConfig(QueryAccesskeyConfigRequest request) {
            return  new QueryAccesskeyConfigExecutor().Client(this).Execute<QueryAccesskeyConfigResponse, QueryAccesskeyConfigResult, QueryAccesskeyConfigRequest>(request);
        }
#else
        /// <summary>
        ///  查询url鉴权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAccesskeyConfigResponse> QueryAccesskeyConfig(QueryAccesskeyConfigRequest request) {
            return await new QueryAccesskeyConfigExecutor().Client(this).Execute<QueryAccesskeyConfigResponse, QueryAccesskeyConfigResult, QueryAccesskeyConfigRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建刷新预热回调任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateRefreshTaskForCallbackResponse CreateRefreshTaskForCallback(CreateRefreshTaskForCallbackRequest request) {
            return  new CreateRefreshTaskForCallbackExecutor().Client(this).Execute<CreateRefreshTaskForCallbackResponse, CreateRefreshTaskForCallbackResult, CreateRefreshTaskForCallbackRequest>(request);
        }
#else
        /// <summary>
        ///  创建刷新预热回调任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateRefreshTaskForCallbackResponse> CreateRefreshTaskForCallback(CreateRefreshTaskForCallbackRequest request) {
            return await new CreateRefreshTaskForCallbackExecutor().Client(this).Execute<CreateRefreshTaskForCallbackResponse, CreateRefreshTaskForCallbackResult, CreateRefreshTaskForCallbackRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询http header头
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryHttpHeaderResponse QueryHttpHeader(QueryHttpHeaderRequest request) {
            return  new QueryHttpHeaderExecutor().Client(this).Execute<QueryHttpHeaderResponse, QueryHttpHeaderResult, QueryHttpHeaderRequest>(request);
        }
#else
        /// <summary>
        ///  查询http header头
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryHttpHeaderResponse> QueryHttpHeader(QueryHttpHeaderRequest request) {
            return await new QueryHttpHeaderExecutor().Client(this).Execute<QueryHttpHeaderResponse, QueryHttpHeaderResult, QueryHttpHeaderRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建点播加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public BatchCreateResponse BatchCreate(BatchCreateRequest request) {
            return  new BatchCreateExecutor().Client(this).Execute<BatchCreateResponse, BatchCreateResult, BatchCreateRequest>(request);
        }
#else
        /// <summary>
        ///  创建点播加速域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<BatchCreateResponse> BatchCreate(BatchCreateRequest request) {
            return await new BatchCreateExecutor().Client(this).Execute<BatchCreateResponse, BatchCreateResult, BatchCreateRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建刷新预热回调任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateRefreshTaskForCallbackV2Response CreateRefreshTaskForCallbackV2(CreateRefreshTaskForCallbackV2Request request) {
            return  new CreateRefreshTaskForCallbackV2Executor().Client(this).Execute<CreateRefreshTaskForCallbackV2Response, CreateRefreshTaskForCallbackV2Result, CreateRefreshTaskForCallbackV2Request>(request);
        }
#else
        /// <summary>
        ///  创建刷新预热回调任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateRefreshTaskForCallbackV2Response> CreateRefreshTaskForCallbackV2(CreateRefreshTaskForCallbackV2Request request) {
            return await new CreateRefreshTaskForCallbackV2Executor().Client(this).Execute<CreateRefreshTaskForCallbackV2Response, CreateRefreshTaskForCallbackV2Result, CreateRefreshTaskForCallbackV2Request>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询直播预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLivePrefetchTaskResponse QueryLivePrefetchTask(QueryLivePrefetchTaskRequest request) {
            return  new QueryLivePrefetchTaskExecutor().Client(this).Execute<QueryLivePrefetchTaskResponse, QueryLivePrefetchTaskResult, QueryLivePrefetchTaskRequest>(request);
        }
#else
        /// <summary>
        ///  查询直播预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLivePrefetchTaskResponse> QueryLivePrefetchTask(QueryLivePrefetchTaskRequest request) {
            return await new QueryLivePrefetchTaskExecutor().Client(this).Execute<QueryLivePrefetchTaskResponse, QueryLivePrefetchTaskResult, QueryLivePrefetchTaskRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询统计数据并进行汇总加和
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryLiveTrafficGroupSumResponse QueryLiveTrafficGroupSum(QueryLiveTrafficGroupSumRequest request) {
            return  new QueryLiveTrafficGroupSumExecutor().Client(this).Execute<QueryLiveTrafficGroupSumResponse, QueryLiveTrafficGroupSumResult, QueryLiveTrafficGroupSumRequest>(request);
        }
#else
        /// <summary>
        ///  查询统计数据并进行汇总加和
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryLiveTrafficGroupSumResponse> QueryLiveTrafficGroupSum(QueryLiveTrafficGroupSumRequest request) {
            return await new QueryLiveTrafficGroupSumExecutor().Client(this).Execute<QueryLiveTrafficGroupSumResponse, QueryLiveTrafficGroupSumResult, QueryLiveTrafficGroupSumRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置线上计费方式
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryOnlineBillingTypeResponse QueryOnlineBillingType(QueryOnlineBillingTypeRequest request) {
            return  new QueryOnlineBillingTypeExecutor().Client(this).Execute<QueryOnlineBillingTypeResponse, QueryOnlineBillingTypeResult, QueryOnlineBillingTypeRequest>(request);
        }
#else
        /// <summary>
        ///  设置线上计费方式
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryOnlineBillingTypeResponse> QueryOnlineBillingType(QueryOnlineBillingTypeRequest request) {
            return await new QueryOnlineBillingTypeExecutor().Client(this).Execute<QueryOnlineBillingTypeResponse, QueryOnlineBillingTypeResult, QueryOnlineBillingTypeRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  根据taskId查询刷新预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryRefreshTaskByIdResponse QueryRefreshTaskById(QueryRefreshTaskByIdRequest request) {
            return  new QueryRefreshTaskByIdExecutor().Client(this).Execute<QueryRefreshTaskByIdResponse, QueryRefreshTaskByIdResult, QueryRefreshTaskByIdRequest>(request);
        }
#else
        /// <summary>
        ///  根据taskId查询刷新预热任务
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryRefreshTaskByIdResponse> QueryRefreshTaskById(QueryRefreshTaskByIdRequest request) {
            return await new QueryRefreshTaskByIdExecutor().Client(this).Execute<QueryRefreshTaskByIdResponse, QueryRefreshTaskByIdResult, QueryRefreshTaskByIdRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  修改缓存规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateCacheRuleResponse UpdateCacheRule(UpdateCacheRuleRequest request) {
            return  new UpdateCacheRuleExecutor().Client(this).Execute<UpdateCacheRuleResponse, UpdateCacheRuleResult, UpdateCacheRuleRequest>(request);
        }
#else
        /// <summary>
        ///  修改缓存规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateCacheRuleResponse> UpdateCacheRule(UpdateCacheRuleRequest request) {
            return await new UpdateCacheRuleExecutor().Client(this).Execute<UpdateCacheRuleResponse, UpdateCacheRuleResult, UpdateCacheRuleRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置http协议
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetHttpTypeResponse SetHttpType(SetHttpTypeRequest request) {
            return  new SetHttpTypeExecutor().Client(this).Execute<SetHttpTypeResponse, SetHttpTypeResult, SetHttpTypeRequest>(request);
        }
#else
        /// <summary>
        ///  设置http协议
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetHttpTypeResponse> SetHttpType(SetHttpTypeRequest request) {
            return await new SetHttpTypeExecutor().Client(this).Execute<SetHttpTypeResponse, SetHttpTypeResult, SetHttpTypeRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryDomainLogResponse QueryDomainLog(QueryDomainLogRequest request) {
            return  new QueryDomainLogExecutor().Client(this).Execute<QueryDomainLogResponse, QueryDomainLogResult, QueryDomainLogRequest>(request);
        }
#else
        /// <summary>
        ///  查询日志
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryDomainLogResponse> QueryDomainLog(QueryDomainLogRequest request) {
            return await new QueryDomainLogExecutor().Client(this).Execute<QueryDomainLogResponse, QueryDomainLogResult, QueryDomainLogRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  上传证书
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UploadCertResponse UploadCert(UploadCertRequest request) {
            return  new UploadCertExecutor().Client(this).Execute<UploadCertResponse, UploadCertResult, UploadCertRequest>(request);
        }
#else
        /// <summary>
        ///  上传证书
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UploadCertResponse> UploadCert(UploadCertRequest request) {
            return await new UploadCertExecutor().Client(this).Execute<UploadCertResponse, UploadCertResult, UploadCertRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加缓存规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateCacheRuleResponse CreateCacheRule(CreateCacheRuleRequest request) {
            return  new CreateCacheRuleExecutor().Client(this).Execute<CreateCacheRuleResponse, CreateCacheRuleResult, CreateCacheRuleRequest>(request);
        }
#else
        /// <summary>
        ///  添加缓存规则
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateCacheRuleResponse> CreateCacheRule(CreateCacheRuleRequest request) {
            return await new CreateCacheRuleExecutor().Client(this).Execute<CreateCacheRuleResponse, CreateCacheRuleResult, CreateCacheRuleRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  创建直播域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public BatchCreateLiveDomainResponse BatchCreateLiveDomain(BatchCreateLiveDomainRequest request) {
            return  new BatchCreateLiveDomainExecutor().Client(this).Execute<BatchCreateLiveDomainResponse, BatchCreateLiveDomainResult, BatchCreateLiveDomainRequest>(request);
        }
#else
        /// <summary>
        ///  创建直播域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<BatchCreateLiveDomainResponse> BatchCreateLiveDomain(BatchCreateLiveDomainRequest request) {
            return await new BatchCreateLiveDomainExecutor().Client(this).Execute<BatchCreateLiveDomainResponse, BatchCreateLiveDomainResult, BatchCreateLiveDomainRequest>(request).ConfigureAwait(false);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置源站信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetSourceResponse SetSource(SetSourceRequest request) {
            return  new SetSourceExecutor().Client(this).Execute<SetSourceResponse, SetSourceResult, SetSourceRequest>(request);
        }
#else
        /// <summary>
        ///  设置源站信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetSourceResponse> SetSource(SetSourceRequest request) {
            return await new SetSourceExecutor().Client(this).Execute<SetSourceResponse, SetSourceResult, SetSourceRequest>(request).ConfigureAwait(false);
        }
#endif

            /// <summary>
            ///  默认CdnClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>cdnClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>cdnClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>cdnClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造CdnClient 对象
                ///</summary>
                CdnClient Build();
            }

            /// <summary>
            ///  默认CdnClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                ///  CdnClient service client
                /// </summary>
                private  CdnClient cdnClient;

                /// <summary>
                ///  默认CdnClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    cdnClient = new CdnClient();
                }

                /// <summary>
                ///  构造CdnClient 对象
                ///</summary>
                public CdnClient Build()
                {
                    if (cdnClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        cdnClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (cdnClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("CdnClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (cdnClient.HttpRequestConfig == null)
                    {
                        cdnClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (cdnClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("CdnClient build error: http request config not set");
                        }
                    }
                    return cdnClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>cdnClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    cdnClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>cdnClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    cdnClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>cdnClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    cdnClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
