/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Live API
 * 视频直播相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Live.Apis;
using JDCloudSDK.Live.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Live.Client
{
    /// <summary>
    ///  Live API
    ///  视频直播相关接口
    ///  Live Api 客户端
    ///</summary>
    public class LiveClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private LiveClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public LiveClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public LiveClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public LiveClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.7
        ///</summary>
        public const string ClientVersion = "1.0.7";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "live.jdcloud-api.com";
        private const string serviceName = "live";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        ///  添加录制回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveStreamRecordNotifyConfigResponse AddLiveStreamRecordNotifyConfig(AddLiveStreamRecordNotifyConfigRequest request) {
            return  new AddLiveStreamRecordNotifyConfigExecutor().Client(this).Execute<AddLiveStreamRecordNotifyConfigResponse, AddLiveStreamRecordNotifyConfigResult, AddLiveStreamRecordNotifyConfigRequest>(request);
        }
#else
        /// <summary>
        ///  添加录制回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveStreamRecordNotifyConfigResponse> AddLiveStreamRecordNotifyConfig(AddLiveStreamRecordNotifyConfigRequest request) {
            return await new AddLiveStreamRecordNotifyConfigExecutor().Client(this).Execute<AddLiveStreamRecordNotifyConfigResponse, AddLiveStreamRecordNotifyConfigResult, AddLiveStreamRecordNotifyConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询直播截图配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCustomLiveStreamSnapshotConfigResponse DescribeCustomLiveStreamSnapshotConfig(DescribeCustomLiveStreamSnapshotConfigRequest request) {
            return  new DescribeCustomLiveStreamSnapshotConfigExecutor().Client(this).Execute<DescribeCustomLiveStreamSnapshotConfigResponse, DescribeCustomLiveStreamSnapshotConfigResult, DescribeCustomLiveStreamSnapshotConfigRequest>(request);
        }
#else
        /// <summary>
        ///  查询直播截图配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCustomLiveStreamSnapshotConfigResponse> DescribeCustomLiveStreamSnapshotConfig(DescribeCustomLiveStreamSnapshotConfigRequest request) {
            return await new DescribeCustomLiveStreamSnapshotConfigExecutor().Client(this).Execute<DescribeCustomLiveStreamSnapshotConfigResponse, DescribeCustomLiveStreamSnapshotConfigResult, DescribeCustomLiveStreamSnapshotConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加域名录制配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveStreamDomainRecordResponse AddLiveStreamDomainRecord(AddLiveStreamDomainRecordRequest request) {
            return  new AddLiveStreamDomainRecordExecutor().Client(this).Execute<AddLiveStreamDomainRecordResponse, AddLiveStreamDomainRecordResult, AddLiveStreamDomainRecordRequest>(request);
        }
#else
        /// <summary>
        ///  添加域名录制配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveStreamDomainRecordResponse> AddLiveStreamDomainRecord(AddLiveStreamDomainRecordRequest request) {
            return await new AddLiveStreamDomainRecordExecutor().Client(this).Execute<AddLiveStreamDomainRecordResponse, AddLiveStreamDomainRecordResult, AddLiveStreamDomainRecordRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加录制模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddCustomLiveStreamRecordTemplateResponse AddCustomLiveStreamRecordTemplate(AddCustomLiveStreamRecordTemplateRequest request) {
            return  new AddCustomLiveStreamRecordTemplateExecutor().Client(this).Execute<AddCustomLiveStreamRecordTemplateResponse, AddCustomLiveStreamRecordTemplateResult, AddCustomLiveStreamRecordTemplateRequest>(request);
        }
#else
        /// <summary>
        ///  添加录制模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddCustomLiveStreamRecordTemplateResponse> AddCustomLiveStreamRecordTemplate(AddCustomLiveStreamRecordTemplateRequest request) {
            return await new AddCustomLiveStreamRecordTemplateExecutor().Client(this).Execute<AddCustomLiveStreamRecordTemplateResponse, AddCustomLiveStreamRecordTemplateResult, AddCustomLiveStreamRecordTemplateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除录制回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamRecordNotifyConfigResponse DeleteLiveStreamRecordNotifyConfig(DeleteLiveStreamRecordNotifyConfigRequest request) {
            return  new DeleteLiveStreamRecordNotifyConfigExecutor().Client(this).Execute<DeleteLiveStreamRecordNotifyConfigResponse, DeleteLiveStreamRecordNotifyConfigResult, DeleteLiveStreamRecordNotifyConfigRequest>(request);
        }
#else
        /// <summary>
        ///  删除录制回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamRecordNotifyConfigResponse> DeleteLiveStreamRecordNotifyConfig(DeleteLiveStreamRecordNotifyConfigRequest request) {
            return await new DeleteLiveStreamRecordNotifyConfigExecutor().Client(this).Execute<DeleteLiveStreamRecordNotifyConfigResponse, DeleteLiveStreamRecordNotifyConfigResult, DeleteLiveStreamRecordNotifyConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加直播截图模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddCustomLiveStreamSnapshotTemplateResponse AddCustomLiveStreamSnapshotTemplate(AddCustomLiveStreamSnapshotTemplateRequest request) {
            return  new AddCustomLiveStreamSnapshotTemplateExecutor().Client(this).Execute<AddCustomLiveStreamSnapshotTemplateResponse, AddCustomLiveStreamSnapshotTemplateResult, AddCustomLiveStreamSnapshotTemplateRequest>(request);
        }
#else
        /// <summary>
        ///  添加直播截图模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddCustomLiveStreamSnapshotTemplateResponse> AddCustomLiveStreamSnapshotTemplate(AddCustomLiveStreamSnapshotTemplateRequest request) {
            return await new AddCustomLiveStreamSnapshotTemplateExecutor().Client(this).Execute<AddCustomLiveStreamSnapshotTemplateResponse, AddCustomLiveStreamSnapshotTemplateResult, AddCustomLiveStreamSnapshotTemplateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询直播域名网络带宽监控数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveDomainResponse AddLiveDomain(AddLiveDomainRequest request) {
            return  new AddLiveDomainExecutor().Client(this).Execute<AddLiveDomainResponse, AddLiveDomainResult, AddLiveDomainRequest>(request);
        }
#else
        /// <summary>
        ///  查询直播域名网络带宽监控数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveDomainResponse> AddLiveDomain(AddLiveDomainRequest request) {
            return await new AddLiveDomainExecutor().Client(this).Execute<AddLiveDomainResponse, AddLiveDomainResult, AddLiveDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除域名转码配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamDomainTranscodeResponse DeleteLiveStreamDomainTranscode(DeleteLiveStreamDomainTranscodeRequest request) {
            return  new DeleteLiveStreamDomainTranscodeExecutor().Client(this).Execute<DeleteLiveStreamDomainTranscodeResponse, DeleteLiveStreamDomainTranscodeResult, DeleteLiveStreamDomainTranscodeRequest>(request);
        }
#else
        /// <summary>
        ///  删除域名转码配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamDomainTranscodeResponse> DeleteLiveStreamDomainTranscode(DeleteLiveStreamDomainTranscodeRequest request) {
            return await new DeleteLiveStreamDomainTranscodeExecutor().Client(this).Execute<DeleteLiveStreamDomainTranscodeResponse, DeleteLiveStreamDomainTranscodeResult, DeleteLiveStreamDomainTranscodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询录制回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeLiveStreamRecordNotifyConfigResponse DescribeLiveStreamRecordNotifyConfig(DescribeLiveStreamRecordNotifyConfigRequest request) {
            return  new DescribeLiveStreamRecordNotifyConfigExecutor().Client(this).Execute<DescribeLiveStreamRecordNotifyConfigResponse, DescribeLiveStreamRecordNotifyConfigResult, DescribeLiveStreamRecordNotifyConfigRequest>(request);
        }
#else
        /// <summary>
        ///  查询录制回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeLiveStreamRecordNotifyConfigResponse> DescribeLiveStreamRecordNotifyConfig(DescribeLiveStreamRecordNotifyConfigRequest request) {
            return await new DescribeLiveStreamRecordNotifyConfigExecutor().Client(this).Execute<DescribeLiveStreamRecordNotifyConfigResponse, DescribeLiveStreamRecordNotifyConfigResult, DescribeLiveStreamRecordNotifyConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询转码模板列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCustomLiveStreamTranscodesResponse DescribeCustomLiveStreamTranscodes(DescribeCustomLiveStreamTranscodesRequest request) {
            return  new DescribeCustomLiveStreamTranscodesExecutor().Client(this).Execute<DescribeCustomLiveStreamTranscodesResponse, DescribeCustomLiveStreamTranscodesResult, DescribeCustomLiveStreamTranscodesRequest>(request);
        }
#else
        /// <summary>
        ///  查询转码模板列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCustomLiveStreamTranscodesResponse> DescribeCustomLiveStreamTranscodes(DescribeCustomLiveStreamTranscodesRequest request) {
            return await new DescribeCustomLiveStreamTranscodesExecutor().Client(this).Execute<DescribeCustomLiveStreamTranscodesResponse, DescribeCustomLiveStreamTranscodesResult, DescribeCustomLiveStreamTranscodesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询转码模板配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeLiveStreamTranscodeConfigResponse DescribeLiveStreamTranscodeConfig(DescribeLiveStreamTranscodeConfigRequest request) {
            return  new DescribeLiveStreamTranscodeConfigExecutor().Client(this).Execute<DescribeLiveStreamTranscodeConfigResponse, DescribeLiveStreamTranscodeConfigResult, DescribeLiveStreamTranscodeConfigRequest>(request);
        }
#else
        /// <summary>
        ///  查询转码模板配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeLiveStreamTranscodeConfigResponse> DescribeLiveStreamTranscodeConfig(DescribeLiveStreamTranscodeConfigRequest request) {
            return await new DescribeLiveStreamTranscodeConfigExecutor().Client(this).Execute<DescribeLiveStreamTranscodeConfigResponse, DescribeLiveStreamTranscodeConfigResult, DescribeLiveStreamTranscodeConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询转码模板详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCustomLiveStreamTranscodeResponse DescribeCustomLiveStreamTranscode(DescribeCustomLiveStreamTranscodeRequest request) {
            return  new DescribeCustomLiveStreamTranscodeExecutor().Client(this).Execute<DescribeCustomLiveStreamTranscodeResponse, DescribeCustomLiveStreamTranscodeResult, DescribeCustomLiveStreamTranscodeRequest>(request);
        }
#else
        /// <summary>
        ///  查询转码模板详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCustomLiveStreamTranscodeResponse> DescribeCustomLiveStreamTranscode(DescribeCustomLiveStreamTranscodeRequest request) {
            return await new DescribeCustomLiveStreamTranscodeExecutor().Client(this).Execute<DescribeCustomLiveStreamTranscodeResponse, DescribeCustomLiveStreamTranscodeResult, DescribeCustomLiveStreamTranscodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加app转码配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveStreamAppTranscodeResponse AddLiveStreamAppTranscode(AddLiveStreamAppTranscodeRequest request) {
            return  new AddLiveStreamAppTranscodeExecutor().Client(this).Execute<AddLiveStreamAppTranscodeResponse, AddLiveStreamAppTranscodeResult, AddLiveStreamAppTranscodeRequest>(request);
        }
#else
        /// <summary>
        ///  添加app转码配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveStreamAppTranscodeResponse> AddLiveStreamAppTranscode(AddLiveStreamAppTranscodeRequest request) {
            return await new AddLiveStreamAppTranscodeExecutor().Client(this).Execute<AddLiveStreamAppTranscodeResponse, AddLiveStreamAppTranscodeResult, AddLiveStreamAppTranscodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除域名直播截图配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamDomainSnapshotResponse DeleteLiveStreamDomainSnapshot(DeleteLiveStreamDomainSnapshotRequest request) {
            return  new DeleteLiveStreamDomainSnapshotExecutor().Client(this).Execute<DeleteLiveStreamDomainSnapshotResponse, DeleteLiveStreamDomainSnapshotResult, DeleteLiveStreamDomainSnapshotRequest>(request);
        }
#else
        /// <summary>
        ///  删除域名直播截图配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamDomainSnapshotResponse> DeleteLiveStreamDomainSnapshot(DeleteLiveStreamDomainSnapshotRequest request) {
            return await new DeleteLiveStreamDomainSnapshotExecutor().Client(this).Execute<DeleteLiveStreamDomainSnapshotResponse, DeleteLiveStreamDomainSnapshotResult, DeleteLiveStreamDomainSnapshotRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除截图回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamSnapshotNotifyConfigResponse DeleteLiveStreamSnapshotNotifyConfig(DeleteLiveStreamSnapshotNotifyConfigRequest request) {
            return  new DeleteLiveStreamSnapshotNotifyConfigExecutor().Client(this).Execute<DeleteLiveStreamSnapshotNotifyConfigResponse, DeleteLiveStreamSnapshotNotifyConfigResult, DeleteLiveStreamSnapshotNotifyConfigRequest>(request);
        }
#else
        /// <summary>
        ///  删除截图回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamSnapshotNotifyConfigResponse> DeleteLiveStreamSnapshotNotifyConfig(DeleteLiveStreamSnapshotNotifyConfigRequest request) {
            return await new DeleteLiveStreamSnapshotNotifyConfigExecutor().Client(this).Execute<DeleteLiveStreamSnapshotNotifyConfigResponse, DeleteLiveStreamSnapshotNotifyConfigResult, DeleteLiveStreamSnapshotNotifyConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询水印配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCustomLiveStreamWatermarkConfigResponse DescribeCustomLiveStreamWatermarkConfig(DescribeCustomLiveStreamWatermarkConfigRequest request) {
            return  new DescribeCustomLiveStreamWatermarkConfigExecutor().Client(this).Execute<DescribeCustomLiveStreamWatermarkConfigResponse, DescribeCustomLiveStreamWatermarkConfigResult, DescribeCustomLiveStreamWatermarkConfigRequest>(request);
        }
#else
        /// <summary>
        ///  查询水印配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCustomLiveStreamWatermarkConfigResponse> DescribeCustomLiveStreamWatermarkConfig(DescribeCustomLiveStreamWatermarkConfigRequest request) {
            return await new DescribeCustomLiveStreamWatermarkConfigExecutor().Client(this).Execute<DescribeCustomLiveStreamWatermarkConfigResponse, DescribeCustomLiveStreamWatermarkConfigResult, DescribeCustomLiveStreamWatermarkConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询录制模板列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCustomLiveStreamWatermarkTemplatesResponse DescribeCustomLiveStreamWatermarkTemplates(DescribeCustomLiveStreamWatermarkTemplatesRequest request) {
            return  new DescribeCustomLiveStreamWatermarkTemplatesExecutor().Client(this).Execute<DescribeCustomLiveStreamWatermarkTemplatesResponse, DescribeCustomLiveStreamWatermarkTemplatesResult, DescribeCustomLiveStreamWatermarkTemplatesRequest>(request);
        }
#else
        /// <summary>
        ///  查询录制模板列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCustomLiveStreamWatermarkTemplatesResponse> DescribeCustomLiveStreamWatermarkTemplates(DescribeCustomLiveStreamWatermarkTemplatesRequest request) {
            return await new DescribeCustomLiveStreamWatermarkTemplatesExecutor().Client(this).Execute<DescribeCustomLiveStreamWatermarkTemplatesResponse, DescribeCustomLiveStreamWatermarkTemplatesResult, DescribeCustomLiveStreamWatermarkTemplatesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加app直播截图配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveStreamAppSnapshotResponse AddLiveStreamAppSnapshot(AddLiveStreamAppSnapshotRequest request) {
            return  new AddLiveStreamAppSnapshotExecutor().Client(this).Execute<AddLiveStreamAppSnapshotResponse, AddLiveStreamAppSnapshotResult, AddLiveStreamAppSnapshotRequest>(request);
        }
#else
        /// <summary>
        ///  添加app直播截图配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveStreamAppSnapshotResponse> AddLiveStreamAppSnapshot(AddLiveStreamAppSnapshotRequest request) {
            return await new AddLiveStreamAppSnapshotExecutor().Client(this).Execute<AddLiveStreamAppSnapshotResponse, AddLiveStreamAppSnapshotResult, AddLiveStreamAppSnapshotRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除录制模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteCustomLiveStreamRecordTemplateResponse DeleteCustomLiveStreamRecordTemplate(DeleteCustomLiveStreamRecordTemplateRequest request) {
            return  new DeleteCustomLiveStreamRecordTemplateExecutor().Client(this).Execute<DeleteCustomLiveStreamRecordTemplateResponse, DeleteCustomLiveStreamRecordTemplateResult, DeleteCustomLiveStreamRecordTemplateRequest>(request);
        }
#else
        /// <summary>
        ///  删除录制模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteCustomLiveStreamRecordTemplateResponse> DeleteCustomLiveStreamRecordTemplate(DeleteCustomLiveStreamRecordTemplateRequest request) {
            return await new DeleteCustomLiveStreamRecordTemplateExecutor().Client(this).Execute<DeleteCustomLiveStreamRecordTemplateResponse, DeleteCustomLiveStreamRecordTemplateResult, DeleteCustomLiveStreamRecordTemplateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  启动域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StartLiveDomainResponse StartLiveDomain(StartLiveDomainRequest request) {
            return  new StartLiveDomainExecutor().Client(this).Execute<StartLiveDomainResponse, StartLiveDomainResult, StartLiveDomainRequest>(request);
        }
#else
        /// <summary>
        ///  启动域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StartLiveDomainResponse> StartLiveDomain(StartLiveDomainRequest request) {
            return await new StartLiveDomainExecutor().Client(this).Execute<StartLiveDomainResponse, StartLiveDomainResult, StartLiveDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加app录制配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveStreamAppRecordResponse AddLiveStreamAppRecord(AddLiveStreamAppRecordRequest request) {
            return  new AddLiveStreamAppRecordExecutor().Client(this).Execute<AddLiveStreamAppRecordResponse, AddLiveStreamAppRecordResult, AddLiveStreamAppRecordRequest>(request);
        }
#else
        /// <summary>
        ///  添加app录制配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveStreamAppRecordResponse> AddLiveStreamAppRecord(AddLiveStreamAppRecordRequest request) {
            return await new AddLiveStreamAppRecordExecutor().Client(this).Execute<AddLiveStreamAppRecordResponse, AddLiveStreamAppRecordResult, AddLiveStreamAppRecordRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除app
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveAppResponse DeleteLiveApp(DeleteLiveAppRequest request) {
            return  new DeleteLiveAppExecutor().Client(this).Execute<DeleteLiveAppResponse, DeleteLiveAppResult, DeleteLiveAppRequest>(request);
        }
#else
        /// <summary>
        ///  删除app
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveAppResponse> DeleteLiveApp(DeleteLiveAppRequest request) {
            return await new DeleteLiveAppExecutor().Client(this).Execute<DeleteLiveAppResponse, DeleteLiveAppResult, DeleteLiveAppRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加域名转码配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveStreamDomainTranscodeResponse AddLiveStreamDomainTranscode(AddLiveStreamDomainTranscodeRequest request) {
            return  new AddLiveStreamDomainTranscodeExecutor().Client(this).Execute<AddLiveStreamDomainTranscodeResponse, AddLiveStreamDomainTranscodeResult, AddLiveStreamDomainTranscodeRequest>(request);
        }
#else
        /// <summary>
        ///  添加域名转码配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveStreamDomainTranscodeResponse> AddLiveStreamDomainTranscode(AddLiveStreamDomainTranscodeRequest request) {
            return await new AddLiveStreamDomainTranscodeExecutor().Client(this).Execute<AddLiveStreamDomainTranscodeResponse, AddLiveStreamDomainTranscodeResult, AddLiveStreamDomainTranscodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询指定域名相关信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeLiveDomainDetailResponse DescribeLiveDomainDetail(DescribeLiveDomainDetailRequest request) {
            return  new DescribeLiveDomainDetailExecutor().Client(this).Execute<DescribeLiveDomainDetailResponse, DescribeLiveDomainDetailResult, DescribeLiveDomainDetailRequest>(request);
        }
#else
        /// <summary>
        ///  查询指定域名相关信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeLiveDomainDetailResponse> DescribeLiveDomainDetail(DescribeLiveDomainDetailRequest request) {
            return await new DescribeLiveDomainDetailExecutor().Client(this).Execute<DescribeLiveDomainDetailResponse, DescribeLiveDomainDetailResult, DescribeLiveDomainDetailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除自定义转码模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteCustomLiveStreamTranscodeResponse DeleteCustomLiveStreamTranscode(DeleteCustomLiveStreamTranscodeRequest request) {
            return  new DeleteCustomLiveStreamTranscodeExecutor().Client(this).Execute<DeleteCustomLiveStreamTranscodeResponse, DeleteCustomLiveStreamTranscodeResult, DeleteCustomLiveStreamTranscodeRequest>(request);
        }
#else
        /// <summary>
        ///  删除自定义转码模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteCustomLiveStreamTranscodeResponse> DeleteCustomLiveStreamTranscode(DeleteCustomLiveStreamTranscodeRequest request) {
            return await new DeleteCustomLiveStreamTranscodeExecutor().Client(this).Execute<DeleteCustomLiveStreamTranscodeResponse, DeleteCustomLiveStreamTranscodeResult, DeleteCustomLiveStreamTranscodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询截图信息回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeLiveStreamSnapshotNotifyConfigResponse DescribeLiveStreamSnapshotNotifyConfig(DescribeLiveStreamSnapshotNotifyConfigRequest request) {
            return  new DescribeLiveStreamSnapshotNotifyConfigExecutor().Client(this).Execute<DescribeLiveStreamSnapshotNotifyConfigResponse, DescribeLiveStreamSnapshotNotifyConfigResult, DescribeLiveStreamSnapshotNotifyConfigRequest>(request);
        }
#else
        /// <summary>
        ///  查询截图信息回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeLiveStreamSnapshotNotifyConfigResponse> DescribeLiveStreamSnapshotNotifyConfig(DescribeLiveStreamSnapshotNotifyConfigRequest request) {
            return await new DescribeLiveStreamSnapshotNotifyConfigExecutor().Client(this).Execute<DescribeLiveStreamSnapshotNotifyConfigResponse, DescribeLiveStreamSnapshotNotifyConfigResult, DescribeLiveStreamSnapshotNotifyConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询直播截图模板列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCustomLiveStreamSnapshotTemplatesResponse DescribeCustomLiveStreamSnapshotTemplates(DescribeCustomLiveStreamSnapshotTemplatesRequest request) {
            return  new DescribeCustomLiveStreamSnapshotTemplatesExecutor().Client(this).Execute<DescribeCustomLiveStreamSnapshotTemplatesResponse, DescribeCustomLiveStreamSnapshotTemplatesResult, DescribeCustomLiveStreamSnapshotTemplatesRequest>(request);
        }
#else
        /// <summary>
        ///  查询直播截图模板列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCustomLiveStreamSnapshotTemplatesResponse> DescribeCustomLiveStreamSnapshotTemplates(DescribeCustomLiveStreamSnapshotTemplatesRequest request) {
            return await new DescribeCustomLiveStreamSnapshotTemplatesExecutor().Client(this).Execute<DescribeCustomLiveStreamSnapshotTemplatesResponse, DescribeCustomLiveStreamSnapshotTemplatesResult, DescribeCustomLiveStreamSnapshotTemplatesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除域名水印配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamDomainWatermarkResponse DeleteLiveStreamDomainWatermark(DeleteLiveStreamDomainWatermarkRequest request) {
            return  new DeleteLiveStreamDomainWatermarkExecutor().Client(this).Execute<DeleteLiveStreamDomainWatermarkResponse, DeleteLiveStreamDomainWatermarkResult, DeleteLiveStreamDomainWatermarkRequest>(request);
        }
#else
        /// <summary>
        ///  删除域名水印配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamDomainWatermarkResponse> DeleteLiveStreamDomainWatermark(DeleteLiveStreamDomainWatermarkRequest request) {
            return await new DeleteLiveStreamDomainWatermarkExecutor().Client(this).Execute<DeleteLiveStreamDomainWatermarkResponse, DeleteLiveStreamDomainWatermarkResult, DeleteLiveStreamDomainWatermarkRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询录制配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCustomLiveStreamRecordConfigResponse DescribeCustomLiveStreamRecordConfig(DescribeCustomLiveStreamRecordConfigRequest request) {
            return  new DescribeCustomLiveStreamRecordConfigExecutor().Client(this).Execute<DescribeCustomLiveStreamRecordConfigResponse, DescribeCustomLiveStreamRecordConfigResult, DescribeCustomLiveStreamRecordConfigRequest>(request);
        }
#else
        /// <summary>
        ///  查询录制配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCustomLiveStreamRecordConfigResponse> DescribeCustomLiveStreamRecordConfig(DescribeCustomLiveStreamRecordConfigRequest request) {
            return await new DescribeCustomLiveStreamRecordConfigExecutor().Client(this).Execute<DescribeCustomLiveStreamRecordConfigResponse, DescribeCustomLiveStreamRecordConfigResult, DescribeCustomLiveStreamRecordConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  禁止直播流推送
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ForbidLiveStreamResponse ForbidLiveStream(ForbidLiveStreamRequest request) {
            return  new ForbidLiveStreamExecutor().Client(this).Execute<ForbidLiveStreamResponse, ForbidLiveStreamResult, ForbidLiveStreamRequest>(request);
        }
#else
        /// <summary>
        ///  禁止直播流推送
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ForbidLiveStreamResponse> ForbidLiveStream(ForbidLiveStreamRequest request) {
            return await new ForbidLiveStreamExecutor().Client(this).Execute<ForbidLiveStreamResponse, ForbidLiveStreamResult, ForbidLiveStreamRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除app录制配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamAppRecordResponse DeleteLiveStreamAppRecord(DeleteLiveStreamAppRecordRequest request) {
            return  new DeleteLiveStreamAppRecordExecutor().Client(this).Execute<DeleteLiveStreamAppRecordResponse, DeleteLiveStreamAppRecordResult, DeleteLiveStreamAppRecordRequest>(request);
        }
#else
        /// <summary>
        ///  删除app录制配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamAppRecordResponse> DeleteLiveStreamAppRecord(DeleteLiveStreamAppRecordRequest request) {
            return await new DeleteLiveStreamAppRecordExecutor().Client(this).Execute<DeleteLiveStreamAppRecordResponse, DeleteLiveStreamAppRecordResult, DeleteLiveStreamAppRecordRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除app水印配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamAppWatermarkResponse DeleteLiveStreamAppWatermark(DeleteLiveStreamAppWatermarkRequest request) {
            return  new DeleteLiveStreamAppWatermarkExecutor().Client(this).Execute<DeleteLiveStreamAppWatermarkResponse, DeleteLiveStreamAppWatermarkResult, DeleteLiveStreamAppWatermarkRequest>(request);
        }
#else
        /// <summary>
        ///  删除app水印配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamAppWatermarkResponse> DeleteLiveStreamAppWatermark(DeleteLiveStreamAppWatermarkRequest request) {
            return await new DeleteLiveStreamAppWatermarkExecutor().Client(this).Execute<DeleteLiveStreamAppWatermarkResponse, DeleteLiveStreamAppWatermarkResult, DeleteLiveStreamAppWatermarkRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除直播水印模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteCustomLiveStreamWatermarkTemplateResponse DeleteCustomLiveStreamWatermarkTemplate(DeleteCustomLiveStreamWatermarkTemplateRequest request) {
            return  new DeleteCustomLiveStreamWatermarkTemplateExecutor().Client(this).Execute<DeleteCustomLiveStreamWatermarkTemplateResponse, DeleteCustomLiveStreamWatermarkTemplateResult, DeleteCustomLiveStreamWatermarkTemplateRequest>(request);
        }
#else
        /// <summary>
        ///  删除直播水印模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteCustomLiveStreamWatermarkTemplateResponse> DeleteCustomLiveStreamWatermarkTemplate(DeleteCustomLiveStreamWatermarkTemplateRequest request) {
            return await new DeleteCustomLiveStreamWatermarkTemplateExecutor().Client(this).Execute<DeleteCustomLiveStreamWatermarkTemplateResponse, DeleteCustomLiveStreamWatermarkTemplateResult, DeleteCustomLiveStreamWatermarkTemplateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  启用APP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StartLiveAppResponse StartLiveApp(StartLiveAppRequest request) {
            return  new StartLiveAppExecutor().Client(this).Execute<StartLiveAppResponse, StartLiveAppResult, StartLiveAppRequest>(request);
        }
#else
        /// <summary>
        ///  启用APP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StartLiveAppResponse> StartLiveApp(StartLiveAppRequest request) {
            return await new StartLiveAppExecutor().Client(this).Execute<StartLiveAppResponse, StartLiveAppResult, StartLiveAppRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  设置NotifyURL
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SetLiveStreamNotifyUrlConfigResponse SetLiveStreamNotifyUrlConfig(SetLiveStreamNotifyUrlConfigRequest request) {
            return  new SetLiveStreamNotifyUrlConfigExecutor().Client(this).Execute<SetLiveStreamNotifyUrlConfigResponse, SetLiveStreamNotifyUrlConfigResult, SetLiveStreamNotifyUrlConfigRequest>(request);
        }
#else
        /// <summary>
        ///  设置NotifyURL
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SetLiveStreamNotifyUrlConfigResponse> SetLiveStreamNotifyUrlConfig(SetLiveStreamNotifyUrlConfigRequest request) {
            return await new SetLiveStreamNotifyUrlConfigExecutor().Client(this).Execute<SetLiveStreamNotifyUrlConfigResponse, SetLiveStreamNotifyUrlConfigResult, SetLiveStreamNotifyUrlConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询录制模板列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeCustomLiveStreamRecordTemplatesResponse DescribeCustomLiveStreamRecordTemplates(DescribeCustomLiveStreamRecordTemplatesRequest request) {
            return  new DescribeCustomLiveStreamRecordTemplatesExecutor().Client(this).Execute<DescribeCustomLiveStreamRecordTemplatesResponse, DescribeCustomLiveStreamRecordTemplatesResult, DescribeCustomLiveStreamRecordTemplatesRequest>(request);
        }
#else
        /// <summary>
        ///  查询录制模板列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeCustomLiveStreamRecordTemplatesResponse> DescribeCustomLiveStreamRecordTemplates(DescribeCustomLiveStreamRecordTemplatesRequest request) {
            return await new DescribeCustomLiveStreamRecordTemplatesExecutor().Client(this).Execute<DescribeCustomLiveStreamRecordTemplatesResponse, DescribeCustomLiveStreamRecordTemplatesResult, DescribeCustomLiveStreamRecordTemplatesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加自定义转码模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddCustomLiveStreamTranscodeResponse AddCustomLiveStreamTranscode(AddCustomLiveStreamTranscodeRequest request) {
            return  new AddCustomLiveStreamTranscodeExecutor().Client(this).Execute<AddCustomLiveStreamTranscodeResponse, AddCustomLiveStreamTranscodeResult, AddCustomLiveStreamTranscodeRequest>(request);
        }
#else
        /// <summary>
        ///  添加自定义转码模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddCustomLiveStreamTranscodeResponse> AddCustomLiveStreamTranscode(AddCustomLiveStreamTranscodeRequest request) {
            return await new AddCustomLiveStreamTranscodeExecutor().Client(this).Execute<AddCustomLiveStreamTranscodeResponse, AddCustomLiveStreamTranscodeResult, AddCustomLiveStreamTranscodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加直播水印模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddCustomLiveStreamWatermarkTemplateResponse AddCustomLiveStreamWatermarkTemplate(AddCustomLiveStreamWatermarkTemplateRequest request) {
            return  new AddCustomLiveStreamWatermarkTemplateExecutor().Client(this).Execute<AddCustomLiveStreamWatermarkTemplateResponse, AddCustomLiveStreamWatermarkTemplateResult, AddCustomLiveStreamWatermarkTemplateRequest>(request);
        }
#else
        /// <summary>
        ///  添加直播水印模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddCustomLiveStreamWatermarkTemplateResponse> AddCustomLiveStreamWatermarkTemplate(AddCustomLiveStreamWatermarkTemplateRequest request) {
            return await new AddCustomLiveStreamWatermarkTemplateExecutor().Client(this).Execute<AddCustomLiveStreamWatermarkTemplateResponse, AddCustomLiveStreamWatermarkTemplateResult, AddCustomLiveStreamWatermarkTemplateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加截图回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveStreamSnapshotNotifyConfigResponse AddLiveStreamSnapshotNotifyConfig(AddLiveStreamSnapshotNotifyConfigRequest request) {
            return  new AddLiveStreamSnapshotNotifyConfigExecutor().Client(this).Execute<AddLiveStreamSnapshotNotifyConfigResponse, AddLiveStreamSnapshotNotifyConfigResult, AddLiveStreamSnapshotNotifyConfigRequest>(request);
        }
#else
        /// <summary>
        ///  添加截图回调配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveStreamSnapshotNotifyConfigResponse> AddLiveStreamSnapshotNotifyConfig(AddLiveStreamSnapshotNotifyConfigRequest request) {
            return await new AddLiveStreamSnapshotNotifyConfigExecutor().Client(this).Execute<AddLiveStreamSnapshotNotifyConfigResponse, AddLiveStreamSnapshotNotifyConfigResult, AddLiveStreamSnapshotNotifyConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加app水印配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveStreamAppWatermarkResponse AddLiveStreamAppWatermark(AddLiveStreamAppWatermarkRequest request) {
            return  new AddLiveStreamAppWatermarkExecutor().Client(this).Execute<AddLiveStreamAppWatermarkResponse, AddLiveStreamAppWatermarkResult, AddLiveStreamAppWatermarkRequest>(request);
        }
#else
        /// <summary>
        ///  添加app水印配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveStreamAppWatermarkResponse> AddLiveStreamAppWatermark(AddLiveStreamAppWatermarkRequest request) {
            return await new AddLiveStreamAppWatermarkExecutor().Client(this).Execute<AddLiveStreamAppWatermarkResponse, AddLiveStreamAppWatermarkResult, AddLiveStreamAppWatermarkRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除直播截图模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteCustomLiveStreamSnapshotTemplateResponse DeleteCustomLiveStreamSnapshotTemplate(DeleteCustomLiveStreamSnapshotTemplateRequest request) {
            return  new DeleteCustomLiveStreamSnapshotTemplateExecutor().Client(this).Execute<DeleteCustomLiveStreamSnapshotTemplateResponse, DeleteCustomLiveStreamSnapshotTemplateResult, DeleteCustomLiveStreamSnapshotTemplateRequest>(request);
        }
#else
        /// <summary>
        ///  删除直播截图模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteCustomLiveStreamSnapshotTemplateResponse> DeleteCustomLiveStreamSnapshotTemplate(DeleteCustomLiveStreamSnapshotTemplateRequest request) {
            return await new DeleteCustomLiveStreamSnapshotTemplateExecutor().Client(this).Execute<DeleteCustomLiveStreamSnapshotTemplateResponse, DeleteCustomLiveStreamSnapshotTemplateResult, DeleteCustomLiveStreamSnapshotTemplateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  恢复直播流推送
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ResumeLiveStreamResponse ResumeLiveStream(ResumeLiveStreamRequest request) {
            return  new ResumeLiveStreamExecutor().Client(this).Execute<ResumeLiveStreamResponse, ResumeLiveStreamResult, ResumeLiveStreamRequest>(request);
        }
#else
        /// <summary>
        ///  恢复直播流推送
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ResumeLiveStreamResponse> ResumeLiveStream(ResumeLiveStreamRequest request) {
            return await new ResumeLiveStreamExecutor().Client(this).Execute<ResumeLiveStreamResponse, ResumeLiveStreamResult, ResumeLiveStreamRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveDomainResponse DeleteLiveDomain(DeleteLiveDomainRequest request) {
            return  new DeleteLiveDomainExecutor().Client(this).Execute<DeleteLiveDomainResponse, DeleteLiveDomainResult, DeleteLiveDomainRequest>(request);
        }
#else
        /// <summary>
        ///  删除域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveDomainResponse> DeleteLiveDomain(DeleteLiveDomainRequest request) {
            return await new DeleteLiveDomainExecutor().Client(this).Execute<DeleteLiveDomainResponse, DeleteLiveDomainResult, DeleteLiveDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询NotifyURL
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeLiveStreamNotifyUrlConfigResponse DescribeLiveStreamNotifyUrlConfig(DescribeLiveStreamNotifyUrlConfigRequest request) {
            return  new DescribeLiveStreamNotifyUrlConfigExecutor().Client(this).Execute<DescribeLiveStreamNotifyUrlConfigResponse, DescribeLiveStreamNotifyUrlConfigResult, DescribeLiveStreamNotifyUrlConfigRequest>(request);
        }
#else
        /// <summary>
        ///  查询NotifyURL
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeLiveStreamNotifyUrlConfigResponse> DescribeLiveStreamNotifyUrlConfig(DescribeLiveStreamNotifyUrlConfigRequest request) {
            return await new DescribeLiveStreamNotifyUrlConfigExecutor().Client(this).Execute<DescribeLiveStreamNotifyUrlConfigResponse, DescribeLiveStreamNotifyUrlConfigResult, DescribeLiveStreamNotifyUrlConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除app直播截图配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamAppSnapshotResponse DeleteLiveStreamAppSnapshot(DeleteLiveStreamAppSnapshotRequest request) {
            return  new DeleteLiveStreamAppSnapshotExecutor().Client(this).Execute<DeleteLiveStreamAppSnapshotResponse, DeleteLiveStreamAppSnapshotResult, DeleteLiveStreamAppSnapshotRequest>(request);
        }
#else
        /// <summary>
        ///  删除app直播截图配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamAppSnapshotResponse> DeleteLiveStreamAppSnapshot(DeleteLiveStreamAppSnapshotRequest request) {
            return await new DeleteLiveStreamAppSnapshotExecutor().Client(this).Execute<DeleteLiveStreamAppSnapshotResponse, DeleteLiveStreamAppSnapshotResult, DeleteLiveStreamAppSnapshotRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加域名水印配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveStreamDomainWatermarkResponse AddLiveStreamDomainWatermark(AddLiveStreamDomainWatermarkRequest request) {
            return  new AddLiveStreamDomainWatermarkExecutor().Client(this).Execute<AddLiveStreamDomainWatermarkResponse, AddLiveStreamDomainWatermarkResult, AddLiveStreamDomainWatermarkRequest>(request);
        }
#else
        /// <summary>
        ///  添加域名水印配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveStreamDomainWatermarkResponse> AddLiveStreamDomainWatermark(AddLiveStreamDomainWatermarkRequest request) {
            return await new AddLiveStreamDomainWatermarkExecutor().Client(this).Execute<AddLiveStreamDomainWatermarkResponse, AddLiveStreamDomainWatermarkResult, AddLiveStreamDomainWatermarkRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除域名录制配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamDomainRecordResponse DeleteLiveStreamDomainRecord(DeleteLiveStreamDomainRecordRequest request) {
            return  new DeleteLiveStreamDomainRecordExecutor().Client(this).Execute<DeleteLiveStreamDomainRecordResponse, DeleteLiveStreamDomainRecordResult, DeleteLiveStreamDomainRecordRequest>(request);
        }
#else
        /// <summary>
        ///  删除域名录制配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamDomainRecordResponse> DeleteLiveStreamDomainRecord(DeleteLiveStreamDomainRecordRequest request) {
            return await new DeleteLiveStreamDomainRecordExecutor().Client(this).Execute<DeleteLiveStreamDomainRecordResponse, DeleteLiveStreamDomainRecordResult, DeleteLiveStreamDomainRecordRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  停止域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StopLiveDomainResponse StopLiveDomain(StopLiveDomainRequest request) {
            return  new StopLiveDomainExecutor().Client(this).Execute<StopLiveDomainResponse, StopLiveDomainResult, StopLiveDomainRequest>(request);
        }
#else
        /// <summary>
        ///  停止域名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StopLiveDomainResponse> StopLiveDomain(StopLiveDomainRequest request) {
            return await new StopLiveDomainExecutor().Client(this).Execute<StopLiveDomainResponse, StopLiveDomainResult, StopLiveDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加 app 模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveAppResponse AddLiveApp(AddLiveAppRequest request) {
            return  new AddLiveAppExecutor().Client(this).Execute<AddLiveAppResponse, AddLiveAppResult, AddLiveAppRequest>(request);
        }
#else
        /// <summary>
        ///  添加 app 模板
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveAppResponse> AddLiveApp(AddLiveAppRequest request) {
            return await new AddLiveAppExecutor().Client(this).Execute<AddLiveAppResponse, AddLiveAppResult, AddLiveAppRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  停用APP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public StopLiveAppResponse StopLiveApp(StopLiveAppRequest request) {
            return  new StopLiveAppExecutor().Client(this).Execute<StopLiveAppResponse, StopLiveAppResult, StopLiveAppRequest>(request);
        }
#else
        /// <summary>
        ///  停用APP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<StopLiveAppResponse> StopLiveApp(StopLiveAppRequest request) {
            return await new StopLiveAppExecutor().Client(this).Execute<StopLiveAppResponse, StopLiveAppResult, StopLiveAppRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除app转码配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamAppTranscodeResponse DeleteLiveStreamAppTranscode(DeleteLiveStreamAppTranscodeRequest request) {
            return  new DeleteLiveStreamAppTranscodeExecutor().Client(this).Execute<DeleteLiveStreamAppTranscodeResponse, DeleteLiveStreamAppTranscodeResult, DeleteLiveStreamAppTranscodeRequest>(request);
        }
#else
        /// <summary>
        ///  删除app转码配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamAppTranscodeResponse> DeleteLiveStreamAppTranscode(DeleteLiveStreamAppTranscodeRequest request) {
            return await new DeleteLiveStreamAppTranscodeExecutor().Client(this).Execute<DeleteLiveStreamAppTranscodeResponse, DeleteLiveStreamAppTranscodeResult, DeleteLiveStreamAppTranscodeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询域名下的app列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeLiveAppResponse DescribeLiveApp(DescribeLiveAppRequest request) {
            return  new DescribeLiveAppExecutor().Client(this).Execute<DescribeLiveAppResponse, DescribeLiveAppResult, DescribeLiveAppRequest>(request);
        }
#else
        /// <summary>
        ///  查询域名下的app列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeLiveAppResponse> DescribeLiveApp(DescribeLiveAppRequest request) {
            return await new DescribeLiveAppExecutor().Client(this).Execute<DescribeLiveAppResponse, DescribeLiveAppResult, DescribeLiveAppRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询域名列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeLiveDomainResponse DescribeLiveDomain(DescribeLiveDomainRequest request) {
            return  new DescribeLiveDomainExecutor().Client(this).Execute<DescribeLiveDomainResponse, DescribeLiveDomainResult, DescribeLiveDomainRequest>(request);
        }
#else
        /// <summary>
        ///  查询域名列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeLiveDomainResponse> DescribeLiveDomain(DescribeLiveDomainRequest request) {
            return await new DescribeLiveDomainExecutor().Client(this).Execute<DescribeLiveDomainResponse, DescribeLiveDomainResult, DescribeLiveDomainRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  删除NotifyURL
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteLiveStreamNotifyUrlConfigResponse DeleteLiveStreamNotifyUrlConfig(DeleteLiveStreamNotifyUrlConfigRequest request) {
            return  new DeleteLiveStreamNotifyUrlConfigExecutor().Client(this).Execute<DeleteLiveStreamNotifyUrlConfigResponse, DeleteLiveStreamNotifyUrlConfigResult, DeleteLiveStreamNotifyUrlConfigRequest>(request);
        }
#else
        /// <summary>
        ///  删除NotifyURL
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteLiveStreamNotifyUrlConfigResponse> DeleteLiveStreamNotifyUrlConfig(DeleteLiveStreamNotifyUrlConfigRequest request) {
            return await new DeleteLiveStreamNotifyUrlConfigExecutor().Client(this).Execute<DeleteLiveStreamNotifyUrlConfigResponse, DeleteLiveStreamNotifyUrlConfigResult, DeleteLiveStreamNotifyUrlConfigRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  添加域名直播截图配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveStreamDomainSnapshotResponse AddLiveStreamDomainSnapshot(AddLiveStreamDomainSnapshotRequest request) {
            return  new AddLiveStreamDomainSnapshotExecutor().Client(this).Execute<AddLiveStreamDomainSnapshotResponse, AddLiveStreamDomainSnapshotResult, AddLiveStreamDomainSnapshotRequest>(request);
        }
#else
        /// <summary>
        ///  添加域名直播截图配置
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveStreamDomainSnapshotResponse> AddLiveStreamDomainSnapshot(AddLiveStreamDomainSnapshotRequest request) {
            return await new AddLiveStreamDomainSnapshotExecutor().Client(this).Execute<AddLiveStreamDomainSnapshotResponse, AddLiveStreamDomainSnapshotResult, AddLiveStreamDomainSnapshotRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        ///  查询直播域名录制时长数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddLiveRecordResponse AddLiveRecord(AddLiveRecordRequest request) {
            return  new AddLiveRecordExecutor().Client(this).Execute<AddLiveRecordResponse, AddLiveRecordResult, AddLiveRecordRequest>(request);
        }
#else
        /// <summary>
        ///  查询直播域名录制时长数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddLiveRecordResponse> AddLiveRecord(AddLiveRecordRequest request) {
            return await new AddLiveRecordExecutor().Client(this).Execute<AddLiveRecordResponse, AddLiveRecordResult, AddLiveRecordRequest>(request);
        }
#endif

            /// <summary>
            ///  默认LiveClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>liveClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>liveClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>liveClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造LiveClient 对象
                ///</summary>
                LiveClient Build();
            }

            /// <summary>
            ///  默认LiveClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                ///  LiveClient service client
                /// </summary>
                private  LiveClient liveClient;

                /// <summary>
                ///  默认LiveClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    liveClient = new LiveClient();
                }

                /// <summary>
                ///  构造LiveClient 对象
                ///</summary>
                public LiveClient Build()
                {
                    if (liveClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        liveClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (liveClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("LiveClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (liveClient.HttpRequestConfig == null)
                    {
                        liveClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (liveClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("LiveClient build error: http request config not set");
                        }
                    }
                    return liveClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>liveClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    liveClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>liveClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    liveClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>liveClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    liveClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
