/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD 态势感知 API
 * 提供基础威胁检测和入侵告警服务接口。
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Ids.Apis;
using JDCloudSDK.Ids.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Ids.Client
{
    /// <summary>
    /// JDCLOUD 态势感知 API
    /// 提供基础威胁检测和入侵告警服务接口。
    /// Ids Api 客户端
    ///</summary>
    public class IdsClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private IdsClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public IdsClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public IdsClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public IdsClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "ids.jdcloud-api.com";
        private const string serviceName = "ids";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 查询态势感知攻击列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAttacksResponse QueryAttacks(QueryAttacksRequest request) {
            return  new QueryAttacksExecutor().Client(this).Execute<QueryAttacksResponse, QueryAttacksResult, QueryAttacksRequest>(request);
        }
#else
        /// <summary>
        /// 查询态势感知攻击列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAttacksResponse> QueryAttacks(QueryAttacksRequest request) {
            return await new QueryAttacksExecutor().Client(this).Execute<QueryAttacksResponse, QueryAttacksResult, QueryAttacksRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取监控的资产IP列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryMornitedIpResponse QueryMornitedIp(QueryMornitedIpRequest request) {
            return  new QueryMornitedIpExecutor().Client(this).Execute<QueryMornitedIpResponse, QueryMornitedIpResult, QueryMornitedIpRequest>(request);
        }
#else
        /// <summary>
        /// 获取监控的资产IP列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryMornitedIpResponse> QueryMornitedIp(QueryMornitedIpRequest request) {
            return await new QueryMornitedIpExecutor().Client(this).Execute<QueryMornitedIpResponse, QueryMornitedIpResult, QueryMornitedIpRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询资产IP数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryIpPropertiesCountResponse QueryIpPropertiesCount(QueryIpPropertiesCountRequest request) {
            return  new QueryIpPropertiesCountExecutor().Client(this).Execute<QueryIpPropertiesCountResponse, QueryIpPropertiesCountResult, QueryIpPropertiesCountRequest>(request);
        }
#else
        /// <summary>
        /// 查询资产IP数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryIpPropertiesCountResponse> QueryIpPropertiesCount(QueryIpPropertiesCountRequest request) {
            return await new QueryIpPropertiesCountExecutor().Client(this).Execute<QueryIpPropertiesCountResponse, QueryIpPropertiesCountResult, QueryIpPropertiesCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询攻击类型拼装图数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAttackPieTypeDataResponse QueryAttackPieTypeData(QueryAttackPieTypeDataRequest request) {
            return  new QueryAttackPieTypeDataExecutor().Client(this).Execute<QueryAttackPieTypeDataResponse, QueryAttackPieTypeDataResult, QueryAttackPieTypeDataRequest>(request);
        }
#else
        /// <summary>
        /// 查询攻击类型拼装图数据
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAttackPieTypeDataResponse> QueryAttackPieTypeData(QueryAttackPieTypeDataRequest request) {
            return await new QueryAttackPieTypeDataExecutor().Client(this).Execute<QueryAttackPieTypeDataResponse, QueryAttackPieTypeDataResult, QueryAttackPieTypeDataRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询通知公告列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryNoticeMessagesResponse QueryNoticeMessages(QueryNoticeMessagesRequest request) {
            return  new QueryNoticeMessagesExecutor().Client(this).Execute<QueryNoticeMessagesResponse, QueryNoticeMessagesResult, QueryNoticeMessagesRequest>(request);
        }
#else
        /// <summary>
        /// 查询通知公告列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryNoticeMessagesResponse> QueryNoticeMessages(QueryNoticeMessagesRequest request) {
            return await new QueryNoticeMessagesExecutor().Client(this).Execute<QueryNoticeMessagesResponse, QueryNoticeMessagesResult, QueryNoticeMessagesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 同步用户资产IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public SyncIpPropertiesResponse SyncIpProperties(SyncIpPropertiesRequest request) {
            return  new SyncIpPropertiesExecutor().Client(this).Execute<SyncIpPropertiesResponse, SyncIpPropertiesResult, SyncIpPropertiesRequest>(request);
        }
#else
        /// <summary>
        /// 同步用户资产IP
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<SyncIpPropertiesResponse> SyncIpProperties(SyncIpPropertiesRequest request) {
            return await new SyncIpPropertiesExecutor().Client(this).Execute<SyncIpPropertiesResponse, SyncIpPropertiesResult, SyncIpPropertiesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 同意授权态势感知
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ConfirmAuthorizationResponse ConfirmAuthorization(ConfirmAuthorizationRequest request) {
            return  new ConfirmAuthorizationExecutor().Client(this).Execute<ConfirmAuthorizationResponse, ConfirmAuthorizationResult, ConfirmAuthorizationRequest>(request);
        }
#else
        /// <summary>
        /// 同意授权态势感知
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ConfirmAuthorizationResponse> ConfirmAuthorization(ConfirmAuthorizationRequest request) {
            return await new ConfirmAuthorizationExecutor().Client(this).Execute<ConfirmAuthorizationResponse, ConfirmAuthorizationResult, ConfirmAuthorizationRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询攻击趋势折线
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAttackLineTrendResponse QueryAttackLineTrend(QueryAttackLineTrendRequest request) {
            return  new QueryAttackLineTrendExecutor().Client(this).Execute<QueryAttackLineTrendResponse, QueryAttackLineTrendResult, QueryAttackLineTrendRequest>(request);
        }
#else
        /// <summary>
        /// 查询攻击趋势折线
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAttackLineTrendResponse> QueryAttackLineTrend(QueryAttackLineTrendRequest request) {
            return await new QueryAttackLineTrendExecutor().Client(this).Execute<QueryAttackLineTrendResponse, QueryAttackLineTrendResult, QueryAttackLineTrendRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询肉鸡 TOP N 排名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryTopZombieHostResponse QueryTopZombieHost(QueryTopZombieHostRequest request) {
            return  new QueryTopZombieHostExecutor().Client(this).Execute<QueryTopZombieHostResponse, QueryTopZombieHostResult, QueryTopZombieHostRequest>(request);
        }
#else
        /// <summary>
        /// 查询肉鸡 TOP N 排名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryTopZombieHostResponse> QueryTopZombieHost(QueryTopZombieHostRequest request) {
            return await new QueryTopZombieHostExecutor().Client(this).Execute<QueryTopZombieHostResponse, QueryTopZombieHostResult, QueryTopZombieHostRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取监控的资产IP状态列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryMornitedIpPropertiesStatusResponse QueryMornitedIpPropertiesStatus(QueryMornitedIpPropertiesStatusRequest request) {
            return  new QueryMornitedIpPropertiesStatusExecutor().Client(this).Execute<QueryMornitedIpPropertiesStatusResponse, QueryMornitedIpPropertiesStatusResult, QueryMornitedIpPropertiesStatusRequest>(request);
        }
#else
        /// <summary>
        /// 获取监控的资产IP状态列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryMornitedIpPropertiesStatusResponse> QueryMornitedIpPropertiesStatus(QueryMornitedIpPropertiesStatusRequest request) {
            return await new QueryMornitedIpPropertiesStatusExecutor().Client(this).Execute<QueryMornitedIpPropertiesStatusResponse, QueryMornitedIpPropertiesStatusResult, QueryMornitedIpPropertiesStatusRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询用户是否被授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public IsAuthorizationGivenResponse IsAuthorizationGiven(IsAuthorizationGivenRequest request) {
            return  new IsAuthorizationGivenExecutor().Client(this).Execute<IsAuthorizationGivenResponse, IsAuthorizationGivenResult, IsAuthorizationGivenRequest>(request);
        }
#else
        /// <summary>
        /// 查询用户是否被授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<IsAuthorizationGivenResponse> IsAuthorizationGiven(IsAuthorizationGivenRequest request) {
            return await new IsAuthorizationGivenExecutor().Client(this).Execute<IsAuthorizationGivenResponse, IsAuthorizationGivenResult, IsAuthorizationGivenRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询今日攻击日志数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryTodayAttackLogCountResponse QueryTodayAttackLogCount(QueryTodayAttackLogCountRequest request) {
            return  new QueryTodayAttackLogCountExecutor().Client(this).Execute<QueryTodayAttackLogCountResponse, QueryTodayAttackLogCountResult, QueryTodayAttackLogCountRequest>(request);
        }
#else
        /// <summary>
        /// 查询今日攻击日志数
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryTodayAttackLogCountResponse> QueryTodayAttackLogCount(QueryTodayAttackLogCountRequest request) {
            return await new QueryTodayAttackLogCountExecutor().Client(this).Execute<QueryTodayAttackLogCountResponse, QueryTodayAttackLogCountResult, QueryTodayAttackLogCountRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更改监控的资产IP状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateIpPropertiesStatusResponse UpdateIpPropertiesStatus(UpdateIpPropertiesStatusRequest request) {
            return  new UpdateIpPropertiesStatusExecutor().Client(this).Execute<UpdateIpPropertiesStatusResponse, UpdateIpPropertiesStatusResult, UpdateIpPropertiesStatusRequest>(request);
        }
#else
        /// <summary>
        /// 更改监控的资产IP状态
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateIpPropertiesStatusResponse> UpdateIpPropertiesStatus(UpdateIpPropertiesStatusRequest request) {
            return await new UpdateIpPropertiesStatusExecutor().Client(this).Execute<UpdateIpPropertiesStatusResponse, UpdateIpPropertiesStatusResult, UpdateIpPropertiesStatusRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询攻击者ip TOP N 排名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryTopAttackerHostResponse QueryTopAttackerHost(QueryTopAttackerHostRequest request) {
            return  new QueryTopAttackerHostExecutor().Client(this).Execute<QueryTopAttackerHostResponse, QueryTopAttackerHostResult, QueryTopAttackerHostRequest>(request);
        }
#else
        /// <summary>
        /// 查询攻击者ip TOP N 排名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryTopAttackerHostResponse> QueryTopAttackerHost(QueryTopAttackerHostRequest request) {
            return await new QueryTopAttackerHostExecutor().Client(this).Execute<QueryTopAttackerHostResponse, QueryTopAttackerHostResult, QueryTopAttackerHostRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除通知公告
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteNoticeMessageResponse DeleteNoticeMessage(DeleteNoticeMessageRequest request) {
            return  new DeleteNoticeMessageExecutor().Client(this).Execute<DeleteNoticeMessageResponse, DeleteNoticeMessageResult, DeleteNoticeMessageRequest>(request);
        }
#else
        /// <summary>
        /// 删除通知公告
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteNoticeMessageResponse> DeleteNoticeMessage(DeleteNoticeMessageRequest request) {
            return await new DeleteNoticeMessageExecutor().Client(this).Execute<DeleteNoticeMessageResponse, DeleteNoticeMessageResult, DeleteNoticeMessageRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 取消授权态势感知
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CancelAuthorizationResponse CancelAuthorization(CancelAuthorizationRequest request) {
            return  new CancelAuthorizationExecutor().Client(this).Execute<CancelAuthorizationResponse, CancelAuthorizationResult, CancelAuthorizationRequest>(request);
        }
#else
        /// <summary>
        /// 取消授权态势感知
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CancelAuthorizationResponse> CancelAuthorization(CancelAuthorizationRequest request) {
            return await new CancelAuthorizationExecutor().Client(this).Execute<CancelAuthorizationResponse, CancelAuthorizationResult, CancelAuthorizationRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询被攻击资产topN排名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryTopAttackedHostResponse QueryTopAttackedHost(QueryTopAttackedHostRequest request) {
            return  new QueryTopAttackedHostExecutor().Client(this).Execute<QueryTopAttackedHostResponse, QueryTopAttackedHostResult, QueryTopAttackedHostRequest>(request);
        }
#else
        /// <summary>
        /// 查询被攻击资产topN排名
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryTopAttackedHostResponse> QueryTopAttackedHost(QueryTopAttackedHostRequest request) {
            return await new QueryTopAttackedHostExecutor().Client(this).Execute<QueryTopAttackedHostResponse, QueryTopAttackedHostResult, QueryTopAttackedHostRequest>(request);
        }
#endif

            /// <summary>
            ///  默认IdsClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>idsClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>idsClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>idsClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造IdsClient 对象
                ///</summary>
                IdsClient Build();
            }

            /// <summary>
            ///  默认IdsClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// IdsClient service client
                /// </summary>
                private  IdsClient idsClient;

                /// <summary>
                ///  默认IdsClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    idsClient = new IdsClient();
                }

                /// <summary>
                ///  构造IdsClient 对象
                ///</summary>
                public IdsClient Build()
                {
                    if (idsClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        idsClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (idsClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("IdsClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (idsClient.HttpRequestConfig == null)
                    {
                        idsClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (idsClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("IdsClient build error: http request config not set");
                        }
                    }
                    return idsClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>idsClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    idsClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>idsClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    idsClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>idsClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    idsClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
