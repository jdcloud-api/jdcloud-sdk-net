/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD CMS instance API
 * API related to VM instances
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Cms.Apis;
using JDCloudSDK.Cms.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Cms.Client
{
    /// <summary>
    /// JDCLOUD CMS instance API
    /// API related to VM instances
    /// Cms Api 客户端
    ///</summary>
    public class CmsClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private CmsClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public CmsClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public CmsClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public CmsClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "cms.jcloudcs.com";
        private const string serviceName = "cms";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 获取DDos攻击
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetDDosResponse GetDDos(GetDDosRequest request) {
            return  new GetDDosExecutor().Client(this).Execute<GetDDosResponse, GetDDosResult, GetDDosRequest>(request);
        }
#else
        /// <summary>
        /// 获取DDos攻击
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetDDosResponse> GetDDos(GetDDosRequest request) {
            return await new GetDDosExecutor().Client(this).Execute<GetDDosResponse, GetDDosResult, GetDDosRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取活动列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public OperationListResponse OperationList(OperationListRequest request) {
            return  new OperationListExecutor().Client(this).Execute<OperationListResponse, OperationListResult, OperationListRequest>(request);
        }
#else
        /// <summary>
        /// 获取活动列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<OperationListResponse> OperationList(OperationListRequest request) {
            return await new OperationListExecutor().Client(this).Execute<OperationListResponse, OperationListResult, OperationListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取合作伙伴列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public PartnerListResponse PartnerList(PartnerListRequest request) {
            return  new PartnerListExecutor().Client(this).Execute<PartnerListResponse, PartnerListResult, PartnerListRequest>(request);
        }
#else
        /// <summary>
        /// 获取合作伙伴列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<PartnerListResponse> PartnerList(PartnerListRequest request) {
            return await new PartnerListExecutor().Client(this).Execute<PartnerListResponse, PartnerListResult, PartnerListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取新闻详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public NewsDetailResponse NewsDetail(NewsDetailRequest request) {
            return  new NewsDetailExecutor().Client(this).Execute<NewsDetailResponse, NewsDetailResult, NewsDetailRequest>(request);
        }
#else
        /// <summary>
        /// 获取新闻详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<NewsDetailResponse> NewsDetail(NewsDetailRequest request) {
            return await new NewsDetailExecutor().Client(this).Execute<NewsDetailResponse, NewsDetailResult, NewsDetailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取合作伙伴类型列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public PartnerTypeListResponse PartnerTypeList(PartnerTypeListRequest request) {
            return  new PartnerTypeListExecutor().Client(this).Execute<PartnerTypeListResponse, PartnerTypeListResult, PartnerTypeListRequest>(request);
        }
#else
        /// <summary>
        /// 获取合作伙伴类型列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<PartnerTypeListResponse> PartnerTypeList(PartnerTypeListRequest request) {
            return await new PartnerTypeListExecutor().Client(this).Execute<PartnerTypeListResponse, PartnerTypeListResult, PartnerTypeListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取客户案例列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CustomerCaseResponse CustomerCase(CustomerCaseRequest request) {
            return  new CustomerCaseExecutor().Client(this).Execute<CustomerCaseResponse, CustomerCaseResult, CustomerCaseRequest>(request);
        }
#else
        /// <summary>
        /// 获取客户案例列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CustomerCaseResponse> CustomerCase(CustomerCaseRequest request) {
            return await new CustomerCaseExecutor().Client(this).Execute<CustomerCaseResponse, CustomerCaseResult, CustomerCaseRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据路径获取栏目
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CatalogByPathResponse CatalogByPath(CatalogByPathRequest request) {
            return  new CatalogByPathExecutor().Client(this).Execute<CatalogByPathResponse, CatalogByPathResult, CatalogByPathRequest>(request);
        }
#else
        /// <summary>
        /// 根据路径获取栏目
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CatalogByPathResponse> CatalogByPath(CatalogByPathRequest request) {
            return await new CatalogByPathExecutor().Client(this).Execute<CatalogByPathResponse, CatalogByPathResult, CatalogByPathRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据名称获取导航
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public NavigationByNameResponse NavigationByName(NavigationByNameRequest request) {
            return  new NavigationByNameExecutor().Client(this).Execute<NavigationByNameResponse, NavigationByNameResult, NavigationByNameRequest>(request);
        }
#else
        /// <summary>
        /// 根据名称获取导航
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<NavigationByNameResponse> NavigationByName(NavigationByNameRequest request) {
            return await new NavigationByNameExecutor().Client(this).Execute<NavigationByNameResponse, NavigationByNameResult, NavigationByNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取首页bannner
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public BannerListResponse BannerList(BannerListRequest request) {
            return  new BannerListExecutor().Client(this).Execute<BannerListResponse, BannerListResult, BannerListRequest>(request);
        }
#else
        /// <summary>
        /// 获取首页bannner
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<BannerListResponse> BannerList(BannerListRequest request) {
            return await new BannerListExecutor().Client(this).Execute<BannerListResponse, BannerListResult, BannerListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据ID获取帮助
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ContentByIdResponse ContentById(ContentByIdRequest request) {
            return  new ContentByIdExecutor().Client(this).Execute<ContentByIdResponse, ContentByIdResult, ContentByIdRequest>(request);
        }
#else
        /// <summary>
        /// 根据ID获取帮助
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ContentByIdResponse> ContentById(ContentByIdRequest request) {
            return await new ContentByIdExecutor().Client(this).Execute<ContentByIdResponse, ContentByIdResult, ContentByIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据名称获取栏目
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CatalogByNameResponse CatalogByName(CatalogByNameRequest request) {
            return  new CatalogByNameExecutor().Client(this).Execute<CatalogByNameResponse, CatalogByNameResult, CatalogByNameRequest>(request);
        }
#else
        /// <summary>
        /// 根据名称获取栏目
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CatalogByNameResponse> CatalogByName(CatalogByNameRequest request) {
            return await new CatalogByNameExecutor().Client(this).Execute<CatalogByNameResponse, CatalogByNameResult, CatalogByNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取导航列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public NavigationListResponse NavigationList(NavigationListRequest request) {
            return  new NavigationListExecutor().Client(this).Execute<NavigationListResponse, NavigationListResult, NavigationListRequest>(request);
        }
#else
        /// <summary>
        /// 获取导航列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<NavigationListResponse> NavigationList(NavigationListRequest request) {
            return await new NavigationListExecutor().Client(this).Execute<NavigationListResponse, NavigationListResult, NavigationListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CustomerCaseDetailResponse CustomerCaseDetail(CustomerCaseDetailRequest request) {
            return  new CustomerCaseDetailExecutor().Client(this).Execute<CustomerCaseDetailResponse, CustomerCaseDetailResult, CustomerCaseDetailRequest>(request);
        }
#else
        /// <summary>
        /// 
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CustomerCaseDetailResponse> CustomerCaseDetail(CustomerCaseDetailRequest request) {
            return await new CustomerCaseDetailExecutor().Client(this).Execute<CustomerCaseDetailResponse, CustomerCaseDetailResult, CustomerCaseDetailRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取产品动态列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DynamicProductListResponse DynamicProductList(DynamicProductListRequest request) {
            return  new DynamicProductListExecutor().Client(this).Execute<DynamicProductListResponse, DynamicProductListResult, DynamicProductListRequest>(request);
        }
#else
        /// <summary>
        /// 获取产品动态列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DynamicProductListResponse> DynamicProductList(DynamicProductListRequest request) {
            return await new DynamicProductListExecutor().Client(this).Execute<DynamicProductListResponse, DynamicProductListResult, DynamicProductListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取产品类型列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ProductTypeListByTypeIdResponse ProductTypeListByTypeId(ProductTypeListByTypeIdRequest request) {
            return  new ProductTypeListByTypeIdExecutor().Client(this).Execute<ProductTypeListByTypeIdResponse, ProductTypeListByTypeIdResult, ProductTypeListByTypeIdRequest>(request);
        }
#else
        /// <summary>
        /// 获取产品类型列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ProductTypeListByTypeIdResponse> ProductTypeListByTypeId(ProductTypeListByTypeIdRequest request) {
            return await new ProductTypeListByTypeIdExecutor().Client(this).Execute<ProductTypeListByTypeIdResponse, ProductTypeListByTypeIdResult, ProductTypeListByTypeIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取链接列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public LinkListResponse LinkList(LinkListRequest request) {
            return  new LinkListExecutor().Client(this).Execute<LinkListResponse, LinkListResult, LinkListRequest>(request);
        }
#else
        /// <summary>
        /// 获取链接列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<LinkListResponse> LinkList(LinkListRequest request) {
            return await new LinkListExecutor().Client(this).Execute<LinkListResponse, LinkListResult, LinkListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取产品类型列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ProductTypeListResponse ProductTypeList(ProductTypeListRequest request) {
            return  new ProductTypeListExecutor().Client(this).Execute<ProductTypeListResponse, ProductTypeListResult, ProductTypeListRequest>(request);
        }
#else
        /// <summary>
        /// 获取产品类型列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ProductTypeListResponse> ProductTypeList(ProductTypeListRequest request) {
            return await new ProductTypeListExecutor().Client(this).Execute<ProductTypeListResponse, ProductTypeListResult, ProductTypeListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取经典案例列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ClassicCaseResponse ClassicCase(ClassicCaseRequest request) {
            return  new ClassicCaseExecutor().Client(this).Execute<ClassicCaseResponse, ClassicCaseResult, ClassicCaseRequest>(request);
        }
#else
        /// <summary>
        /// 获取经典案例列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ClassicCaseResponse> ClassicCase(ClassicCaseRequest request) {
            return await new ClassicCaseExecutor().Client(this).Execute<ClassicCaseResponse, ClassicCaseResult, ClassicCaseRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取合作伙伴级别列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public PartnerLevelListResponse PartnerLevelList(PartnerLevelListRequest request) {
            return  new PartnerLevelListExecutor().Client(this).Execute<PartnerLevelListResponse, PartnerLevelListResult, PartnerLevelListRequest>(request);
        }
#else
        /// <summary>
        /// 获取合作伙伴级别列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<PartnerLevelListResponse> PartnerLevelList(PartnerLevelListRequest request) {
            return await new PartnerLevelListExecutor().Client(this).Execute<PartnerLevelListResponse, PartnerLevelListResult, PartnerLevelListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取楼层列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public FloorListResponse FloorList(FloorListRequest request) {
            return  new FloorListExecutor().Client(this).Execute<FloorListResponse, FloorListResult, FloorListRequest>(request);
        }
#else
        /// <summary>
        /// 获取楼层列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<FloorListResponse> FloorList(FloorListRequest request) {
            return await new FloorListExecutor().Client(this).Execute<FloorListResponse, FloorListResult, FloorListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据栏目获取帮助
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ContentByCatalogIdResponse ContentByCatalogId(ContentByCatalogIdRequest request) {
            return  new ContentByCatalogIdExecutor().Client(this).Execute<ContentByCatalogIdResponse, ContentByCatalogIdResult, ContentByCatalogIdRequest>(request);
        }
#else
        /// <summary>
        /// 根据栏目获取帮助
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ContentByCatalogIdResponse> ContentByCatalogId(ContentByCatalogIdRequest request) {
            return await new ContentByCatalogIdExecutor().Client(this).Execute<ContentByCatalogIdResponse, ContentByCatalogIdResult, ContentByCatalogIdRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据路径获取帮助文档
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ContentByPathResponse ContentByPath(ContentByPathRequest request) {
            return  new ContentByPathExecutor().Client(this).Execute<ContentByPathResponse, ContentByPathResult, ContentByPathRequest>(request);
        }
#else
        /// <summary>
        /// 根据路径获取帮助文档
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ContentByPathResponse> ContentByPath(ContentByPathRequest request) {
            return await new ContentByPathExecutor().Client(this).Execute<ContentByPathResponse, ContentByPathResult, ContentByPathRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取产品类型列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public RecommendListResponse RecommendList(RecommendListRequest request) {
            return  new RecommendListExecutor().Client(this).Execute<RecommendListResponse, RecommendListResult, RecommendListRequest>(request);
        }
#else
        /// <summary>
        /// 获取产品类型列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<RecommendListResponse> RecommendList(RecommendListRequest request) {
            return await new RecommendListExecutor().Client(this).Execute<RecommendListResponse, RecommendListResult, RecommendListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据位置获取导航列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public NavigationExtResponse NavigationExt(NavigationExtRequest request) {
            return  new NavigationExtExecutor().Client(this).Execute<NavigationExtResponse, NavigationExtResult, NavigationExtRequest>(request);
        }
#else
        /// <summary>
        /// 根据位置获取导航列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<NavigationExtResponse> NavigationExt(NavigationExtRequest request) {
            return await new NavigationExtExecutor().Client(this).Execute<NavigationExtResponse, NavigationExtResult, NavigationExtRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 根据级别名称获取合作伙伴列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public PartnerListByLevelNameResponse PartnerListByLevelName(PartnerListByLevelNameRequest request) {
            return  new PartnerListByLevelNameExecutor().Client(this).Execute<PartnerListByLevelNameResponse, PartnerListByLevelNameResult, PartnerListByLevelNameRequest>(request);
        }
#else
        /// <summary>
        /// 根据级别名称获取合作伙伴列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<PartnerListByLevelNameResponse> PartnerListByLevelName(PartnerListByLevelNameRequest request) {
            return await new PartnerListByLevelNameExecutor().Client(this).Execute<PartnerListByLevelNameResponse, PartnerListByLevelNameResult, PartnerListByLevelNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取渠道列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ChannelAgentTypeResponse ChannelAgentType(ChannelAgentTypeRequest request) {
            return  new ChannelAgentTypeExecutor().Client(this).Execute<ChannelAgentTypeResponse, ChannelAgentTypeResult, ChannelAgentTypeRequest>(request);
        }
#else
        /// <summary>
        /// 获取渠道列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ChannelAgentTypeResponse> ChannelAgentType(ChannelAgentTypeRequest request) {
            return await new ChannelAgentTypeExecutor().Client(this).Execute<ChannelAgentTypeResponse, ChannelAgentTypeResult, ChannelAgentTypeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取产品详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ProductListResponse ProductList(ProductListRequest request) {
            return  new ProductListExecutor().Client(this).Execute<ProductListResponse, ProductListResult, ProductListRequest>(request);
        }
#else
        /// <summary>
        /// 获取产品详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ProductListResponse> ProductList(ProductListRequest request) {
            return await new ProductListExecutor().Client(this).Execute<ProductListResponse, ProductListResult, ProductListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取产品和帮助文档
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ProductByPathResponse ProductByPath(ProductByPathRequest request) {
            return  new ProductByPathExecutor().Client(this).Execute<ProductByPathResponse, ProductByPathResult, ProductByPathRequest>(request);
        }
#else
        /// <summary>
        /// 获取产品和帮助文档
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ProductByPathResponse> ProductByPath(ProductByPathRequest request) {
            return await new ProductByPathExecutor().Client(this).Execute<ProductByPathResponse, ProductByPathResult, ProductByPathRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 获取新闻列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public NewsListResponse NewsList(NewsListRequest request) {
            return  new NewsListExecutor().Client(this).Execute<NewsListResponse, NewsListResult, NewsListRequest>(request);
        }
#else
        /// <summary>
        /// 获取新闻列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<NewsListResponse> NewsList(NewsListRequest request) {
            return await new NewsListExecutor().Client(this).Execute<NewsListResponse, NewsListResult, NewsListRequest>(request);
        }
#endif

            /// <summary>
            ///  默认CmsClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>cmsClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>cmsClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>cmsClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造CmsClient 对象
                ///</summary>
                CmsClient Build();
            }

            /// <summary>
            ///  默认CmsClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// CmsClient service client
                /// </summary>
                private  CmsClient cmsClient;

                /// <summary>
                ///  默认CmsClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    cmsClient = new CmsClient();
                }

                /// <summary>
                ///  构造CmsClient 对象
                ///</summary>
                public CmsClient Build()
                {
                    if (cmsClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        cmsClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (cmsClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("CmsClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (cmsClient.HttpRequestConfig == null)
                    {
                        cmsClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (cmsClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("CmsClient build error: http request config not set");
                        }
                    }
                    return cmsClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>cmsClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    cmsClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>cmsClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    cmsClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>cmsClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    cmsClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
