/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD ORDER instance API
 * API related to ORDER instances
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Order.Apis;
using JDCloudSDK.Order.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Order.Client
{
    /// <summary>
    /// JDCLOUD ORDER instance API
    /// API related to ORDER instances
    /// Order Api 客户端
    ///</summary>
    public class OrderClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private OrderClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public OrderClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public OrderClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public OrderClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "order.jdcloud-api.com";
        private const string serviceName = "order";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 查询订单列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GetOrderListResponse GetOrderList(GetOrderListRequest request) {
            return  new GetOrderListExecutor().Client(this).Execute<GetOrderListResponse, GetOrderListResult, GetOrderListRequest>(request);
        }
#else
        /// <summary>
        /// 查询订单列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GetOrderListResponse> GetOrderList(GetOrderListRequest request) {
            return await new GetOrderListExecutor().Client(this).Execute<GetOrderListResponse, GetOrderListResult, GetOrderListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 取消订单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CancelOrderResponse CancelOrder(CancelOrderRequest request) {
            return  new CancelOrderExecutor().Client(this).Execute<CancelOrderResponse, CancelOrderResult, CancelOrderRequest>(request);
        }
#else
        /// <summary>
        /// 取消订单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CancelOrderResponse> CancelOrder(CancelOrderRequest request) {
            return await new CancelOrderExecutor().Client(this).Execute<CancelOrderResponse, CancelOrderResult, CancelOrderRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建正式订单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateOrderResponse CreateOrder(CreateOrderRequest request) {
            return  new CreateOrderExecutor().Client(this).Execute<CreateOrderResponse, CreateOrderResult, CreateOrderRequest>(request);
        }
#else
        /// <summary>
        /// 创建正式订单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateOrderResponse> CreateOrder(CreateOrderRequest request) {
            return await new CreateOrderExecutor().Client(this).Execute<CreateOrderResponse, CreateOrderResult, CreateOrderRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 订单改价
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateOrderPriceResponse UpdateOrderPrice(UpdateOrderPriceRequest request) {
            return  new UpdateOrderPriceExecutor().Client(this).Execute<UpdateOrderPriceResponse, UpdateOrderPriceResult, UpdateOrderPriceRequest>(request);
        }
#else
        /// <summary>
        /// 订单改价
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateOrderPriceResponse> UpdateOrderPrice(UpdateOrderPriceRequest request) {
            return await new UpdateOrderPriceExecutor().Client(this).Execute<UpdateOrderPriceResponse, UpdateOrderPriceResult, UpdateOrderPriceRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 添加商品到购物车
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public AddProductToCarResponse AddProductToCar(AddProductToCarRequest request) {
            return  new AddProductToCarExecutor().Client(this).Execute<AddProductToCarResponse, AddProductToCarResult, AddProductToCarRequest>(request);
        }
#else
        /// <summary>
        /// 添加商品到购物车
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<AddProductToCarResponse> AddProductToCar(AddProductToCarRequest request) {
            return await new AddProductToCarExecutor().Client(this).Execute<AddProductToCarResponse, AddProductToCarResult, AddProductToCarRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 清空购物车
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ClearShoppingCarResponse ClearShoppingCar(ClearShoppingCarRequest request) {
            return  new ClearShoppingCarExecutor().Client(this).Execute<ClearShoppingCarResponse, ClearShoppingCarResult, ClearShoppingCarRequest>(request);
        }
#else
        /// <summary>
        /// 清空购物车
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ClearShoppingCarResponse> ClearShoppingCar(ClearShoppingCarRequest request) {
            return await new ClearShoppingCarExecutor().Client(this).Execute<ClearShoppingCarResponse, ClearShoppingCarResult, ClearShoppingCarRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 购物车查询商品
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryProductFromCarResponse QueryProductFromCar(QueryProductFromCarRequest request) {
            return  new QueryProductFromCarExecutor().Client(this).Execute<QueryProductFromCarResponse, QueryProductFromCarResult, QueryProductFromCarRequest>(request);
        }
#else
        /// <summary>
        /// 购物车查询商品
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryProductFromCarResponse> QueryProductFromCar(QueryProductFromCarRequest request) {
            return await new QueryProductFromCarExecutor().Client(this).Execute<QueryProductFromCarResponse, QueryProductFromCarResult, QueryProductFromCarRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 统一下单接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UnifyOrderResponse UnifyOrder(UnifyOrderRequest request) {
            return  new UnifyOrderExecutor().Client(this).Execute<UnifyOrderResponse, UnifyOrderResult, UnifyOrderRequest>(request);
        }
#else
        /// <summary>
        /// 统一下单接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UnifyOrderResponse> UnifyOrder(UnifyOrderRequest request) {
            return await new UnifyOrderExecutor().Client(this).Execute<UnifyOrderResponse, UnifyOrderResult, UnifyOrderRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建临时订单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateTempOrderResponse CreateTempOrder(CreateTempOrderRequest request) {
            return  new CreateTempOrderExecutor().Client(this).Execute<CreateTempOrderResponse, CreateTempOrderResult, CreateTempOrderRequest>(request);
        }
#else
        /// <summary>
        /// 创建临时订单
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateTempOrderResponse> CreateTempOrder(CreateTempOrderRequest request) {
            return await new CreateTempOrderExecutor().Client(this).Execute<CreateTempOrderResponse, CreateTempOrderResult, CreateTempOrderRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改购物车中商品数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyProductQuantityResponse ModifyProductQuantity(ModifyProductQuantityRequest request) {
            return  new ModifyProductQuantityExecutor().Client(this).Execute<ModifyProductQuantityResponse, ModifyProductQuantityResult, ModifyProductQuantityRequest>(request);
        }
#else
        /// <summary>
        /// 修改购物车中商品数量
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyProductQuantityResponse> ModifyProductQuantity(ModifyProductQuantityRequest request) {
            return await new ModifyProductQuantityExecutor().Client(this).Execute<ModifyProductQuantityResponse, ModifyProductQuantityResult, ModifyProductQuantityRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询订单详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeOrdersResponse DescribeOrders(DescribeOrdersRequest request) {
            return  new DescribeOrdersExecutor().Client(this).Execute<DescribeOrdersResponse, DescribeOrdersResult, DescribeOrdersRequest>(request);
        }
#else
        /// <summary>
        /// 查询订单详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeOrdersResponse> DescribeOrders(DescribeOrdersRequest request) {
            return await new DescribeOrdersExecutor().Client(this).Execute<DescribeOrdersResponse, DescribeOrdersResult, DescribeOrdersRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询临时订单信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryTempOrdersResponse QueryTempOrders(QueryTempOrdersRequest request) {
            return  new QueryTempOrdersExecutor().Client(this).Execute<QueryTempOrdersResponse, QueryTempOrdersResult, QueryTempOrdersRequest>(request);
        }
#else
        /// <summary>
        /// 查询临时订单信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryTempOrdersResponse> QueryTempOrders(QueryTempOrdersRequest request) {
            return await new QueryTempOrdersExecutor().Client(this).Execute<QueryTempOrdersResponse, QueryTempOrdersResult, QueryTempOrdersRequest>(request);
        }
#endif

            /// <summary>
            ///  默认OrderClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>orderClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>orderClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>orderClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造OrderClient 对象
                ///</summary>
                OrderClient Build();
            }

            /// <summary>
            ///  默认OrderClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// OrderClient service client
                /// </summary>
                private  OrderClient orderClient;

                /// <summary>
                ///  默认OrderClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    orderClient = new OrderClient();
                }

                /// <summary>
                ///  构造OrderClient 对象
                ///</summary>
                public OrderClient Build()
                {
                    if (orderClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        orderClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (orderClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("OrderClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (orderClient.HttpRequestConfig == null)
                    {
                        orderClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (orderClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("OrderClient build error: http request config not set");
                        }
                    }
                    return orderClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>orderClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    orderClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>orderClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    orderClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>orderClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    orderClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
