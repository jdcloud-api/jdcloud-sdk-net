/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * API网关
 * API网关相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */


using JDCloudSDK.Core.Auth;
using JDCloudSDK.Core.Client;
using JDCloudSDK.Core.Http;
using JDCloudSDK.Apigateway.Apis;
using JDCloudSDK.Apigateway.Model;
using System;
using System.Collections.Generic;
using System.Text;
#if NET40||NET35
#else
using System.Threading.Tasks;
#endif

namespace JDCloudSDK.Apigateway.Client
{
    /// <summary>
    /// API网关
    /// API网关相关接口
    /// Apigateway Api 客户端
    ///</summary>
    public class ApigatewayClient : JdcloudClient
    {

        /// <summary>
        ///  默认私有构造函数
        /// </summary>
        private ApigatewayClient()
        {

        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="environment">sdk 环境配置信息</param>
        public ApigatewayClient(CredentialsProvider credentialsProvider, HttpRequestConfig httpRequestConfig,SDKEnvironment environment)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
            this.environment = environment;
        }

        /// <summary>
        /// 默认构造函数
        /// </summary>
        /// <param name="httpRequestConfig">http 客户端配置信息</param>
        /// <param name="credentialsProvider">认证信息</param>
        public ApigatewayClient(CredentialsProvider credentialsProvider,HttpRequestConfig httpRequestConfig)
        {
            this.httpRequestConfig = httpRequestConfig;
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        /// 默认构造函数，
        /// 注意如果使用此方法 httpRequestConfig 使用的http 请求 schema 为Https
        /// </summary>
        /// <param name="credentialsProvider">认证信息</param>
        public ApigatewayClient(CredentialsProvider credentialsProvider)
        {
            this.credentialsProvider = credentialsProvider;
        }

        /// <summary>
        ///  版本号 1.0.1
        ///</summary>
        public const string ClientVersion = "1.0.1";

        private const string apiVersion = "v1";
        private const string userAgentPrefix = "JdcloudSdkDotNet";
        private const string defaultEndpoint = "apigateway.jdcloud-api.com";
        private const string serviceName = "apigateway";
        private const string userAgent = userAgentPrefix + "/" + ClientVersion + " " + serviceName + "/" + apiVersion;


        private SDKEnvironment environment = new SDKEnvironment(defaultEndpoint);
        private CredentialsProvider credentialsProvider;
        private HttpRequestConfig httpRequestConfig;

        /// <summary>
        ///  获取证书信息
        ///</summary>
        public override CredentialsProvider CredentialsProvider   { get { return credentialsProvider; } }

        /// <summary>
        ///  获取http 客户端配置信息
        ///</summary>
        public override HttpRequestConfig HttpRequestConfig { get { return httpRequestConfig; } }

        /// <summary>
        ///  获取sdk环境配置信息
        ///</summary>
        public override SDKEnvironment SDKEnvironment { get { return environment; } }

        /// <summary>
        ///  获取用户自定义浏览器识别字符串
        ///</summary>
        public override string UserAgent { get { return userAgent; } }

        /// <summary>
        ///  获取服务名称
        ///</summary>
        public override string ServiceName { get { return serviceName; } }

        /// <summary>
        ///  获取版本号
        ///</summary>
        public override string Version { get { return apiVersion; } }



#if NET40||NET35
        /// <summary>
        /// 修改API分组信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ModifyApiGroupAttributeResponse ModifyApiGroupAttribute(ModifyApiGroupAttributeRequest request) {
            return  new ModifyApiGroupAttributeExecutor().Client(this).Execute<ModifyApiGroupAttributeResponse, ModifyApiGroupAttributeResult, ModifyApiGroupAttributeRequest>(request);
        }
#else
        /// <summary>
        /// 修改API分组信息
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ModifyApiGroupAttributeResponse> ModifyApiGroupAttribute(ModifyApiGroupAttributeRequest request) {
            return await new ModifyApiGroupAttributeExecutor().Client(this).Execute<ModifyApiGroupAttributeResponse, ModifyApiGroupAttributeResult, ModifyApiGroupAttributeRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建访问授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateAccessAuthResponse CreateAccessAuth(CreateAccessAuthRequest request) {
            return  new CreateAccessAuthExecutor().Client(this).Execute<CreateAccessAuthResponse, CreateAccessAuthResult, CreateAccessAuthRequest>(request);
        }
#else
        /// <summary>
        /// 创建访问授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateAccessAuthResponse> CreateAccessAuth(CreateAccessAuthRequest request) {
            return await new CreateAccessAuthExecutor().Client(this).Execute<CreateAccessAuthResponse, CreateAccessAuthResult, CreateAccessAuthRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改api
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateApiResponse UpdateApi(UpdateApiRequest request) {
            return  new UpdateApiExecutor().Client(this).Execute<UpdateApiResponse, UpdateApiResult, UpdateApiRequest>(request);
        }
#else
        /// <summary>
        /// 修改api
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateApiResponse> UpdateApi(UpdateApiRequest request) {
            return await new UpdateApiExecutor().Client(this).Execute<UpdateApiResponse, UpdateApiResult, UpdateApiRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除访问授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DelAccessAuthResponse DelAccessAuth(DelAccessAuthRequest request) {
            return  new DelAccessAuthExecutor().Client(this).Execute<DelAccessAuthResponse, DelAccessAuthResult, DelAccessAuthRequest>(request);
        }
#else
        /// <summary>
        /// 删除访问授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DelAccessAuthResponse> DelAccessAuth(DelAccessAuthRequest request) {
            return await new DelAccessAuthExecutor().Client(this).Execute<DelAccessAuthResponse, DelAccessAuthResult, DelAccessAuthRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 生成sdk、文档
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public GenerateResponse Generate(GenerateRequest request) {
            return  new GenerateExecutor().Client(this).Execute<GenerateResponse, GenerateResult, GenerateRequest>(request);
        }
#else
        /// <summary>
        /// 生成sdk、文档
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<GenerateResponse> Generate(GenerateRequest request) {
            return await new GenerateExecutor().Client(this).Execute<GenerateResponse, GenerateResult, GenerateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建API分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateApiGroupResponse CreateApiGroup(CreateApiGroupRequest request) {
            return  new CreateApiGroupExecutor().Client(this).Execute<CreateApiGroupResponse, CreateApiGroupResult, CreateApiGroupRequest>(request);
        }
#else
        /// <summary>
        /// 创建API分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateApiGroupResponse> CreateApiGroup(CreateApiGroupRequest request) {
            return await new CreateApiGroupExecutor().Client(this).Execute<CreateApiGroupResponse, CreateApiGroupResult, CreateApiGroupRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量删除API分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteApiGroupsResponse DeleteApiGroups(DeleteApiGroupsRequest request) {
            return  new DeleteApiGroupsExecutor().Client(this).Execute<DeleteApiGroupsResponse, DeleteApiGroupsResult, DeleteApiGroupsRequest>(request);
        }
#else
        /// <summary>
        /// 批量删除API分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteApiGroupsResponse> DeleteApiGroups(DeleteApiGroupsRequest request) {
            return await new DeleteApiGroupsExecutor().Client(this).Execute<DeleteApiGroupsResponse, DeleteApiGroupsResult, DeleteApiGroupsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DelAccessKeyResponse DelAccessKey(DelAccessKeyRequest request) {
            return  new DelAccessKeyExecutor().Client(this).Execute<DelAccessKeyResponse, DelAccessKeyResult, DelAccessKeyRequest>(request);
        }
#else
        /// <summary>
        /// 删除密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DelAccessKeyResponse> DelAccessKey(DelAccessKeyRequest request) {
            return await new DelAccessKeyExecutor().Client(this).Execute<DelAccessKeyResponse, DelAccessKeyResult, DelAccessKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询api列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryApisResponse QueryApis(QueryApisRequest request) {
            return  new QueryApisExecutor().Client(this).Execute<QueryApisResponse, QueryApisResult, QueryApisRequest>(request);
        }
#else
        /// <summary>
        /// 查询api列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryApisResponse> QueryApis(QueryApisRequest request) {
            return await new QueryApisExecutor().Client(this).Execute<QueryApisResponse, QueryApisResult, QueryApisRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 检查分组名称是否重复,返回重复的apiGroupId,如果没有返回空
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CheckGroupNameExistResponse CheckGroupNameExist(CheckGroupNameExistRequest request) {
            return  new CheckGroupNameExistExecutor().Client(this).Execute<CheckGroupNameExistResponse, CheckGroupNameExistResult, CheckGroupNameExistRequest>(request);
        }
#else
        /// <summary>
        /// 检查分组名称是否重复,返回重复的apiGroupId,如果没有返回空
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CheckGroupNameExistResponse> CheckGroupNameExist(CheckGroupNameExistRequest request) {
            return await new CheckGroupNameExistExecutor().Client(this).Execute<CheckGroupNameExistResponse, CheckGroupNameExistResult, CheckGroupNameExistRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 导入api
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ImportApiResponse ImportApi(ImportApiRequest request) {
            return  new ImportApiExecutor().Client(this).Execute<ImportApiResponse, ImportApiResult, ImportApiRequest>(request);
        }
#else
        /// <summary>
        /// 导入api
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ImportApiResponse> ImportApi(ImportApiRequest request) {
            return await new ImportApiExecutor().Client(this).Execute<ImportApiResponse, ImportApiResult, ImportApiRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询访问授权列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAccessAuthsResponse QueryAccessAuths(QueryAccessAuthsRequest request) {
            return  new QueryAccessAuthsExecutor().Client(this).Execute<QueryAccessAuthsResponse, QueryAccessAuthsResult, QueryAccessAuthsRequest>(request);
        }
#else
        /// <summary>
        /// 查询访问授权列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAccessAuthsResponse> QueryAccessAuths(QueryAccessAuthsRequest request) {
            return await new QueryAccessAuthsExecutor().Client(this).Execute<QueryAccessAuthsResponse, QueryAccessAuthsResult, QueryAccessAuthsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateAccessKeyResponse CreateAccessKey(CreateAccessKeyRequest request) {
            return  new CreateAccessKeyExecutor().Client(this).Execute<CreateAccessKeyResponse, CreateAccessKeyResult, CreateAccessKeyRequest>(request);
        }
#else
        /// <summary>
        /// 创建密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateAccessKeyResponse> CreateAccessKey(CreateAccessKeyRequest request) {
            return await new CreateAccessKeyExecutor().Client(this).Execute<CreateAccessKeyResponse, CreateAccessKeyResult, CreateAccessKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 修改流控策略
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateRateLimitPolicyResponse UpdateRateLimitPolicy(UpdateRateLimitPolicyRequest request) {
            return  new UpdateRateLimitPolicyExecutor().Client(this).Execute<UpdateRateLimitPolicyResponse, UpdateRateLimitPolicyResult, UpdateRateLimitPolicyRequest>(request);
        }
#else
        /// <summary>
        /// 修改流控策略
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateRateLimitPolicyResponse> UpdateRateLimitPolicy(UpdateRateLimitPolicyRequest request) {
            return await new UpdateRateLimitPolicyExecutor().Client(this).Execute<UpdateRateLimitPolicyResponse, UpdateRateLimitPolicyResult, UpdateRateLimitPolicyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询单个密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAccessKeyResponse QueryAccessKey(QueryAccessKeyRequest request) {
            return  new QueryAccessKeyExecutor().Client(this).Execute<QueryAccessKeyResponse, QueryAccessKeyResult, QueryAccessKeyRequest>(request);
        }
#else
        /// <summary>
        /// 查询单个密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAccessKeyResponse> QueryAccessKey(QueryAccessKeyRequest request) {
            return await new QueryAccessKeyExecutor().Client(this).Execute<QueryAccessKeyResponse, QueryAccessKeyResult, QueryAccessKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateAccessKeyResponse UpdateAccessKey(UpdateAccessKeyRequest request) {
            return  new UpdateAccessKeyExecutor().Client(this).Execute<UpdateAccessKeyResponse, UpdateAccessKeyResult, UpdateAccessKeyRequest>(request);
        }
#else
        /// <summary>
        /// 更新密钥
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateAccessKeyResponse> UpdateAccessKey(UpdateAccessKeyRequest request) {
            return await new UpdateAccessKeyExecutor().Client(this).Execute<UpdateAccessKeyResponse, UpdateAccessKeyResult, UpdateAccessKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询可绑定分组列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryKeyGroupListResponse QueryKeyGroupList(QueryKeyGroupListRequest request) {
            return  new QueryKeyGroupListExecutor().Client(this).Execute<QueryKeyGroupListResponse, QueryKeyGroupListResult, QueryKeyGroupListRequest>(request);
        }
#else
        /// <summary>
        /// 查询可绑定分组列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryKeyGroupListResponse> QueryKeyGroupList(QueryKeyGroupListRequest request) {
            return await new QueryKeyGroupListExecutor().Client(this).Execute<QueryKeyGroupListResponse, QueryKeyGroupListResult, QueryKeyGroupListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 更新访问授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public UpdateAccessAuthResponse UpdateAccessAuth(UpdateAccessAuthRequest request) {
            return  new UpdateAccessAuthExecutor().Client(this).Execute<UpdateAccessAuthResponse, UpdateAccessAuthResult, UpdateAccessAuthRequest>(request);
        }
#else
        /// <summary>
        /// 更新访问授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<UpdateAccessAuthResponse> UpdateAccessAuth(UpdateAccessAuthRequest request) {
            return await new UpdateAccessAuthExecutor().Client(this).Execute<UpdateAccessAuthResponse, UpdateAccessAuthResult, UpdateAccessAuthRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询流控策略列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryRateLimitPoliciesResponse QueryRateLimitPolicies(QueryRateLimitPoliciesRequest request) {
            return  new QueryRateLimitPoliciesExecutor().Client(this).Execute<QueryRateLimitPoliciesResponse, QueryRateLimitPoliciesResult, QueryRateLimitPoliciesRequest>(request);
        }
#else
        /// <summary>
        /// 查询流控策略列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryRateLimitPoliciesResponse> QueryRateLimitPolicies(QueryRateLimitPoliciesRequest request) {
            return await new QueryRateLimitPoliciesExecutor().Client(this).Execute<QueryRateLimitPoliciesResponse, QueryRateLimitPoliciesResult, QueryRateLimitPoliciesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量删除流控策略接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeletePoliciesResponse DeletePolicies(DeletePoliciesRequest request) {
            return  new DeletePoliciesExecutor().Client(this).Execute<DeletePoliciesResponse, DeletePoliciesResult, DeletePoliciesRequest>(request);
        }
#else
        /// <summary>
        /// 批量删除流控策略接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeletePoliciesResponse> DeletePolicies(DeletePoliciesRequest request) {
            return await new DeletePoliciesExecutor().Client(this).Execute<DeletePoliciesResponse, DeletePoliciesResult, DeletePoliciesRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询绑定分组详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryBindGroupKeyResponse QueryBindGroupKey(QueryBindGroupKeyRequest request) {
            return  new QueryBindGroupKeyExecutor().Client(this).Execute<QueryBindGroupKeyResponse, QueryBindGroupKeyResult, QueryBindGroupKeyRequest>(request);
        }
#else
        /// <summary>
        /// 查询绑定分组详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryBindGroupKeyResponse> QueryBindGroupKey(QueryBindGroupKeyRequest request) {
            return await new QueryBindGroupKeyExecutor().Client(this).Execute<QueryBindGroupKeyResponse, QueryBindGroupKeyResult, QueryBindGroupKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量删除API接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteApisResponse DeleteApis(DeleteApisRequest request) {
            return  new DeleteApisExecutor().Client(this).Execute<DeleteApisResponse, DeleteApisResult, DeleteApisRequest>(request);
        }
#else
        /// <summary>
        /// 批量删除API接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteApisResponse> DeleteApis(DeleteApisRequest request) {
            return await new DeleteApisExecutor().Client(this).Execute<DeleteApisResponse, DeleteApisResult, DeleteApisRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询单个访问授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAccessAuthResponse QueryAccessAuth(QueryAccessAuthRequest request) {
            return  new QueryAccessAuthExecutor().Client(this).Execute<QueryAccessAuthResponse, QueryAccessAuthResult, QueryAccessAuthRequest>(request);
        }
#else
        /// <summary>
        /// 查询单个访问授权
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAccessAuthResponse> QueryAccessAuth(QueryAccessAuthRequest request) {
            return await new QueryAccessAuthExecutor().Client(this).Execute<QueryAccessAuthResponse, QueryAccessAuthResult, QueryAccessAuthRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量删除密钥接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteAccessKeysResponse DeleteAccessKeys(DeleteAccessKeysRequest request) {
            return  new DeleteAccessKeysExecutor().Client(this).Execute<DeleteAccessKeysResponse, DeleteAccessKeysResult, DeleteAccessKeysRequest>(request);
        }
#else
        /// <summary>
        /// 批量删除密钥接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteAccessKeysResponse> DeleteAccessKeys(DeleteAccessKeysRequest request) {
            return await new DeleteAccessKeysExecutor().Client(this).Execute<DeleteAccessKeysResponse, DeleteAccessKeysResult, DeleteAccessKeysRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建api
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateApisResponse CreateApis(CreateApisRequest request) {
            return  new CreateApisExecutor().Client(this).Execute<CreateApisResponse, CreateApisResult, CreateApisRequest>(request);
        }
#else
        /// <summary>
        /// 创建api
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateApisResponse> CreateApis(CreateApisRequest request) {
            return await new CreateApisExecutor().Client(this).Execute<CreateApisResponse, CreateApisResult, CreateApisRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除单个API分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteApiGroupResponse DeleteApiGroup(DeleteApiGroupRequest request) {
            return  new DeleteApiGroupExecutor().Client(this).Execute<DeleteApiGroupResponse, DeleteApiGroupResult, DeleteApiGroupRequest>(request);
        }
#else
        /// <summary>
        /// 删除单个API分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteApiGroupResponse> DeleteApiGroup(DeleteApiGroupRequest request) {
            return await new DeleteApiGroupExecutor().Client(this).Execute<DeleteApiGroupResponse, DeleteApiGroupResult, DeleteApiGroupRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询API分组详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeApiGroupResponse DescribeApiGroup(DescribeApiGroupRequest request) {
            return  new DescribeApiGroupExecutor().Client(this).Execute<DescribeApiGroupResponse, DescribeApiGroupResult, DescribeApiGroupRequest>(request);
        }
#else
        /// <summary>
        /// 查询API分组详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeApiGroupResponse> DescribeApiGroup(DescribeApiGroupRequest request) {
            return await new DescribeApiGroupExecutor().Client(this).Execute<DescribeApiGroupResponse, DescribeApiGroupResult, DescribeApiGroupRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 绑定分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public BindGroupPolicyResponse BindGroupPolicy(BindGroupPolicyRequest request) {
            return  new BindGroupPolicyExecutor().Client(this).Execute<BindGroupPolicyResponse, BindGroupPolicyResult, BindGroupPolicyRequest>(request);
        }
#else
        /// <summary>
        /// 绑定分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<BindGroupPolicyResponse> BindGroupPolicy(BindGroupPolicyRequest request) {
            return await new BindGroupPolicyExecutor().Client(this).Execute<BindGroupPolicyResponse, BindGroupPolicyResult, BindGroupPolicyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询绑定分组详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryBindGroupAuthResponse QueryBindGroupAuth(QueryBindGroupAuthRequest request) {
            return  new QueryBindGroupAuthExecutor().Client(this).Execute<QueryBindGroupAuthResponse, QueryBindGroupAuthResult, QueryBindGroupAuthRequest>(request);
        }
#else
        /// <summary>
        /// 查询绑定分组详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryBindGroupAuthResponse> QueryBindGroupAuth(QueryBindGroupAuthRequest request) {
            return await new QueryBindGroupAuthExecutor().Client(this).Execute<QueryBindGroupAuthResponse, QueryBindGroupAuthResult, QueryBindGroupAuthRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询绑定分组详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryBindGroupPolicyResponse QueryBindGroupPolicy(QueryBindGroupPolicyRequest request) {
            return  new QueryBindGroupPolicyExecutor().Client(this).Execute<QueryBindGroupPolicyResponse, QueryBindGroupPolicyResult, QueryBindGroupPolicyRequest>(request);
        }
#else
        /// <summary>
        /// 查询绑定分组详情
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryBindGroupPolicyResponse> QueryBindGroupPolicy(QueryBindGroupPolicyRequest request) {
            return await new QueryBindGroupPolicyExecutor().Client(this).Execute<QueryBindGroupPolicyResponse, QueryBindGroupPolicyResult, QueryBindGroupPolicyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DescribeApiGroupsResponse DescribeApiGroups(DescribeApiGroupsRequest request) {
            return  new DescribeApiGroupsExecutor().Client(this).Execute<DescribeApiGroupsResponse, DescribeApiGroupsResult, DescribeApiGroupsRequest>(request);
        }
#else
        /// <summary>
        /// 查询分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DescribeApiGroupsResponse> DescribeApiGroups(DescribeApiGroupsRequest request) {
            return await new DescribeApiGroupsExecutor().Client(this).Execute<DescribeApiGroupsResponse, DescribeApiGroupsResult, DescribeApiGroupsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 绑定分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public BindGroupKeyResponse BindGroupKey(BindGroupKeyRequest request) {
            return  new BindGroupKeyExecutor().Client(this).Execute<BindGroupKeyResponse, BindGroupKeyResult, BindGroupKeyRequest>(request);
        }
#else
        /// <summary>
        /// 绑定分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<BindGroupKeyResponse> BindGroupKey(BindGroupKeyRequest request) {
            return await new BindGroupKeyExecutor().Client(this).Execute<BindGroupKeyResponse, BindGroupKeyResult, BindGroupKeyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询可绑定分组列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAuthGroupListResponse QueryAuthGroupList(QueryAuthGroupListRequest request) {
            return  new QueryAuthGroupListExecutor().Client(this).Execute<QueryAuthGroupListResponse, QueryAuthGroupListResult, QueryAuthGroupListRequest>(request);
        }
#else
        /// <summary>
        /// 查询可绑定分组列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAuthGroupListResponse> QueryAuthGroupList(QueryAuthGroupListRequest request) {
            return await new QueryAuthGroupListExecutor().Client(this).Execute<QueryAuthGroupListResponse, QueryAuthGroupListResult, QueryAuthGroupListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 检查accessAuth是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CheckAuthExistResponse CheckAuthExist(CheckAuthExistRequest request) {
            return  new CheckAuthExistExecutor().Client(this).Execute<CheckAuthExistResponse, CheckAuthExistResult, CheckAuthExistRequest>(request);
        }
#else
        /// <summary>
        /// 检查accessAuth是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CheckAuthExistResponse> CheckAuthExist(CheckAuthExistRequest request) {
            return await new CheckAuthExistExecutor().Client(this).Execute<CheckAuthExistResponse, CheckAuthExistResult, CheckAuthExistRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询单个流控策略
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryRateLimitPolicyResponse QueryRateLimitPolicy(QueryRateLimitPolicyRequest request) {
            return  new QueryRateLimitPolicyExecutor().Client(this).Execute<QueryRateLimitPolicyResponse, QueryRateLimitPolicyResult, QueryRateLimitPolicyRequest>(request);
        }
#else
        /// <summary>
        /// 查询单个流控策略
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryRateLimitPolicyResponse> QueryRateLimitPolicy(QueryRateLimitPolicyRequest request) {
            return await new QueryRateLimitPolicyExecutor().Client(this).Execute<QueryRateLimitPolicyResponse, QueryRateLimitPolicyResult, QueryRateLimitPolicyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询sdk、文档的生成结果
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryGenerateResponse QueryGenerate(QueryGenerateRequest request) {
            return  new QueryGenerateExecutor().Client(this).Execute<QueryGenerateResponse, QueryGenerateResult, QueryGenerateRequest>(request);
        }
#else
        /// <summary>
        /// 查询sdk、文档的生成结果
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryGenerateResponse> QueryGenerate(QueryGenerateRequest request) {
            return await new QueryGenerateExecutor().Client(this).Execute<QueryGenerateResponse, QueryGenerateResult, QueryGenerateRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除api
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DelApiResponse DelApi(DelApiRequest request) {
            return  new DelApiExecutor().Client(this).Execute<DelApiResponse, DelApiResult, DelApiRequest>(request);
        }
#else
        /// <summary>
        /// 删除api
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DelApiResponse> DelApi(DelApiRequest request) {
            return await new DelApiExecutor().Client(this).Execute<DelApiResponse, DelApiResult, DelApiRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 批量删除访问授权接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DeleteAccessAuthIdsResponse DeleteAccessAuthIds(DeleteAccessAuthIdsRequest request) {
            return  new DeleteAccessAuthIdsExecutor().Client(this).Execute<DeleteAccessAuthIdsResponse, DeleteAccessAuthIdsResult, DeleteAccessAuthIdsRequest>(request);
        }
#else
        /// <summary>
        /// 批量删除访问授权接口
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DeleteAccessAuthIdsResponse> DeleteAccessAuthIds(DeleteAccessAuthIdsRequest request) {
            return await new DeleteAccessAuthIdsExecutor().Client(this).Execute<DeleteAccessAuthIdsResponse, DeleteAccessAuthIdsResult, DeleteAccessAuthIdsRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 检查策略名是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CheckPolicyNameResponse CheckPolicyName(CheckPolicyNameRequest request) {
            return  new CheckPolicyNameExecutor().Client(this).Execute<CheckPolicyNameResponse, CheckPolicyNameResult, CheckPolicyNameRequest>(request);
        }
#else
        /// <summary>
        /// 检查策略名是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CheckPolicyNameResponse> CheckPolicyName(CheckPolicyNameRequest request) {
            return await new CheckPolicyNameExecutor().Client(this).Execute<CheckPolicyNameResponse, CheckPolicyNameResult, CheckPolicyNameRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建API时，检查API名称是否重复,返回重复的apiId,如果没有返回空
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CheckApiNameExistResponse CheckApiNameExist(CheckApiNameExistRequest request) {
            return  new CheckApiNameExistExecutor().Client(this).Execute<CheckApiNameExistResponse, CheckApiNameExistResult, CheckApiNameExistRequest>(request);
        }
#else
        /// <summary>
        /// 创建API时，检查API名称是否重复,返回重复的apiId,如果没有返回空
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CheckApiNameExistResponse> CheckApiNameExist(CheckApiNameExistRequest request) {
            return await new CheckApiNameExistExecutor().Client(this).Execute<CheckApiNameExistResponse, CheckApiNameExistResult, CheckApiNameExistRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 绑定分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public BindGroupAuthResponse BindGroupAuth(BindGroupAuthRequest request) {
            return  new BindGroupAuthExecutor().Client(this).Execute<BindGroupAuthResponse, BindGroupAuthResult, BindGroupAuthRequest>(request);
        }
#else
        /// <summary>
        /// 绑定分组
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<BindGroupAuthResponse> BindGroupAuth(BindGroupAuthRequest request) {
            return await new BindGroupAuthExecutor().Client(this).Execute<BindGroupAuthResponse, BindGroupAuthResult, BindGroupAuthRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 检查API的body参数是否合法
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public ValidateBodyParameterResponse ValidateBodyParameter(ValidateBodyParameterRequest request) {
            return  new ValidateBodyParameterExecutor().Client(this).Execute<ValidateBodyParameterResponse, ValidateBodyParameterResult, ValidateBodyParameterRequest>(request);
        }
#else
        /// <summary>
        /// 检查API的body参数是否合法
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<ValidateBodyParameterResponse> ValidateBodyParameter(ValidateBodyParameterRequest request) {
            return await new ValidateBodyParameterExecutor().Client(this).Execute<ValidateBodyParameterResponse, ValidateBodyParameterResult, ValidateBodyParameterRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询密钥列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryAccessKeysResponse QueryAccessKeys(QueryAccessKeysRequest request) {
            return  new QueryAccessKeysExecutor().Client(this).Execute<QueryAccessKeysResponse, QueryAccessKeysResult, QueryAccessKeysRequest>(request);
        }
#else
        /// <summary>
        /// 查询密钥列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryAccessKeysResponse> QueryAccessKeys(QueryAccessKeysRequest request) {
            return await new QueryAccessKeysExecutor().Client(this).Execute<QueryAccessKeysResponse, QueryAccessKeysResult, QueryAccessKeysRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 创建流控策略
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CreateRateLimitPolicyResponse CreateRateLimitPolicy(CreateRateLimitPolicyRequest request) {
            return  new CreateRateLimitPolicyExecutor().Client(this).Execute<CreateRateLimitPolicyResponse, CreateRateLimitPolicyResult, CreateRateLimitPolicyRequest>(request);
        }
#else
        /// <summary>
        /// 创建流控策略
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CreateRateLimitPolicyResponse> CreateRateLimitPolicy(CreateRateLimitPolicyRequest request) {
            return await new CreateRateLimitPolicyExecutor().Client(this).Execute<CreateRateLimitPolicyResponse, CreateRateLimitPolicyResult, CreateRateLimitPolicyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 检查AccessKey是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public CheckKeyExistResponse CheckKeyExist(CheckKeyExistRequest request) {
            return  new CheckKeyExistExecutor().Client(this).Execute<CheckKeyExistResponse, CheckKeyExistResult, CheckKeyExistRequest>(request);
        }
#else
        /// <summary>
        /// 检查AccessKey是否重复
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<CheckKeyExistResponse> CheckKeyExist(CheckKeyExistRequest request) {
            return await new CheckKeyExistExecutor().Client(this).Execute<CheckKeyExistResponse, CheckKeyExistResult, CheckKeyExistRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 删除单个流控策略
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public DelRateLimitPolicyResponse DelRateLimitPolicy(DelRateLimitPolicyRequest request) {
            return  new DelRateLimitPolicyExecutor().Client(this).Execute<DelRateLimitPolicyResponse, DelRateLimitPolicyResult, DelRateLimitPolicyRequest>(request);
        }
#else
        /// <summary>
        /// 删除单个流控策略
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<DelRateLimitPolicyResponse> DelRateLimitPolicy(DelRateLimitPolicyRequest request) {
            return await new DelRateLimitPolicyExecutor().Client(this).Execute<DelRateLimitPolicyResponse, DelRateLimitPolicyResult, DelRateLimitPolicyRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询可绑定分组列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryPolicyGroupListResponse QueryPolicyGroupList(QueryPolicyGroupListRequest request) {
            return  new QueryPolicyGroupListExecutor().Client(this).Execute<QueryPolicyGroupListResponse, QueryPolicyGroupListResult, QueryPolicyGroupListRequest>(request);
        }
#else
        /// <summary>
        /// 查询可绑定分组列表
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryPolicyGroupListResponse> QueryPolicyGroupList(QueryPolicyGroupListRequest request) {
            return await new QueryPolicyGroupListExecutor().Client(this).Execute<QueryPolicyGroupListResponse, QueryPolicyGroupListResult, QueryPolicyGroupListRequest>(request);
        }
#endif
#if NET40||NET35
        /// <summary>
        /// 查询单个api
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public QueryApiResponse QueryApi(QueryApiRequest request) {
            return  new QueryApiExecutor().Client(this).Execute<QueryApiResponse, QueryApiResult, QueryApiRequest>(request);
        }
#else
        /// <summary>
        /// 查询单个api
        /// </summary>
        /// <param name="request">请求参数信息</param>
        /// <returns>请求结果信息</returns>
        public async Task<QueryApiResponse> QueryApi(QueryApiRequest request) {
            return await new QueryApiExecutor().Client(this).Execute<QueryApiResponse, QueryApiResult, QueryApiRequest>(request);
        }
#endif

            /// <summary>
            ///  默认ApigatewayClient 构造器 接口
            ///</summary>
            public interface Builder
            {

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>apigatewayClient 构造器</returns>
                Builder CredentialsProvider(CredentialsProvider provider);

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>apigatewayClient 构造器</returns>
                Builder Environment(Core.Client.SDKEnvironment environment);

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>apigatewayClient 构造器</returns>
                Builder HttpRequestConfig(HttpRequestConfig config);

                /// <summary>
                ///  构造ApigatewayClient 对象
                ///</summary>
                ApigatewayClient Build();
            }

            /// <summary>
            ///  默认ApigatewayClient 构造器
            ///</summary>
            public class DefaultBuilder : Builder
            {
                /// <summary>
                /// ApigatewayClient service client
                /// </summary>
                private  ApigatewayClient apigatewayClient;

                /// <summary>
                ///  默认ApigatewayClient 构造器构造对象
                ///</summary>
                public DefaultBuilder()
                {
                    apigatewayClient = new ApigatewayClient();
                }

                /// <summary>
                ///  构造ApigatewayClient 对象
                ///</summary>
                public ApigatewayClient Build()
                {
                    if (apigatewayClient.CredentialsProvider == null)
                    {
                        //if credentialsProvider not set, try load jdcloud global default  credentials provider
                        apigatewayClient.credentialsProvider = JdCloud.DefaultInstance.GetCredentialsProvider();
                        if (apigatewayClient.credentialsProvider == null)
                        {
                            throw new ArgumentNullException("ApigatewayClient build error: jdcloud credentials provider not set");
                        }
                    }
                    if (apigatewayClient.HttpRequestConfig == null)
                    {
                        apigatewayClient.httpRequestConfig = JdCloud.DefaultInstance.GetHttpRequestConfig();
                        if (apigatewayClient.httpRequestConfig == null)
                        {
                        throw new ArgumentNullException("ApigatewayClient build error: http request config not set");
                        }
                    }
                    return apigatewayClient;
                }

                /// <summary>
                /// 设置认证信息参数
                /// </summary>
                /// <param name="provider">认证信息提供对象</param>
                /// <returns>apigatewayClient 构造器</returns>
                public Builder CredentialsProvider(CredentialsProvider provider)
                {
                    apigatewayClient.credentialsProvider = provider;
                    return this;
                }

                /// <summary>
                /// 设置请求环境参数
                /// </summary>
                /// <param name="environment">环境参数信息</param>
                /// <returns>apigatewayClient 构造器</returns>
                public Builder Environment(SDKEnvironment environment)
                {
                    apigatewayClient.environment = environment;
                    return this;
                }

                /// <summary>
                /// http 请求配置信息
                /// </summary>
                /// <param name="config">http 请求配置信息</param>
                /// <returns>apigatewayClient 构造器</returns>
                public Builder HttpRequestConfig(HttpRequestConfig config)
                {
                    apigatewayClient.httpRequestConfig = config;
                    return this;
                }
            }
    }
}
